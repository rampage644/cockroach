// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

func (u *sqlSymUnion) parameter() Parameter {
	return u.val.(Parameter)
}
func (u *sqlSymUnion) parameters() ParameterList {
	return u.val.(ParameterList)
}

//line sql.y:470
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CALL = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFLICT = 57407
const CONSTRAINT = 57408
const CONSTRAINTS = 57409
const COPY = 57410
const COVERING = 57411
const CREATE = 57412
const CROSS = 57413
const CSV = 57414
const CUBE = 57415
const CURRENT = 57416
const CURRENT_CATALOG = 57417
const CURRENT_DATE = 57418
const CURRENT_SCHEMA = 57419
const CURRENT_ROLE = 57420
const CURRENT_TIME = 57421
const CURRENT_TIMESTAMP = 57422
const CURRENT_USER = 57423
const CYCLE = 57424
const DATA = 57425
const DATABASE = 57426
const DATABASES = 57427
const DATE = 57428
const DAY = 57429
const DEC = 57430
const DECIMAL = 57431
const DEFAULT = 57432
const DEALLOCATE = 57433
const DEFERRABLE = 57434
const DELETE = 57435
const DESC = 57436
const DISCARD = 57437
const DISTINCT = 57438
const DO = 57439
const DOUBLE = 57440
const DROP = 57441
const ELSE = 57442
const ENCODING = 57443
const END = 57444
const ESCAPE = 57445
const EXCEPT = 57446
const EXISTS = 57447
const EXECUTE = 57448
const EXPERIMENTAL_FINGERPRINTS = 57449
const EXPLAIN = 57450
const EXTRACT = 57451
const EXTRACT_DURATION = 57452
const FALSE = 57453
const FAMILY = 57454
const FETCH = 57455
const FILTER = 57456
const FIRST = 57457
const FLOAT = 57458
const FLOAT4 = 57459
const FLOAT8 = 57460
const FLOORDIV = 57461
const FOLLOWING = 57462
const FOR = 57463
const FORCE_INDEX = 57464
const FOREIGN = 57465
const FROM = 57466
const FULL = 57467
const FUNCTION = 57468
const GRANT = 57469
const GRANTS = 57470
const GREATEST = 57471
const GROUP = 57472
const GROUPING = 57473
const HAVING = 57474
const HELP = 57475
const HIGH = 57476
const HOUR = 57477
const IMPORT = 57478
const INCREMENTAL = 57479
const IF = 57480
const IFNULL = 57481
const ILIKE = 57482
const IN = 57483
const INTERLEAVE = 57484
const INDEX = 57485
const INDEXES = 57486
const INITIALLY = 57487
const INNER = 57488
const INSERT = 57489
const INT = 57490
const INT2VECTOR = 57491
const INT2 = 57492
const INT4 = 57493
const INT8 = 57494
const INT64 = 57495
const INTEGER = 57496
const INTERSECT = 57497
const INTERVAL = 57498
const INTO = 57499
const IS = 57500
const ISOLATION = 57501
const JOB = 57502
const JOBS = 57503
const JOIN = 57504
const KEY = 57505
const KEYS = 57506
const KV = 57507
const LATERAL = 57508
const LC_CTYPE = 57509
const LC_COLLATE = 57510
const LEADING = 57511
const LEAST = 57512
const LEFT = 57513
const LEVEL = 57514
const LIKE = 57515
const LIMIT = 57516
const LOCAL = 57517
const LOCALTIME = 57518
const LOCALTIMESTAMP = 57519
const LOW = 57520
const LSHIFT = 57521
const MATCH = 57522
const MINUTE = 57523
const MONTH = 57524
const NAN = 57525
const NAME = 57526
const NAMES = 57527
const NATURAL = 57528
const NEXT = 57529
const NO = 57530
const NO_INDEX_JOIN = 57531
const NORMAL = 57532
const NOT = 57533
const NOTHING = 57534
const NULL = 57535
const NULLIF = 57536
const NULLS = 57537
const NUMERIC = 57538
const OF = 57539
const OFF = 57540
const OFFSET = 57541
const OID = 57542
const ON = 57543
const ONLY = 57544
const OPTIONS = 57545
const OR = 57546
const ORDER = 57547
const ORDINALITY = 57548
const OUT = 57549
const OUTER = 57550
const OVER = 57551
const OVERLAPS = 57552
const OVERLAY = 57553
const PARENT = 57554
const PARTIAL = 57555
const PARTITION = 57556
const PASSWORD = 57557
const PAUSE = 57558
const PLACING = 57559
const PLANS = 57560
const POSITION = 57561
const PRECEDING = 57562
const PRECISION = 57563
const PREPARE = 57564
const PRIMARY = 57565
const PRIORITY = 57566
const PROCEDURE = 57567
const QUERIES = 57568
const QUERY = 57569
const RANGE = 57570
const READ = 57571
const REAL = 57572
const RECURSIVE = 57573
const REF = 57574
const REFERENCES = 57575
const REGCLASS = 57576
const REGPROC = 57577
const REGPROCEDURE = 57578
const REGNAMESPACE = 57579
const REGTYPE = 57580
const RENAME = 57581
const REPEATABLE = 57582
const RELEASE = 57583
const RESET = 57584
const RESTORE = 57585
const RESTRICT = 57586
const RESUME = 57587
const RETURNING = 57588
const REVOKE = 57589
const RIGHT = 57590
const ROLLBACK = 57591
const ROLLUP = 57592
const ROW = 57593
const ROWS = 57594
const RSHIFT = 57595
const SAVEPOINT = 57596
const SCATTER = 57597
const SEARCH = 57598
const SECOND = 57599
const SELECT = 57600
const SEQUENCES = 57601
const SERIAL = 57602
const SERIALIZABLE = 57603
const SESSION = 57604
const SESSIONS = 57605
const SESSION_USER = 57606
const SET = 57607
const SETTING = 57608
const SETTINGS = 57609
const SHOW = 57610
const SIMILAR = 57611
const SIMPLE = 57612
const SMALLINT = 57613
const SMALLSERIAL = 57614
const SNAPSHOT = 57615
const SOME = 57616
const SPLIT = 57617
const SQL = 57618
const START = 57619
const STATUS = 57620
const STDIN = 57621
const STRICT = 57622
const STRING = 57623
const STORE = 57624
const STORING = 57625
const SUBSTRING = 57626
const SYMMETRIC = 57627
const SYSTEM = 57628
const TABLE = 57629
const TABLES = 57630
const TEMP = 57631
const TEMPLATE = 57632
const TEMPORARY = 57633
const TESTING_RANGES = 57634
const TESTING_RELOCATE = 57635
const TEXT = 57636
const THEN = 57637
const TIME = 57638
const TIMESTAMP = 57639
const TIMESTAMPTZ = 57640
const TO = 57641
const TRAILING = 57642
const TRACE = 57643
const TRANSACTION = 57644
const TREAT = 57645
const TRIM = 57646
const TRUE = 57647
const TRUNCATE = 57648
const TYPE = 57649
const UNBOUNDED = 57650
const UNCOMMITTED = 57651
const UNION = 57652
const UNIQUE = 57653
const UNKNOWN = 57654
const UPDATE = 57655
const UPSERT = 57656
const USE = 57657
const USER = 57658
const USERS = 57659
const USING = 57660
const UUID = 57661
const VALID = 57662
const VALIDATE = 57663
const VALUE = 57664
const VALUES = 57665
const VARCHAR = 57666
const VARIADIC = 57667
const VIEW = 57668
const VARYING = 57669
const WHEN = 57670
const WHERE = 57671
const WINDOW = 57672
const WITH = 57673
const WITHIN = 57674
const WITHOUT = 57675
const WRITE = 57676
const YEAR = 57677
const ZONE = 57678
const NOT_LA = 57679
const WITH_LA = 57680
const AS_LA = 57681
const POSTFIXOP = 57682
const UMINUS = 57683
const HELPTOKEN = 57684

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CALL",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURE",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'{'",
	"'}'",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6582

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 55,
	361, 55,
	-2, 673,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	143, 517,
	-2, 0,
	-1, 65,
	93, 673,
	147, 673,
	313, 673,
	314, 673,
	-2, 0,
	-1, 76,
	104, 648,
	113, 648,
	155, 648,
	174, 648,
	199, 648,
	205, 648,
	310, 648,
	-2, 637,
	-1, 107,
	4, 675,
	20, 675,
	21, 675,
	23, 675,
	28, 675,
	33, 675,
	34, 675,
	35, 675,
	36, 675,
	37, 675,
	38, 675,
	39, 675,
	40, 675,
	41, 675,
	42, 675,
	44, 675,
	45, 675,
	46, 675,
	47, 675,
	48, 675,
	49, 675,
	52, 675,
	53, 675,
	54, 675,
	56, 675,
	57, 675,
	61, 675,
	62, 675,
	63, 675,
	65, 675,
	67, 675,
	68, 675,
	69, 675,
	72, 675,
	73, 675,
	74, 675,
	82, 675,
	83, 675,
	84, 675,
	85, 675,
	86, 675,
	87, 675,
	88, 675,
	89, 675,
	91, 675,
	93, 675,
	95, 675,
	98, 675,
	99, 675,
	101, 675,
	105, 675,
	106, 675,
	107, 675,
	108, 675,
	109, 675,
	110, 675,
	114, 675,
	115, 675,
	116, 675,
	117, 675,
	118, 675,
	120, 675,
	122, 675,
	126, 675,
	128, 675,
	129, 675,
	131, 675,
	133, 675,
	134, 675,
	135, 675,
	136, 675,
	137, 675,
	138, 675,
	139, 675,
	142, 675,
	144, 675,
	147, 675,
	148, 675,
	149, 675,
	150, 675,
	151, 675,
	152, 675,
	153, 675,
	154, 675,
	156, 675,
	159, 675,
	160, 675,
	161, 675,
	163, 675,
	164, 675,
	165, 675,
	167, 675,
	168, 675,
	170, 675,
	172, 675,
	175, 675,
	178, 675,
	180, 675,
	181, 675,
	182, 675,
	183, 675,
	184, 675,
	185, 675,
	187, 675,
	188, 675,
	189, 675,
	190, 675,
	194, 675,
	195, 675,
	196, 675,
	197, 675,
	198, 675,
	200, 675,
	202, 675,
	203, 675,
	206, 675,
	207, 675,
	209, 675,
	211, 675,
	212, 675,
	213, 675,
	214, 675,
	215, 675,
	216, 675,
	218, 675,
	219, 675,
	220, 675,
	221, 675,
	222, 675,
	224, 675,
	225, 675,
	226, 675,
	227, 675,
	228, 675,
	229, 675,
	230, 675,
	231, 675,
	232, 675,
	234, 675,
	235, 675,
	236, 675,
	237, 675,
	238, 675,
	239, 675,
	240, 675,
	241, 675,
	242, 675,
	243, 675,
	244, 675,
	245, 675,
	247, 675,
	249, 675,
	250, 675,
	251, 675,
	252, 675,
	254, 675,
	255, 675,
	256, 675,
	257, 675,
	259, 675,
	260, 675,
	261, 675,
	262, 675,
	263, 675,
	265, 675,
	266, 675,
	267, 675,
	268, 675,
	270, 675,
	271, 675,
	272, 675,
	273, 675,
	275, 675,
	276, 675,
	277, 675,
	278, 675,
	279, 675,
	280, 675,
	281, 675,
	282, 675,
	283, 675,
	284, 675,
	286, 675,
	288, 675,
	289, 675,
	290, 675,
	291, 675,
	292, 675,
	293, 675,
	294, 675,
	296, 675,
	297, 675,
	298, 675,
	301, 675,
	302, 675,
	303, 675,
	304, 675,
	306, 675,
	307, 675,
	308, 675,
	309, 675,
	312, 675,
	313, 675,
	314, 675,
	315, 675,
	317, 675,
	319, 675,
	320, 675,
	321, 675,
	322, 675,
	323, 675,
	324, 675,
	327, 675,
	332, 675,
	333, 675,
	334, 675,
	335, 675,
	336, 675,
	-2, 0,
	-1, 120,
	104, 647,
	113, 647,
	155, 647,
	174, 647,
	199, 647,
	205, 647,
	310, 647,
	-2, 640,
	-1, 124,
	1, 566,
	159, 566,
	224, 566,
	229, 566,
	360, 566,
	361, 566,
	364, 566,
	-2, 0,
	-1, 126,
	1, 566,
	360, 566,
	361, 566,
	364, 566,
	-2, 0,
	-1, 127,
	1, 566,
	360, 566,
	361, 566,
	364, 566,
	-2, 0,
	-1, 128,
	1, 570,
	360, 570,
	361, 570,
	364, 570,
	-2, 0,
	-1, 135,
	4, 681,
	5, 681,
	6, 681,
	7, 681,
	8, 681,
	9, 681,
	20, 681,
	21, 681,
	23, 681,
	28, 681,
	29, 681,
	33, 681,
	34, 681,
	35, 681,
	36, 681,
	37, 681,
	38, 681,
	39, 681,
	40, 681,
	41, 681,
	42, 681,
	44, 681,
	45, 681,
	46, 681,
	47, 681,
	48, 681,
	49, 681,
	50, 681,
	51, 681,
	52, 681,
	53, 681,
	54, 681,
	56, 681,
	57, 681,
	59, 681,
	61, 681,
	62, 681,
	63, 681,
	65, 681,
	67, 681,
	68, 681,
	69, 681,
	71, 681,
	72, 681,
	73, 681,
	74, 681,
	76, 681,
	77, 681,
	78, 681,
	80, 681,
	81, 681,
	82, 681,
	83, 681,
	84, 681,
	85, 681,
	86, 681,
	87, 681,
	88, 681,
	89, 681,
	91, 681,
	93, 681,
	95, 681,
	98, 681,
	99, 681,
	101, 681,
	105, 681,
	106, 681,
	107, 681,
	108, 681,
	109, 681,
	110, 681,
	111, 681,
	114, 681,
	115, 681,
	116, 681,
	117, 681,
	118, 681,
	120, 681,
	122, 681,
	125, 681,
	126, 681,
	128, 681,
	129, 681,
	131, 681,
	133, 681,
	134, 681,
	135, 681,
	136, 681,
	137, 681,
	138, 681,
	139, 681,
	140, 681,
	142, 681,
	144, 681,
	146, 681,
	147, 681,
	148, 681,
	149, 681,
	150, 681,
	151, 681,
	152, 681,
	153, 681,
	154, 681,
	156, 681,
	158, 681,
	159, 681,
	160, 681,
	161, 681,
	162, 681,
	163, 681,
	164, 681,
	165, 681,
	167, 681,
	168, 681,
	170, 681,
	171, 681,
	172, 681,
	173, 681,
	175, 681,
	178, 681,
	180, 681,
	181, 681,
	182, 681,
	183, 681,
	184, 681,
	185, 681,
	186, 681,
	187, 681,
	188, 681,
	189, 681,
	190, 681,
	191, 681,
	193, 681,
	194, 681,
	195, 681,
	196, 681,
	197, 681,
	198, 681,
	200, 681,
	203, 681,
	206, 681,
	207, 681,
	208, 681,
	209, 681,
	210, 681,
	211, 681,
	212, 681,
	213, 681,
	214, 681,
	215, 681,
	216, 681,
	218, 681,
	219, 681,
	220, 681,
	221, 681,
	222, 681,
	224, 681,
	225, 681,
	226, 681,
	227, 681,
	228, 681,
	229, 681,
	230, 681,
	231, 681,
	232, 681,
	234, 681,
	235, 681,
	236, 681,
	237, 681,
	238, 681,
	239, 681,
	240, 681,
	241, 681,
	242, 681,
	243, 681,
	244, 681,
	245, 681,
	247, 681,
	248, 681,
	249, 681,
	250, 681,
	251, 681,
	252, 681,
	254, 681,
	255, 681,
	256, 681,
	257, 681,
	259, 681,
	260, 681,
	261, 681,
	262, 681,
	263, 681,
	264, 681,
	265, 681,
	266, 681,
	267, 681,
	268, 681,
	269, 681,
	270, 681,
	271, 681,
	272, 681,
	273, 681,
	275, 681,
	276, 681,
	277, 681,
	278, 681,
	279, 681,
	280, 681,
	281, 681,
	282, 681,
	283, 681,
	284, 681,
	286, 681,
	288, 681,
	289, 681,
	290, 681,
	291, 681,
	292, 681,
	293, 681,
	294, 681,
	296, 681,
	297, 681,
	298, 681,
	301, 681,
	302, 681,
	303, 681,
	304, 681,
	305, 681,
	306, 681,
	307, 681,
	308, 681,
	309, 681,
	312, 681,
	313, 681,
	314, 681,
	315, 681,
	316, 681,
	317, 681,
	319, 681,
	320, 681,
	321, 681,
	322, 681,
	323, 681,
	324, 681,
	327, 681,
	332, 681,
	333, 681,
	334, 681,
	335, 681,
	336, 681,
	337, 681,
	343, 681,
	348, 681,
	349, 681,
	350, 681,
	357, 681,
	365, 681,
	-2, 0,
	-1, 138,
	1, 55,
	361, 55,
	364, 55,
	-2, 673,
	-1, 605,
	124, 1271,
	299, 1271,
	342, 1271,
	359, 1271,
	-2, 0,
	-1, 606,
	124, 1222,
	299, 1222,
	342, 1222,
	359, 1222,
	-2, 0,
	-1, 608,
	124, 1330,
	299, 1330,
	342, 1330,
	359, 1330,
	-2, 0,
	-1, 610,
	124, 1352,
	299, 1352,
	342, 1352,
	359, 1352,
	-2, 0,
	-1, 617,
	124, 1276,
	299, 1276,
	342, 1276,
	359, 1276,
	-2, 303,
	-1, 643,
	1, 385,
	356, 385,
	358, 385,
	360, 385,
	361, 385,
	364, 385,
	-2, 0,
	-1, 644,
	1, 433,
	121, 433,
	356, 433,
	358, 433,
	360, 433,
	361, 433,
	364, 433,
	-2, 0,
	-1, 650,
	1, 399,
	356, 399,
	358, 399,
	360, 399,
	361, 399,
	364, 399,
	-2, 0,
	-1, 652,
	1, 403,
	356, 403,
	358, 403,
	360, 403,
	361, 403,
	364, 403,
	-2, 0,
	-1, 655,
	1, 411,
	356, 411,
	358, 411,
	360, 411,
	361, 411,
	364, 411,
	-2, 0,
	-1, 656,
	1, 416,
	356, 416,
	358, 416,
	360, 416,
	361, 416,
	364, 416,
	-2, 0,
	-1, 659,
	1, 426,
	356, 426,
	358, 426,
	360, 426,
	361, 426,
	364, 426,
	-2, 0,
	-1, 668,
	113, 683,
	174, 683,
	199, 683,
	-2, 643,
	-1, 671,
	113, 682,
	174, 682,
	199, 682,
	-2, 641,
	-1, 801,
	357, 1199,
	-2, 1192,
	-1, 802,
	357, 1200,
	-2, 1193,
	-1, 808,
	5, 856,
	357, 856,
	-2, 1403,
	-1, 833,
	5, 815,
	-2, 1373,
	-1, 834,
	5, 850,
	357, 850,
	-2, 1375,
	-1, 835,
	5, 825,
	-2, 1376,
	-1, 836,
	5, 824,
	-2, 1377,
	-1, 837,
	5, 850,
	357, 850,
	-2, 1380,
	-1, 838,
	5, 850,
	357, 850,
	-2, 1381,
	-1, 839,
	5, 851,
	-2, 1384,
	-1, 840,
	5, 807,
	-2, 1385,
	-1, 841,
	5, 807,
	-2, 1386,
	-1, 842,
	5, 832,
	-2, 1390,
	-1, 843,
	5, 817,
	-2, 1391,
	-1, 844,
	5, 818,
	-2, 1392,
	-1, 845,
	5, 808,
	-2, 1397,
	-1, 846,
	5, 809,
	-2, 1398,
	-1, 847,
	5, 810,
	-2, 1399,
	-1, 848,
	5, 811,
	-2, 1400,
	-1, 849,
	5, 812,
	-2, 1401,
	-1, 850,
	5, 813,
	-2, 1402,
	-1, 851,
	5, 807,
	-2, 1407,
	-1, 852,
	5, 816,
	-2, 1412,
	-1, 853,
	5, 814,
	-2, 1415,
	-1, 854,
	5, 848,
	357, 848,
	-2, 1417,
	-1, 855,
	5, 852,
	-2, 1420,
	-1, 856,
	5, 854,
	-2, 1421,
	-1, 857,
	5, 847,
	357, 847,
	-2, 1426,
	-1, 875,
	215, 671,
	-2, 510,
	-1, 879,
	201, 1196,
	-2, 0,
	-1, 916,
	1, 212,
	356, 212,
	358, 212,
	360, 212,
	361, 212,
	364, 212,
	-2, 646,
	-1, 919,
	4, 1425,
	10, 1425,
	11, 1425,
	13, 1425,
	14, 1425,
	15, 1425,
	16, 1425,
	17, 1425,
	18, 1425,
	20, 1425,
	21, 1425,
	23, 1425,
	26, 1425,
	28, 1425,
	30, 1425,
	33, 1425,
	34, 1425,
	35, 1425,
	36, 1425,
	37, 1425,
	38, 1425,
	39, 1425,
	40, 1425,
	41, 1425,
	42, 1425,
	44, 1425,
	45, 1425,
	46, 1425,
	47, 1425,
	48, 1425,
	49, 1425,
	52, 1425,
	53, 1425,
	54, 1425,
	56, 1425,
	57, 1425,
	58, 1425,
	61, 1425,
	62, 1425,
	63, 1425,
	64, 1425,
	65, 1425,
	67, 1425,
	68, 1425,
	69, 1425,
	71, 1425,
	72, 1425,
	73, 1425,
	74, 1425,
	82, 1425,
	83, 1425,
	84, 1425,
	85, 1425,
	86, 1425,
	87, 1425,
	88, 1425,
	89, 1425,
	91, 1425,
	93, 1425,
	95, 1425,
	98, 1425,
	99, 1425,
	101, 1425,
	105, 1425,
	106, 1425,
	107, 1425,
	108, 1425,
	109, 1425,
	110, 1425,
	114, 1425,
	115, 1425,
	116, 1425,
	117, 1425,
	118, 1425,
	119, 1425,
	120, 1425,
	122, 1425,
	125, 1425,
	126, 1425,
	128, 1425,
	129, 1425,
	131, 1425,
	133, 1425,
	134, 1425,
	135, 1425,
	136, 1425,
	137, 1425,
	138, 1425,
	139, 1425,
	140, 1425,
	141, 1425,
	142, 1425,
	144, 1425,
	146, 1425,
	147, 1425,
	148, 1425,
	149, 1425,
	150, 1425,
	151, 1425,
	152, 1425,
	153, 1425,
	154, 1425,
	156, 1425,
	158, 1425,
	159, 1425,
	160, 1425,
	161, 1425,
	162, 1425,
	163, 1425,
	164, 1425,
	165, 1425,
	167, 1425,
	168, 1425,
	170, 1425,
	171, 1425,
	172, 1425,
	173, 1425,
	175, 1425,
	178, 1425,
	179, 1425,
	180, 1425,
	181, 1425,
	182, 1425,
	183, 1425,
	184, 1425,
	185, 1425,
	186, 1425,
	187, 1425,
	188, 1425,
	189, 1425,
	190, 1425,
	194, 1425,
	195, 1425,
	196, 1425,
	197, 1425,
	198, 1425,
	200, 1425,
	203, 1425,
	204, 1425,
	206, 1425,
	207, 1425,
	209, 1425,
	211, 1425,
	212, 1425,
	213, 1425,
	214, 1425,
	215, 1425,
	216, 1425,
	218, 1425,
	219, 1425,
	220, 1425,
	221, 1425,
	222, 1425,
	224, 1425,
	225, 1425,
	226, 1425,
	227, 1425,
	228, 1425,
	229, 1425,
	230, 1425,
	231, 1425,
	232, 1425,
	234, 1425,
	235, 1425,
	236, 1425,
	237, 1425,
	238, 1425,
	239, 1425,
	240, 1425,
	241, 1425,
	242, 1425,
	243, 1425,
	244, 1425,
	245, 1425,
	247, 1425,
	248, 1425,
	249, 1425,
	250, 1425,
	251, 1425,
	252, 1425,
	253, 1425,
	254, 1425,
	255, 1425,
	256, 1425,
	257, 1425,
	259, 1425,
	260, 1425,
	261, 1425,
	262, 1425,
	263, 1425,
	265, 1425,
	266, 1425,
	267, 1425,
	268, 1425,
	269, 1425,
	270, 1425,
	271, 1425,
	272, 1425,
	273, 1425,
	275, 1425,
	276, 1425,
	277, 1425,
	278, 1425,
	279, 1425,
	280, 1425,
	281, 1425,
	282, 1425,
	283, 1425,
	284, 1425,
	286, 1425,
	288, 1425,
	289, 1425,
	290, 1425,
	291, 1425,
	292, 1425,
	293, 1425,
	294, 1425,
	296, 1425,
	297, 1425,
	298, 1425,
	301, 1425,
	302, 1425,
	303, 1425,
	304, 1425,
	306, 1425,
	307, 1425,
	308, 1425,
	309, 1425,
	312, 1425,
	313, 1425,
	314, 1425,
	315, 1425,
	317, 1425,
	319, 1425,
	320, 1425,
	321, 1425,
	322, 1425,
	323, 1425,
	324, 1425,
	327, 1425,
	332, 1425,
	333, 1425,
	334, 1425,
	335, 1425,
	336, 1425,
	337, 1425,
	338, 1425,
	340, 1425,
	341, 1425,
	342, 1425,
	343, 1425,
	345, 1425,
	346, 1425,
	347, 1425,
	348, 1425,
	349, 1425,
	350, 1425,
	351, 1425,
	352, 1425,
	353, 1425,
	355, 1425,
	358, 1425,
	359, 1425,
	362, 1425,
	365, 1425,
	-2, 0,
	-1, 944,
	124, 1352,
	299, 1352,
	342, 1352,
	359, 1352,
	-2, 0,
	-1, 1012,
	113, 682,
	174, 682,
	199, 682,
	-2, 644,
	-1, 1066,
	104, 648,
	113, 648,
	155, 648,
	174, 648,
	199, 648,
	205, 648,
	310, 648,
	-2, 742,
	-1, 1147,
	104, 648,
	113, 648,
	155, 648,
	174, 648,
	199, 648,
	205, 648,
	310, 648,
	-2, 975,
	-1, 1157,
	357, 1176,
	-2, 1164,
	-1, 1174,
	358, 1116,
	-2, 0,
	-1, 1414,
	1, 743,
	71, 743,
	104, 743,
	113, 743,
	125, 743,
	130, 743,
	132, 743,
	146, 743,
	155, 743,
	162, 743,
	171, 743,
	174, 743,
	186, 743,
	199, 743,
	201, 743,
	205, 743,
	246, 743,
	248, 743,
	310, 743,
	318, 743,
	329, 743,
	330, 743,
	339, 743,
	356, 743,
	358, 743,
	360, 743,
	361, 743,
	362, 743,
	364, 743,
	-2, 742,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 891,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 892,
	-1, 1476,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 893,
	-1, 1480,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 897,
	-1, 1481,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 898,
	-1, 1482,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 899,
	-1, 1485,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 904,
	-1, 1491,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 906,
	-1, 1493,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 910,
	-1, 1494,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 911,
	-1, 1495,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 912,
	-1, 1496,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 913,
	-1, 1522,
	210, 1058,
	-2, 1061,
	-1, 1564,
	124, 1098,
	357, 1199,
	-2, 1192,
	-1, 1565,
	124, 1099,
	-2, 1369,
	-1, 1566,
	124, 1100,
	-2, 1275,
	-1, 1567,
	124, 1101,
	-2, 1237,
	-1, 1568,
	124, 1102,
	-2, 1255,
	-1, 1569,
	124, 1103,
	-2, 1274,
	-1, 1570,
	124, 1104,
	-2, 1327,
	-1, 1780,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 905,
	-1, 1781,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 907,
	-1, 1786,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 908,
	-1, 1804,
	210, 1057,
	-2, 1060,
	-1, 2016,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 909,
	-1, 2021,
	158, 0,
	-2, 925,
	-1, 2031,
	210, 1059,
	-2, 1062,
	-1, 2073,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 952,
	-1, 2074,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 953,
	-1, 2075,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 954,
	-1, 2079,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 958,
	-1, 2080,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 959,
	-1, 2081,
	13, 0,
	14, 0,
	15, 0,
	340, 0,
	341, 0,
	342, 0,
	-2, 960,
	-1, 2119,
	361, 55,
	364, 55,
	-2, 673,
	-1, 2208,
	158, 0,
	-2, 926,
	-1, 2211,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 929,
	-1, 2212,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 931,
	-1, 2314,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 930,
	-1, 2315,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	140, 0,
	141, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 932,
	-1, 2322,
	158, 0,
	-2, 961,
	-1, 2378,
	158, 0,
	-2, 962,
	-1, 2449,
	36, 0,
	140, 0,
	173, 0,
	269, 0,
	337, 0,
	343, 0,
	-2, 1372,
}

const sqlPrivate = 57344

const sqlLast = 42262

var sqlAct = [...]int{

	177, 2448, 2104, 2432, 1639, 2478, 2289, 2401, 1647, 672,
	2447, 2433, 1615, 2434, 2050, 792, 2353, 800, 1299, 799,
	1203, 1987, 2249, 2114, 967, 2181, 1942, 1210, 1705, 2167,
	1409, 1910, 2136, 728, 2138, 1300, 1228, 869, 1988, 1908,
	778, 1614, 1870, 2269, 1249, 460, 34, 1915, 680, 119,
	1735, 1060, 1047, 2130, 1714, 75, 459, 33, 1619, 1250,
	1632, 1648, 456, 30, 2147, 1206, 1453, 1618, 475, 458,
	18, 1064, 1869, 1069, 1041, 1815, 1153, 452, 14, 454,
	17, 453, 15, 451, 13, 1520, 1722, 1427, 1410, 457,
	11, 1546, 1958, 1701, 450, 8, 449, 4, 2, 1327,
	1375, 1450, 455, 26, 473, 948, 448, 1199, 1418, 1219,
	1689, 616, 1530, 1508, 119, 1593, 772, 1505, 1072, 1042,
	906, 1074, 1540, 692, 698, 1188, 1184, 1616, 947, 903,
	917, 896, 693, 1641, 734, 1217, 1560, 1142, 1051, 1622,
	771, 737, 1396, 445, 1016, 1383, 1015, 611, 689, 1032,
	716, 465, 1222, 1014, 589, 2182, 173, 168, 893, 714,
	1020, 1031, 593, 609, 1803, 138, 1061, 1972, 2339, 1973,
	1230, 1956, 951, 1091, 1325, 2475, 1640, 1230, 677, 1094,
	684, 794, 1230, 676, 34, 758, 2456, 119, 120, 2444,
	2180, 1927, 2443, 1662, 2440, 33, 1662, 671, 1094, 1644,
	121, 30, 1840, 1841, 676, 1858, 1859, 1860, 18, 1926,
	2428, 731, 2119, 2427, 1677, 2418, 14, 1677, 17, 1670,
	15, 2396, 13, 681, 1451, 2264, 2392, 2384, 11, 581,
	1094, 2180, 2380, 8, 2334, 4, 1670, 952, 2180, 2331,
	2329, 26, 953, 1094, 2180, 2316, 2300, 1961, 1385, 1670,
	1094, 1840, 1841, 2299, 2277, 2274, 1855, 2180, 1094, 1094,
	613, 2235, 1662, 2213, 2210, 1662, 637, 1662, 1670, 1451,
	1097, 1098, 2397, 1117, 1118, 1119, 1127, 1128, 1129, 2202,
	2200, 2179, 1677, 1662, 1662, 2180, 1120, 2160, 752, 1807,
	718, 1094, 1677, 1100, 2129, 1808, 1131, 2124, 1613, 742,
	746, 1613, 2025, 1968, 2264, 1855, 1662, 1969, 669, 1936,
	1897, 1846, 1887, 1898, 1094, 1885, 1888, 1884, 1099, 1662,
	668, 1662, 1097, 1098, 1114, 1117, 1118, 1119, 1127, 1128,
	1129, 1883, 720, 1862, 721, 1662, 1806, 135, 1120, 1804,
	1662, 1961, 1662, 1662, 1384, 1100, 1951, 103, 1131, 2086,
	1861, 1738, 2028, 1840, 1841, 1662, 1858, 1859, 1860, 1711,
	1846, 1814, 135, 1094, 1679, 1231, 137, 135, 1662, 2207,
	1099, 1856, 1231, 1416, 1669, 1308, 1114, 1231, 1670, 1105,
	1661, 1612, 1390, 1242, 1662, 1613, 1389, 1243, 1094, 1898,
	1704, 137, 1687, 1637, 1524, 1036, 137, 756, 802, 802,
	1124, 1132, 136, 926, 138, 924, 2183, 1855, 923, 922,
	129, 1097, 1098, 921, 920, 722, 719, 130, 1130, 664,
	1856, 663, 662, 695, 635, 634, 633, 136, 135, 1926,
	632, 1105, 136, 1122, 1100, 129, 122, 631, 630, 1115,
	129, 629, 130, 628, 627, 1857, 626, 130, 698, 625,
	624, 623, 1124, 1132, 679, 910, 622, 137, 1543, 1099,
	621, 122, 1846, 620, 1121, 619, 1643, 604, 603, 762,
	1130, 602, 436, 435, 434, 433, 1840, 1841, 432, 1858,
	1859, 1860, 416, 1236, 1331, 1122, 1384, 415, 2468, 405,
	1229, 1115, 2206, 136, 1857, 1359, 404, 403, 402, 395,
	394, 1861, 162, 677, 161, 160, 1544, 1840, 1841, 159,
	1858, 1859, 1860, 1116, 1840, 1841, 1121, 158, 873, 157,
	1105, 877, 1856, 156, 155, 154, 153, 122, 152, 1125,
	1855, 151, 1852, 1853, 1854, 150, 149, 1851, 1849, 1850,
	1842, 1843, 1844, 1845, 1847, 1848, 148, 147, 146, 145,
	899, 899, 1545, 1542, 144, 143, 868, 142, 141, 140,
	895, 1855, 139, 1557, 1555, 1116, 1730, 1553, 1840, 1841,
	962, 900, 2446, 2439, 2406, 1065, 2375, 2332, 802, 2257,
	918, 1125, 2240, 2236, 802, 1846, 1851, 1849, 1850, 1842,
	1843, 1844, 1845, 1847, 1848, 1027, 1857, 1123, 2228, 1246,
	1111, 1112, 1113, 1126, 2227, 1110, 1108, 1109, 1101, 1102,
	1103, 1104, 1106, 1107, 2226, 2222, 1846, 2221, 698, 2220,
	2219, 2146, 2237, 1846, 1861, 2135, 39, 2101, 1547, 2096,
	2095, 2094, 2036, 1097, 1098, 1913, 1896, 1900, 1892, 1889,
	698, 1877, 689, 1868, 1839, 1856, 1836, 1835, 1833, 1123,
	1820, 1819, 1111, 1112, 1113, 1126, 1100, 1110, 1108, 1109,
	1101, 1102, 1103, 1104, 1106, 1107, 1742, 1636, 1027, 1414,
	1516, 1840, 1841, 49, 1882, 965, 1856, 1846, 1013, 795,
	729, 1099, 1161, 1852, 1853, 1854, 1026, 927, 1851, 1849,
	1850, 1842, 1843, 1844, 1845, 1847, 1848, 1154, 866, 1145,
	1940, 1063, 63, 1209, 2052, 2356, 1541, 762, 1062, 64,
	135, 65, 2419, 2387, 2374, 1840, 1841, 958, 2373, 1857,
	2372, 2364, 2362, 2347, 802, 802, 2346, 2345, 1675, 2324,
	2286, 802, 2265, 2243, 2233, 2256, 67, 2186, 2112, 137,
	2110, 2109, 1105, 2107, 1012, 2020, 1996, 1995, 1976, 1964,
	1857, 1103, 1104, 1106, 1107, 1040, 698, 935, 1672, 1867,
	945, 1829, 1828, 475, 696, 1700, 1825, 802, 802, 802,
	802, 802, 942, 1699, 1800, 136, 1517, 802, 1795, 1510,
	1846, 1773, 119, 129, 1768, 1755, 1754, 802, 1740, 1710,
	130, 1092, 1189, 1192, 677, 1605, 1551, 1401, 1216, 1045,
	1011, 963, 1115, 1202, 1196, 1182, 1852, 1853, 1854, 122,
	1181, 1851, 1849, 1850, 1842, 1843, 1844, 1845, 1847, 1848,
	1180, 1179, 1178, 2263, 1846, 1177, 1176, 1175, 1174, 1173,
	1172, 1171, 677, 1170, 1169, 1023, 1024, 1852, 1853, 1854,
	1856, 1168, 1851, 1849, 1850, 1842, 1843, 1844, 1845, 1847,
	1848, 1755, 1842, 1843, 1844, 1845, 1847, 1848, 1167, 1097,
	1098, 135, 1166, 1165, 1158, 860, 1033, 1095, 1035, 669,
	1146, 103, 1145, 730, 1039, 1037, 1116, 1059, 941, 930,
	1067, 668, 1100, 914, 1856, 884, 1247, 2215, 2134, 1971,
	137, 1967, 1402, 1154, 1938, 1143, 1840, 1841, 1208, 1063,
	1315, 1163, 1911, 1451, 955, 2267, 1201, 1099, 1844, 1845,
	1847, 1848, 2266, 1093, 1857, 802, 1065, 1728, 2260, 1556,
	1554, 957, 1974, 1552, 1082, 1928, 136, 1891, 1194, 1890,
	937, 867, 698, 1195, 129, 1779, 954, 1233, 1943, 1207,
	1235, 130, 802, 1157, 1080, 2270, 1214, 956, 1640, 2053,
	1531, 1185, 1005, 1075, 1922, 1076, 698, 698, 1857, 1983,
	122, 2409, 1081, 475, 1186, 1187, 1811, 1190, 1110, 1108,
	1109, 1101, 1102, 1103, 1104, 1106, 1107, 1193, 1666, 2465,
	689, 689, 1543, 2466, 709, 1680, 1948, 422, 2194, 1596,
	997, 1006, 2014, 1319, 1318, 2310, 695, 690, 711, 2309,
	437, 2308, 1075, 707, 1076, 705, 1851, 1849, 1850, 1842,
	1843, 1844, 1845, 1847, 1848, 163, 702, 1420, 802, 1063,
	802, 2391, 895, 2007, 2307, 2011, 802, 2009, 2205, 1980,
	1544, 1077, 1316, 1420, 1160, 730, 1979, 1824, 1823, 1419,
	1822, 423, 675, 119, 1224, 1821, 1221, 1358, 1782, 1939,
	1665, 1492, 1382, 1842, 1843, 1844, 1845, 1847, 1848, 1447,
	1443, 1441, 475, 802, 1034, 755, 1609, 1332, 1075, 1608,
	1076, 1463, 1633, 1356, 1309, 666, 1545, 1542, 1245, 1322,
	1077, 1333, 441, 1244, 1673, 1357, 2103, 1302, 1840, 1841,
	2291, 1301, 475, 674, 1306, 1507, 955, 166, 576, 1893,
	475, 1507, 802, 802, 802, 802, 802, 802, 802, 802,
	802, 802, 802, 802, 802, 802, 802, 802, 802, 802,
	802, 802, 802, 802, 677, 802, 1393, 802, 802, 802,
	802, 1328, 1403, 1197, 1421, 1321, 1320, 1340, 1347, 956,
	1998, 440, 2390, 676, 802, 1293, 1077, 802, 1336, 2425,
	1428, 802, 1547, 940, 1225, 802, 167, 1454, 1461, 802,
	1361, 1309, 1004, 1362, 1323, 1578, 1404, 1360, 1547, 802,
	802, 802, 802, 802, 802, 802, 802, 802, 802, 802,
	802, 802, 802, 802, 1439, 1432, 1434, 1380, 1514, 1379,
	1445, 1388, 1394, 1512, 1531, 1201, 1449, 1846, 1398, 1399,
	1303, 677, 1107, 2465, 1462, 787, 677, 425, 424, 669,
	1067, 1448, 669, 669, 1437, 1424, 39, 1355, 1431, 1442,
	1766, 1371, 2472, 2481, 1372, 1373, 1920, 2175, 991, 2043,
	1541, 1528, 1947, 1840, 1841, 1337, 1858, 1859, 1860, 1848,
	1916, 1341, 2367, 1342, 698, 1343, 174, 1344, 673, 1345,
	400, 2487, 1660, 1078, 1230, 1775, 2005, 1856, 1089, 2436,
	417, 418, 2176, 49, 936, 992, 1351, 1353, 1770, 2046,
	443, 1916, 1417, 1085, 1088, 2044, 579, 174, 970, 1518,
	587, 1515, 1083, 592, 703, 439, 1073, 1855, 1307, 996,
	618, 119, 63, 2415, 1086, 713, 1949, 119, 712, 64,
	164, 65, 1078, 703, 2292, 704, 1999, 1183, 1571, 2328,
	431, 2471, 1087, 1503, 442, 1628, 703, 2416, 1430, 1001,
	2320, 1702, 1703, 396, 438, 1642, 67, 1642, 1501, 1140,
	426, 1857, 475, 1827, 1397, 717, 717, 696, 691, 165,
	676, 1654, 1846, 400, 899, 1547, 899, 2437, 1784, 1413,
	1683, 1547, 1635, 2435, 1506, 1668, 2142, 1657, 1646, 2464,
	667, 1685, 2479, 2171, 1655, 2172, 1656, 1658, 1078, 2462,
	400, 400, 750, 400, 1664, 1667, 918, 174, 759, 1674,
	596, 1861, 1686, 575, 1002, 802, 1663, 475, 1712, 946,
	802, 978, 1778, 1718, 1684, 2174, 1489, 119, 597, 2248,
	1497, 1676, 1856, 951, 2438, 2177, 1429, 1190, 1498, 1193,
	1499, 2470, 1630, 1335, 1504, 933, 925, 939, 2480, 765,
	39, 466, 1187, 1186, 1849, 1850, 1842, 1843, 1844, 1845,
	1847, 1848, 1019, 2302, 1732, 1309, 1688, 1681, 1003, 2482,
	1513, 2301, 1719, 2284, 471, 951, 2488, 2359, 1018, 1231,
	467, 135, 2231, 1982, 2082, 1691, 2492, 1792, 1751, 1716,
	598, 103, 1747, 1631, 1215, 1720, 1721, 49, 952, 1726,
	1204, 2042, 1790, 953, 1731, 2402, 1857, 1694, 468, 1367,
	137, 397, 1748, 2173, 2190, 1752, 1741, 802, 802, 1727,
	1698, 1717, 1692, 802, 1696, 1736, 63, 1350, 470, 871,
	1487, 1490, 971, 64, 1713, 65, 802, 802, 870, 1017,
	952, 802, 802, 2193, 1310, 953, 136, 2115, 802, 1018,
	2192, 2250, 1500, 584, 129, 802, 427, 578, 2285, 1502,
	67, 130, 802, 1486, 1019, 802, 802, 802, 1743, 972,
	1757, 1767, 969, 1813, 1787, 1314, 951, 1772, 398, 2083,
	122, 1368, 802, 2232, 1788, 2084, 1765, 1054, 1793, 2491,
	859, 599, 1737, 1852, 1853, 1854, 677, 428, 1851, 1849,
	1850, 1842, 1843, 1844, 1845, 1847, 1848, 807, 1057, 407,
	1017, 802, 802, 802, 802, 2189, 170, 1756, 1708, 1312,
	979, 802, 802, 802, 1395, 1725, 802, 429, 1392, 430,
	1391, 1313, 951, 1055, 1785, 674, 892, 1783, 879, 469,
	1256, 952, 618, 890, 875, 618, 953, 880, 2105, 883,
	2241, 2191, 1777, 2282, 862, 885, 2148, 1959, 1799, 1488,
	1550, 400, 2323, 3, 1324, 1000, 2230, 1871, 2019, 677,
	600, 802, 1810, 2013, 618, 618, 400, 907, 759, 2283,
	1894, 1899, 1834, 1901, 1794, 135, 1678, 989, 1611, 1346,
	987, 411, 1446, 802, 472, 103, 1789, 698, 985, 1440,
	983, 981, 601, 1791, 760, 1009, 1008, 1752, 698, 701,
	1056, 583, 931, 761, 137, 577, 1872, 975, 698, 1918,
	1348, 888, 1930, 1931, 1924, 1932, 1339, 586, 1549, 677,
	802, 995, 1935, 412, 1164, 802, 1874, 1875, 1876, 2431,
	2399, 2164, 689, 1944, 2003, 2001, 1909, 463, 1981, 1907,
	136, 1634, 1627, 1239, 1238, 802, 1237, 1234, 129, 1902,
	1937, 1232, 1905, 1090, 1084, 130, 1079, 2033, 2340, 1903,
	2466, 1330, 2262, 595, 725, 596, 2261, 1914, 2131, 1021,
	461, 1921, 2342, 1977, 122, 802, 802, 999, 757, 119,
	1929, 891, 1970, 597, 726, 466, 1149, 1436, 889, 802,
	1706, 1994, 740, 1993, 802, 1992, 1934, 1256, 1256, 988,
	802, 618, 986, 802, 802, 802, 1946, 1950, 471, 1945,
	984, 1952, 982, 980, 467, 802, 1287, 934, 2002, 1966,
	2004, 802, 413, 2012, 802, 1954, 706, 708, 1963, 974,
	1975, 1962, 802, 887, 618, 802, 1960, 1957, 178, 2123,
	994, 2369, 468, 1022, 585, 598, 2038, 2039, 2040, 973,
	1978, 1420, 2183, 1707, 2377, 802, 2149, 1435, 727, 802,
	2022, 1985, 470, 802, 802, 802, 802, 802, 802, 802,
	802, 802, 802, 802, 802, 802, 802, 802, 802, 802,
	802, 802, 1444, 802, 406, 861, 1025, 1438, 802, 2398,
	2246, 400, 802, 802, 1645, 2006, 804, 1629, 1420, 802,
	1050, 802, 802, 802, 1433, 2032, 476, 1626, 414, 2029,
	1381, 1454, 2057, 408, 1305, 1248, 2485, 2490, 2056, 2276,
	1454, 2062, 2154, 409, 1240, 2054, 2133, 2061, 1097, 1098,
	2059, 698, 2089, 2102, 2045, 2047, 2048, 802, 2049, 592,
	1029, 717, 1840, 1841, 2111, 1941, 599, 1886, 2108, 802,
	2125, 1304, 1733, 2093, 1054, 2117, 2217, 1097, 1098, 1097,
	1098, 2116, 699, 2090, 400, 400, 1029, 1028, 1610, 1607,
	1606, 1539, 1151, 469, 1030, 1057, 1099, 475, 2041, 1904,
	1100, 1161, 174, 1287, 1287, 1241, 2106, 2122, 1159, 1007,
	998, 1052, 993, 462, 990, 475, 976, 2152, 2118, 938,
	1055, 2128, 2127, 665, 2144, 1099, 2290, 464, 2126, 2159,
	2132, 2120, 802, 463, 1338, 1053, 802, 977, 1729, 1400,
	2414, 1716, 2223, 594, 1826, 600, 2158, 2352, 472, 2188,
	2319, 1994, 1548, 1993, 698, 1992, 2184, 2187, 1162, 2153,
	802, 56, 1990, 2155, 802, 802, 781, 2151, 2165, 802,
	1984, 1621, 2204, 1620, 478, 2150, 802, 601, 802, 1317,
	2163, 466, 803, 683, 1562, 1455, 863, 805, 1253, 806,
	1254, 964, 1407, 596, 802, 1191, 793, 1056, 1251, 915,
	1649, 2145, 1511, 1529, 471, 2209, 1809, 1155, 773, 785,
	467, 597, 784, 400, 1526, 929, 1734, 1919, 2255, 2156,
	1366, 1697, 1363, 2000, 410, 1213, 1837, 802, 913, 1585,
	1220, 1577, 1573, 400, 1010, 400, 1046, 400, 468, 1141,
	1650, 1226, 2229, 961, 1925, 1256, 1671, 1038, 802, 1374,
	724, 723, 959, 802, 1311, 1682, 1134, 698, 470, 1133,
	710, 2361, 2244, 1994, 950, 1993, 949, 1992, 1994, 2242,
	1993, 174, 1992, 598, 2247, 1205, 1521, 1750, 2486, 174,
	1149, 2252, 2368, 1997, 1525, 618, 2408, 2251, 1533, 802,
	802, 134, 2245, 131, 133, 132, 1218, 1776, 83, 32,
	1563, 1563, 1576, 31, 1588, 34, 102, 101, 119, 475,
	1600, 1601, 1603, 2259, 2268, 618, 33, 802, 100, 2253,
	618, 802, 30, 99, 475, 174, 618, 802, 618, 18,
	618, 98, 618, 802, 618, 2273, 1994, 14, 1993, 17,
	1992, 15, 97, 13, 96, 1349, 802, 802, 802, 11,
	2294, 618, 618, 2296, 8, 95, 4, 94, 2254, 2293,
	1201, 2312, 26, 2278, 93, 2275, 92, 2258, 2318, 469,
	91, 802, 2305, 2306, 599, 90, 89, 88, 802, 87,
	592, 86, 717, 858, 802, 759, 2311, 85, 614, 82,
	81, 80, 698, 79, 2304, 29, 25, 106, 400, 1994,
	24, 1993, 22, 1992, 23, 2330, 699, 698, 698, 2341,
	1412, 28, 27, 2280, 400, 20, 2337, 400, 2325, 19,
	16, 1425, 2336, 10, 472, 400, 21, 802, 2295, 61,
	400, 1287, 2363, 2338, 2343, 62, 400, 1256, 2349, 2348,
	1452, 60, 2350, 2351, 59, 58, 2355, 12, 2366, 2357,
	2358, 477, 9, 600, 53, 52, 51, 50, 48, 47,
	46, 45, 7, 2365, 802, 105, 42, 41, 6, 2376,
	104, 5, 117, 114, 116, 2385, 2383, 698, 113, 115,
	118, 2386, 110, 111, 112, 601, 802, 698, 698, 2333,
	1256, 109, 108, 38, 37, 36, 35, 1, 0, 0,
	0, 2388, 2389, 763, 864, 2394, 2395, 700, 0, 2379,
	475, 0, 0, 802, 802, 802, 0, 2404, 802, 0,
	0, 0, 0, 0, 0, 0, 2420, 0, 802, 2422,
	0, 2421, 0, 0, 2405, 0, 0, 2426, 1050, 0,
	0, 677, 0, 1994, 0, 1993, 0, 1992, 1617, 2423,
	802, 0, 2424, 2430, 2429, 759, 802, 802, 0, 0,
	0, 0, 1220, 2445, 2455, 0, 1638, 2453, 2441, 0,
	0, 400, 2454, 1653, 2457, 618, 699, 0, 618, 1370,
	618, 0, 400, 400, 1659, 759, 2463, 2461, 0, 2467,
	802, 2469, 1054, 1425, 2458, 2459, 0, 0, 699, 0,
	0, 0, 2477, 2476, 0, 0, 0, 0, 0, 0,
	0, 2484, 2483, 1057, 2410, 1256, 0, 1058, 0, 2489,
	0, 0, 0, 1287, 0, 0, 802, 2493, 0, 1052,
	0, 1286, 0, 39, 0, 0, 0, 777, 1055, 0,
	1798, 0, 0, 0, 0, 0, 0, 1801, 1255, 0,
	0, 1256, 1256, 1053, 0, 0, 0, 0, 0, 0,
	1256, 1256, 0, 0, 0, 1817, 1818, 0, 1724, 0,
	0, 0, 0, 0, 0, 0, 1287, 0, 0, 0,
	49, 0, 399, 928, 0, 1690, 0, 0, 0, 932,
	0, 0, 0, 1256, 0, 1289, 0, 1097, 1098, 0,
	0, 400, 400, 400, 0, 400, 0, 0, 0, 63,
	0, 0, 0, 1866, 699, 1056, 64, 0, 65, 0,
	1100, 476, 0, 0, 400, 1879, 0, 0, 0, 0,
	0, 400, 0, 1579, 0, 0, 0, 400, 400, 0,
	0, 400, 0, 67, 0, 1099, 1412, 0, 0, 1412,
	0, 1114, 0, 0, 0, 0, 0, 1739, 0, 0,
	0, 0, 0, 400, 1745, 1746, 0, 0, 0, 1425,
	0, 0, 1753, 0, 0, 735, 0, 0, 1758, 1759,
	1761, 1763, 1764, 0, 0, 1723, 0, 400, 0, 1771,
	0, 0, 0, 1774, 0, 0, 0, 0, 1286, 1286,
	0, 1287, 744, 748, 0, 754, 1105, 0, 0, 0,
	0, 1796, 1797, 0, 0, 1255, 1255, 0, 0, 0,
	0, 0, 0, 0, 2175, 0, 0, 2168, 0, 1043,
	1043, 700, 0, 0, 0, 2166, 1048, 1287, 1287, 2170,
	1256, 0, 0, 0, 0, 0, 1287, 1287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2176,
	0, 0, 1289, 1289, 0, 0, 1115, 0, 135, 0,
	0, 0, 1135, 1136, 1137, 1138, 1139, 0, 103, 1287,
	0, 2169, 1148, 0, 0, 0, 1863, 1864, 1865, 0,
	699, 0, 1156, 0, 0, 0, 0, 137, 2008, 0,
	0, 0, 0, 2010, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 699, 699, 0, 0, 0, 0,
	0, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	2026, 0, 0, 136, 0, 0, 1288, 0, 0, 0,
	1116, 129, 0, 0, 0, 0, 0, 1252, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 400,
	2171, 0, 2172, 0, 0, 0, 0, 122, 0, 1213,
	0, 1213, 0, 618, 0, 0, 400, 0, 0, 0,
	1912, 0, 0, 1220, 0, 0, 0, 0, 0, 400,
	0, 1923, 2174, 0, 0, 0, 0, 2087, 400, 0,
	0, 700, 2177, 0, 0, 0, 0, 0, 2097, 0,
	0, 1690, 0, 0, 1256, 0, 0, 0, 0, 0,
	476, 0, 0, 700, 1690, 0, 1287, 1840, 1841, 0,
	0, 0, 1110, 1108, 1109, 1101, 1102, 1103, 1104, 1106,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 0, 1256, 400, 0, 0, 0, 476, 0,
	0, 0, 0, 748, 0, 1579, 1579, 0, 0, 0,
	0, 400, 0, 0, 0, 0, 0, 1412, 754, 0,
	2173, 0, 0, 0, 0, 0, 759, 1412, 0, 2017,
	2018, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1989, 0, 1288, 1288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1252, 1252, 0, 0, 0, 0,
	0, 0, 0, 1364, 0, 1369, 1286, 782, 76, 1840,
	1841, 1376, 1858, 1859, 1860, 0, 1846, 0, 0, 700,
	1579, 1579, 1579, 1255, 1256, 2024, 477, 0, 2063, 2064,
	2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
	2075, 2076, 2077, 2078, 2079, 2080, 2081, 0, 2085, 0,
	0, 0, 0, 2051, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1855, 0, 0, 0, 0, 0, 0,
	1289, 0, 0, 76, 0, 0, 1856, 0, 0, 0,
	1287, 0, 699, 0, 0, 0, 0, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 0,
	1491, 0, 1493, 1494, 1495, 1496, 0, 0, 1846, 1287,
	0, 0, 0, 0, 1425, 0, 1213, 670, 0, 1519,
	678, 0, 0, 2113, 0, 0, 1148, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 76, 0, 0, 0,
	1857, 0, 400, 400, 1558, 1559, 0, 1861, 1575, 2272,
	1587, 1589, 1594, 1597, 1598, 1599, 0, 0, 0, 2139,
	476, 0, 0, 0, 0, 0, 0, 2141, 1856, 0,
	0, 0, 0, 748, 0, 0, 0, 400, 0, 0,
	759, 0, 0, 0, 0, 700, 2298, 0, 1286, 0,
	0, 1412, 759, 0, 0, 2161, 2162, 1425, 0, 0,
	1287, 0, 0, 0, 0, 1255, 0, 0, 0, 700,
	700, 1989, 759, 1579, 1579, 476, 477, 2195, 0, 2196,
	0, 400, 2198, 2199, 0, 400, 0, 2203, 0, 0,
	0, 0, 0, 0, 1850, 1842, 1843, 1844, 1845, 1847,
	1848, 1286, 1857, 0, 0, 0, 735, 1070, 0, 0,
	0, 0, 1289, 0, 0, 0, 0, 0, 1255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2224, 0,
	0, 0, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
	1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
	1579, 0, 1579, 0, 0, 0, 0, 0, 0, 0,
	0, 1288, 0, 0, 0, 1289, 0, 0, 0, 0,
	0, 0, 1252, 0, 0, 477, 0, 0, 0, 0,
	0, 0, 0, 1989, 0, 759, 1617, 0, 1989, 1852,
	1853, 1854, 0, 0, 1851, 1849, 1850, 1842, 1843, 1844,
	1845, 1847, 1848, 0, 0, 477, 1097, 1098, 0, 0,
	0, 0, 2287, 477, 0, 0, 1097, 1098, 0, 0,
	1043, 0, 0, 0, 0, 1048, 1286, 0, 0, 1100,
	0, 0, 2411, 2412, 2413, 1200, 0, 2417, 0, 1100,
	1425, 0, 2279, 1255, 0, 2281, 0, 0, 0, 0,
	0, 0, 0, 400, 1099, 748, 1989, 1223, 0, 1223,
	0, 0, 1286, 1286, 1099, 0, 2322, 0, 0, 0,
	0, 1286, 1286, 0, 0, 0, 0, 0, 0, 1255,
	1255, 2313, 0, 0, 0, 0, 0, 0, 1255, 1255,
	1289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1286, 678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1105, 0, 0, 0, 1989,
	0, 1255, 1780, 1781, 400, 1105, 1289, 1289, 1786, 0,
	0, 0, 759, 0, 0, 1289, 1289, 0, 0, 0,
	2139, 2139, 0, 0, 446, 0, 2354, 0, 0, 0,
	0, 1412, 0, 1288, 0, 699, 0, 700, 1213, 2378,
	1805, 0, 0, 0, 1252, 39, 699, 1812, 1289, 0,
	1816, 0, 0, 0, 0, 1115, 699, 0, 0, 0,
	0, 0, 0, 2370, 2371, 1115, 0, 1830, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 400, 0, 1288, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 1252, 2393, 1148,
	735, 0, 0, 0, 0, 0, 1594, 1594, 1594, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 2403, 1415,
	759, 63, 0, 400, 0, 477, 0, 748, 64, 1116,
	65, 1286, 748, 0, 0, 0, 1097, 1098, 754, 1116,
	0, 0, 0, 1989, 0, 0, 1579, 0, 1255, 0,
	0, 0, 0, 2354, 0, 67, 1917, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 759, 0, 0, 1933, 0,
	477, 400, 0, 0, 1099, 0, 0, 2460, 0, 0,
	0, 0, 0, 0, 0, 1289, 0, 0, 0, 0,
	1579, 0, 0, 0, 0, 0, 0, 1097, 1098, 0,
	0, 1288, 0, 0, 0, 1953, 0, 0, 670, 0,
	1376, 0, 1252, 1109, 1101, 1102, 1103, 1104, 1106, 1107,
	1100, 0, 1108, 1109, 1101, 1102, 1103, 1104, 1106, 1107,
	1965, 0, 0, 1097, 1098, 1105, 0, 1288, 1288, 1127,
	1128, 1129, 0, 0, 0, 1099, 1288, 1288, 1252, 1252,
	0, 0, 0, 0, 0, 0, 1100, 1252, 1252, 1131,
	1986, 76, 0, 1651, 0, 0, 1066, 0, 0, 699,
	135, 0, 0, 0, 754, 754, 0, 0, 0, 1288,
	103, 1099, 0, 1579, 0, 2015, 0, 1114, 2016, 0,
	1252, 0, 0, 0, 0, 1286, 0, 0, 0, 137,
	2021, 0, 1144, 0, 1147, 0, 1105, 0, 0, 2030,
	0, 1152, 1255, 0, 0, 476, 0, 2034, 0, 0,
	1933, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 476, 1286, 136, 0, 0, 0, 0,
	2058, 0, 1105, 129, 2060, 0, 0, 0, 0, 0,
	130, 1255, 0, 0, 0, 0, 0, 0, 0, 1289,
	0, 0, 0, 1124, 1132, 0, 1115, 0, 0, 447,
	0, 0, 699, 0, 0, 0, 0, 2091, 2092, 0,
	0, 0, 0, 0, 0, 0, 2098, 2099, 2100, 0,
	0, 0, 0, 1693, 754, 1695, 1122, 748, 1289, 0,
	0, 0, 1115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1709, 0, 0, 0,
	0, 0, 1043, 735, 0, 1286, 1288, 0, 0, 735,
	735, 0, 0, 735, 1048, 0, 0, 1252, 0, 0,
	1116, 0, 1255, 0, 0, 0, 0, 0, 0, 0,
	700, 0, 0, 0, 0, 1744, 0, 0, 0, 0,
	0, 700, 0, 0, 1101, 1102, 1103, 1104, 1106, 1107,
	0, 700, 0, 0, 0, 699, 1116, 0, 0, 1769,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1289,
	1840, 1841, 1125, 1858, 1859, 1860, 0, 2185, 0, 0,
	0, 0, 0, 0, 0, 0, 2023, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 0, 2208, 0, 476, 0, 2211,
	2212, 0, 0, 0, 2214, 1101, 1102, 1103, 1104, 1106,
	1107, 2216, 476, 2218, 1855, 0, 0, 0, 670, 0,
	0, 670, 670, 0, 0, 0, 0, 0, 0, 2225,
	1123, 0, 0, 0, 0, 0, 1126, 0, 1110, 1108,
	1109, 1101, 1102, 1103, 1104, 1106, 1107, 0, 0, 0,
	736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2234, 0, 0, 0, 1066, 0, 0, 1846,
	1288, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	699, 1252, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 699, 699, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1861, 1288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1252, 1895, 0, 0, 2271, 0, 0, 0, 0, 1856,
	1509, 0, 0, 0, 0, 0, 0, 0, 1906, 0,
	0, 0, 0, 678, 0, 0, 0, 0, 1147, 0,
	0, 1200, 0, 0, 0, 0, 0, 0, 0, 0,
	1200, 0, 0, 0, 700, 699, 0, 0, 2303, 0,
	0, 0, 0, 0, 0, 699, 699, 0, 0, 0,
	0, 0, 2314, 2315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 0,
	1288, 0, 0, 1857, 0, 0, 0, 0, 0, 0,
	477, 1252, 0, 2327, 0, 0, 1955, 0, 0, 0,
	76, 0, 76, 0, 0, 0, 0, 0, 477, 0,
	0, 0, 0, 735, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2360, 0, 0, 0, 0, 700, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1852, 1853, 1854, 0, 0, 1851, 1849, 1850, 1842, 1843,
	1844, 1845, 1847, 1848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1048, 0, 0, 1097, 1098, 0, 1117, 1118, 1119,
	1127, 1128, 1129, 0, 0, 0, 0, 0, 0, 0,
	1120, 0, 0, 0, 0, 0, 76, 1100, 0, 0,
	1131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1097, 1098, 0, 1117, 1118, 1119, 1127, 1128, 1129,
	700, 0, 1099, 0, 0, 0, 0, 1120, 1114, 0,
	0, 0, 0, 736, 1100, 2442, 0, 1131, 0, 736,
	736, 2452, 2452, 736, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 1114, 0, 0, 0, 0,
	0, 0, 477, 0, 0, 2452, 0, 0, 0, 0,
	0, 0, 0, 1105, 1651, 735, 76, 477, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1124, 1132, 0, 0, 0, 0,
	0, 2452, 0, 0, 0, 0, 0, 0, 0, 735,
	1105, 0, 1130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1122, 1509, 0,
	0, 1124, 1132, 1115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 1147, 1130,
	0, 0, 0, 2197, 0, 0, 0, 2201, 1121, 0,
	700, 700, 0, 0, 1122, 0, 0, 0, 0, 0,
	1115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1147, 0, 1125, 0, 0, 0, 0, 0, 0,
	700, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	700, 700, 0, 0, 1116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1125, 0, 0, 477, 76, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 678, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 1111, 1112, 1113, 1126, 0, 1110,
	1108, 1109, 1101, 1102, 1103, 1104, 1106, 1107, 0, 0,
	0, 0, 0, 0, 0, 0, 1881, 0, 0, 0,
	0, 0, 0, 0, 0, 2288, 0, 0, 1123, 0,
	0, 1111, 1112, 1113, 1126, 0, 1110, 1108, 1109, 1101,
	1102, 1103, 1104, 1106, 1107, 0, 0, 0, 76, 0,
	0, 1097, 1098, 1880, 1117, 1118, 1119, 1127, 1128, 1129,
	0, 0, 0, 736, 0, 0, 0, 1120, 0, 0,
	0, 0, 0, 0, 1100, 1097, 1098, 1131, 1117, 1118,
	1119, 1127, 1128, 1129, 0, 0, 0, 0, 0, 0,
	0, 1120, 0, 0, 0, 0, 2335, 0, 1100, 1099,
	0, 1131, 0, 0, 0, 1114, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2382, 0, 0, 0,
	0, 1124, 1132, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1130,
	0, 0, 0, 0, 0, 1124, 1132, 0, 0, 0,
	0, 0, 0, 0, 1122, 2407, 0, 0, 0, 0,
	1115, 0, 0, 1130, 0, 0, 0, 0, 0, 39,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	40, 124, 0, 0, 1115, 1121, 0, 0, 0, 0,
	0, 0, 0, 54, 43, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 126, 1121,
	0, 0, 0, 1651, 44, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 55, 0, 736,
	0, 57, 0, 0, 0, 63, 0, 0, 127, 0,
	1125, 0, 64, 0, 65, 0, 0, 0, 1116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 1125, 0, 0, 0, 0, 67,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1123, 0,
	0, 1111, 1112, 1113, 1126, 0, 1110, 1108, 1109, 1101,
	1102, 1103, 1104, 1106, 1107, 0, 0, 0, 0, 0,
	0, 0, 1123, 1832, 0, 1111, 1112, 1113, 1126, 0,
	1110, 1108, 1109, 1101, 1102, 1103, 1104, 1106, 1107, 0,
	0, 0, 69, 2400, 0, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 71,
	0, 72, 0, 73, 0, 128, 0, 76, 0, 0,
	74, 0, 76, 0, 135, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	180, 493, 181, 494, 495, 496, 497, 338, 498, 499,
	500, 501, 182, 183, 184, 339, 340, 341, 342, 185,
	343, 344, 502, 186, 345, 346, 187, 188, 189, 503,
	504, 347, 348, 349, 505, 190, 350, 506, 479, 507,
	191, 192, 193, 1147, 194, 508, 195, 196, 197, 509,
	480, 198, 199, 200, 510, 511, 513, 512, 514, 515,
	516, 201, 202, 401, 203, 351, 204, 352, 353, 517,
	205, 518, 206, 519, 207, 520, 521, 208, 209, 522,
	210, 523, 0, 524, 354, 211, 212, 213, 355, 356,
	525, 526, 527, 214, 215, 357, 358, 359, 0, 216,
	528, 217, 529, 530, 481, 218, 531, 219, 360, 532,
	361, 533, 220, 221, 222, 223, 224, 362, 363, 483,
	534, 228, 535, 225, 536, 482, 226, 364, 227, 365,
	366, 367, 368, 369, 537, 370, 538, 484, 229, 230,
	231, 485, 232, 233, 234, 539, 236, 235, 540, 371,
	486, 237, 487, 541, 238, 542, 543, 239, 0, 240,
	241, 242, 244, 372, 243, 488, 245, 246, 248, 247,
	544, 545, 546, 373, 249, 374, 250, 251, 547, 252,
	548, 549, 253, 550, 551, 254, 375, 489, 255, 490,
	376, 256, 257, 258, 259, 260, 552, 261, 377, 262,
	378, 263, 553, 264, 265, 266, 267, 268, 269, 379,
	270, 271, 554, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 555, 284, 491, 285, 286,
	380, 287, 0, 291, 292, 293, 294, 556, 296, 381,
	295, 297, 298, 557, 299, 288, 289, 300, 492, 301,
	382, 383, 302, 558, 309, 303, 304, 290, 305, 308,
	384, 306, 307, 385, 559, 310, 560, 311, 312, 313,
	314, 315, 316, 317, 561, 386, 387, 388, 562, 563,
	318, 319, 389, 390, 564, 320, 321, 322, 323, 565,
	566, 324, 325, 326, 327, 567, 328, 568, 391, 329,
	330, 331, 392, 393, 569, 570, 332, 571, 572, 573,
	574, 333, 334, 335, 336, 337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 474, 0, 0,
	0, 0, 0, 0, 1405, 0, 0, 0, 0, 0,
	0, 0, 1406, 179, 180, 493, 181, 494, 495, 496,
	497, 338, 498, 499, 500, 501, 182, 183, 184, 339,
	340, 341, 342, 185, 343, 344, 502, 186, 345, 346,
	187, 188, 189, 503, 504, 347, 348, 349, 505, 190,
	350, 506, 479, 507, 191, 192, 193, 0, 194, 508,
	195, 196, 197, 509, 480, 198, 199, 200, 510, 511,
	513, 512, 514, 515, 516, 201, 202, 401, 203, 351,
	204, 352, 353, 517, 205, 518, 206, 519, 207, 520,
	521, 208, 209, 522, 210, 523, 0, 524, 354, 211,
	212, 213, 355, 356, 525, 526, 527, 214, 215, 357,
	358, 359, 0, 216, 528, 217, 529, 530, 481, 218,
	531, 219, 360, 532, 361, 533, 220, 221, 222, 223,
	224, 362, 363, 483, 534, 228, 535, 225, 536, 482,
	226, 364, 227, 365, 366, 367, 368, 369, 537, 370,
	538, 484, 229, 230, 231, 485, 232, 233, 234, 539,
	236, 235, 540, 371, 486, 237, 487, 541, 238, 542,
	543, 239, 0, 240, 241, 242, 244, 372, 243, 488,
	245, 246, 248, 247, 544, 545, 546, 373, 249, 374,
	250, 251, 547, 252, 548, 549, 253, 550, 551, 254,
	375, 489, 255, 490, 376, 256, 257, 258, 259, 260,
	552, 261, 377, 262, 378, 263, 553, 264, 265, 266,
	267, 268, 269, 379, 270, 271, 554, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 555,
	284, 491, 285, 286, 380, 287, 0, 291, 292, 293,
	294, 556, 296, 381, 295, 297, 298, 557, 299, 288,
	289, 300, 492, 301, 382, 383, 302, 558, 309, 303,
	304, 290, 305, 308, 384, 306, 307, 385, 559, 310,
	560, 311, 312, 313, 314, 315, 316, 317, 561, 386,
	387, 388, 562, 563, 318, 319, 389, 390, 564, 320,
	321, 322, 323, 565, 566, 324, 325, 326, 327, 567,
	328, 568, 391, 329, 330, 331, 392, 393, 569, 570,
	332, 571, 572, 573, 574, 333, 334, 335, 336, 337,
	0, 0, 0, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2157, 179,
	180, 493, 181, 494, 495, 496, 497, 338, 498, 499,
	500, 501, 182, 183, 184, 339, 340, 341, 342, 185,
	343, 344, 502, 186, 345, 346, 187, 188, 189, 503,
	504, 347, 348, 349, 505, 190, 350, 506, 479, 507,
	191, 192, 193, 0, 194, 508, 195, 196, 197, 509,
	480, 198, 199, 200, 510, 511, 513, 512, 514, 515,
	516, 201, 202, 401, 203, 351, 204, 352, 353, 517,
	205, 518, 206, 519, 207, 520, 521, 208, 209, 522,
	210, 523, 0, 524, 354, 211, 212, 213, 355, 356,
	525, 526, 527, 214, 215, 357, 358, 359, 0, 216,
	528, 217, 529, 530, 481, 218, 531, 219, 360, 532,
	361, 533, 220, 221, 222, 223, 224, 362, 363, 483,
	534, 228, 535, 225, 536, 482, 226, 364, 227, 365,
	366, 367, 368, 369, 537, 370, 538, 484, 229, 230,
	231, 485, 232, 233, 234, 539, 236, 235, 540, 371,
	486, 237, 487, 541, 238, 542, 543, 239, 0, 240,
	241, 242, 244, 372, 243, 488, 245, 246, 248, 247,
	544, 545, 546, 373, 249, 374, 250, 251, 547, 252,
	548, 549, 253, 550, 551, 254, 375, 489, 255, 490,
	376, 256, 257, 258, 259, 260, 552, 261, 377, 262,
	378, 263, 553, 264, 265, 266, 267, 268, 269, 379,
	270, 271, 554, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 555, 284, 491, 285, 286,
	380, 287, 0, 291, 292, 293, 294, 556, 296, 381,
	295, 297, 298, 557, 299, 288, 289, 300, 492, 301,
	382, 383, 302, 558, 309, 303, 304, 290, 305, 308,
	384, 306, 307, 385, 559, 310, 560, 311, 312, 313,
	314, 315, 316, 317, 561, 386, 387, 388, 562, 563,
	318, 319, 389, 390, 564, 320, 321, 322, 323, 565,
	566, 324, 325, 326, 327, 567, 328, 568, 391, 329,
	330, 331, 392, 393, 569, 570, 332, 571, 572, 573,
	574, 333, 334, 335, 336, 337, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 179, 180, 493, 181, 494, 495, 496, 497,
	338, 498, 499, 500, 501, 182, 183, 184, 339, 340,
	341, 342, 185, 343, 344, 502, 186, 345, 346, 187,
	188, 189, 503, 504, 347, 348, 349, 505, 190, 350,
	506, 479, 507, 191, 192, 193, 0, 194, 508, 195,
	196, 197, 509, 480, 198, 199, 200, 510, 511, 513,
	512, 514, 515, 516, 201, 202, 401, 203, 351, 204,
	352, 353, 517, 205, 518, 206, 519, 207, 520, 521,
	208, 209, 522, 210, 523, 0, 524, 354, 211, 212,
	213, 355, 356, 525, 526, 527, 214, 215, 357, 358,
	359, 0, 216, 528, 217, 529, 530, 481, 218, 531,
	219, 360, 532, 361, 533, 220, 221, 222, 223, 224,
	362, 363, 483, 534, 228, 535, 225, 536, 482, 226,
	364, 227, 365, 366, 367, 368, 369, 537, 370, 538,
	484, 229, 230, 231, 485, 232, 233, 234, 539, 236,
	235, 540, 371, 486, 237, 487, 541, 238, 542, 543,
	239, 0, 240, 241, 242, 244, 372, 243, 488, 245,
	246, 248, 247, 544, 545, 546, 373, 249, 374, 250,
	251, 547, 252, 548, 549, 253, 550, 551, 254, 375,
	489, 255, 490, 376, 256, 257, 258, 259, 260, 552,
	261, 377, 262, 378, 263, 553, 264, 265, 266, 267,
	268, 269, 379, 270, 271, 554, 272, 273, 274, 275,
	276, 278, 279, 277, 280, 281, 282, 283, 555, 284,
	491, 285, 286, 380, 287, 0, 291, 292, 293, 294,
	556, 296, 381, 295, 297, 298, 557, 299, 288, 289,
	300, 492, 301, 382, 383, 302, 558, 309, 303, 304,
	290, 305, 308, 384, 306, 307, 385, 559, 310, 560,
	311, 312, 313, 314, 315, 316, 317, 561, 386, 387,
	388, 562, 563, 318, 319, 389, 390, 564, 320, 321,
	322, 323, 565, 566, 324, 325, 326, 327, 567, 328,
	568, 391, 329, 330, 331, 392, 393, 569, 570, 332,
	571, 572, 573, 574, 333, 334, 335, 336, 337, 1538,
	0, 801, 790, 791, 788, 789, 780, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 180, 1535,
	181, 0, 0, 0, 0, 818, 783, 0, 0, 0,
	182, 183, 184, 339, 833, 341, 834, 185, 835, 836,
	0, 186, 345, 346, 187, 188, 189, 786, 817, 837,
	838, 349, 0, 190, 829, 0, 809, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 0, 480, 198,
	199, 200, 0, 810, 811, 813, 0, 812, 814, 201,
	202, 401, 203, 839, 204, 840, 841, 0, 205, 0,
	206, 0, 207, 1536, 0, 832, 209, 0, 210, 0,
	0, 0, 774, 211, 212, 213, 819, 820, 797, 0,
	0, 214, 215, 842, 843, 844, 0, 216, 0, 217,
	0, 0, 481, 218, 0, 219, 830, 0, 361, 0,
	220, 221, 222, 223, 224, 826, 828, 483, 0, 228,
	0, 225, 0, 482, 226, 845, 227, 846, 847, 848,
	849, 850, 0, 808, 0, 484, 229, 230, 231, 485,
	232, 233, 234, 0, 236, 235, 0, 831, 486, 237,
	487, 0, 238, 0, 0, 239, 0, 240, 241, 242,
	244, 372, 243, 488, 245, 246, 248, 247, 769, 0,
	798, 827, 249, 851, 250, 251, 0, 252, 0, 0,
	253, 0, 0, 254, 375, 489, 255, 490, 821, 256,
	257, 258, 259, 260, 0, 261, 822, 262, 378, 263,
	0, 264, 265, 266, 267, 268, 269, 852, 270, 271,
	0, 272, 273, 274, 275, 276, 278, 279, 277, 280,
	281, 282, 283, 0, 284, 491, 285, 286, 775, 287,
	0, 291, 292, 293, 294, 0, 296, 381, 295, 297,
	298, 815, 299, 288, 289, 300, 492, 301, 853, 383,
	302, 0, 309, 303, 304, 290, 305, 308, 854, 306,
	307, 823, 0, 310, 0, 311, 312, 313, 314, 315,
	316, 317, 0, 386, 855, 856, 0, 0, 318, 319,
	824, 825, 796, 320, 321, 322, 323, 0, 0, 324,
	325, 326, 327, 816, 328, 0, 391, 329, 330, 331,
	392, 857, 1534, 0, 332, 0, 0, 0, 0, 333,
	334, 335, 336, 337, 770, 0, 0, 0, 0, 0,
	768, 0, 0, 0, 0, 766, 767, 1537, 801, 790,
	791, 788, 789, 780, 776, 1532, 0, 0, 0, 0,
	0, 0, 779, 0, 179, 180, 0, 181, 0, 0,
	0, 0, 818, 783, 0, 0, 0, 182, 183, 184,
	339, 833, 341, 834, 185, 835, 836, 0, 186, 345,
	346, 187, 188, 189, 786, 817, 837, 838, 349, 0,
	190, 829, 0, 809, 0, 191, 192, 193, 0, 194,
	0, 195, 196, 197, 0, 480, 198, 199, 200, 0,
	810, 811, 813, 0, 812, 814, 201, 202, 401, 203,
	839, 204, 840, 841, 1049, 205, 0, 206, 0, 207,
	0, 0, 832, 209, 0, 210, 0, 0, 0, 774,
	211, 212, 213, 819, 820, 797, 0, 0, 214, 215,
	842, 843, 844, 0, 216, 0, 217, 0, 0, 481,
	218, 0, 219, 830, 0, 361, 0, 220, 221, 222,
	223, 224, 826, 828, 483, 0, 228, 0, 225, 0,
	482, 226, 845, 227, 846, 847, 848, 849, 850, 0,
	808, 0, 484, 229, 230, 231, 485, 232, 233, 234,
	0, 236, 235, 0, 831, 486, 237, 487, 0, 238,
	0, 0, 239, 0, 240, 241, 242, 244, 372, 243,
	488, 245, 246, 248, 247, 769, 0, 798, 827, 249,
	851, 250, 251, 0, 252, 0, 0, 253, 0, 0,
	254, 375, 489, 255, 490, 821, 256, 257, 258, 259,
	260, 0, 261, 822, 262, 378, 263, 0, 264, 265,
	266, 267, 268, 269, 852, 270, 271, 0, 272, 273,
	274, 275, 276, 278, 279, 277, 280, 281, 282, 283,
	0, 284, 491, 285, 286, 775, 287, 0, 291, 292,
	293, 294, 135, 296, 381, 295, 297, 298, 815, 299,
	288, 289, 300, 492, 301, 853, 383, 302, 0, 309,
	303, 304, 290, 305, 308, 854, 306, 307, 823, 0,
	310, 137, 311, 312, 313, 314, 315, 316, 317, 0,
	386, 855, 856, 0, 0, 318, 319, 824, 825, 796,
	320, 321, 322, 323, 0, 0, 324, 325, 326, 327,
	816, 328, 0, 391, 329, 330, 331, 919, 857, 0,
	0, 332, 0, 0, 0, 129, 333, 334, 335, 336,
	337, 770, 130, 0, 0, 0, 0, 768, 0, 0,
	0, 0, 766, 767, 0, 0, 0, 0, 0, 0,
	679, 1150, 801, 790, 791, 788, 789, 780, 0, 779,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 180,
	0, 181, 0, 0, 0, 0, 818, 783, 0, 0,
	0, 182, 183, 184, 339, 833, 341, 834, 185, 835,
	836, 0, 186, 345, 346, 187, 188, 189, 786, 817,
	837, 838, 349, 0, 190, 829, 0, 809, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 0, 480,
	198, 199, 200, 0, 810, 811, 813, 0, 812, 814,
	201, 202, 401, 203, 839, 204, 840, 841, 0, 205,
	0, 206, 0, 207, 0, 0, 832, 209, 0, 210,
	0, 0, 0, 774, 211, 212, 213, 819, 820, 797,
	0, 0, 214, 215, 842, 843, 844, 0, 216, 0,
	217, 0, 0, 481, 218, 0, 219, 830, 0, 361,
	0, 220, 221, 222, 223, 224, 826, 828, 483, 0,
	228, 0, 225, 0, 482, 226, 845, 227, 846, 847,
	848, 849, 850, 0, 808, 0, 484, 229, 230, 231,
	485, 232, 233, 234, 0, 236, 235, 0, 831, 486,
	237, 487, 0, 238, 0, 0, 239, 0, 240, 241,
	242, 244, 372, 243, 488, 245, 246, 248, 247, 769,
	0, 798, 827, 249, 851, 250, 251, 0, 252, 0,
	0, 253, 0, 0, 254, 375, 489, 255, 490, 821,
	256, 257, 258, 259, 260, 0, 261, 822, 262, 378,
	263, 0, 264, 265, 266, 267, 268, 269, 852, 270,
	271, 0, 272, 273, 274, 275, 276, 278, 279, 277,
	280, 281, 282, 283, 0, 284, 491, 285, 286, 775,
	287, 0, 291, 292, 293, 294, 135, 296, 381, 295,
	297, 298, 815, 299, 288, 289, 300, 492, 301, 853,
	383, 302, 0, 309, 303, 304, 290, 305, 308, 854,
	306, 307, 823, 0, 310, 137, 311, 312, 313, 314,
	315, 316, 317, 0, 386, 855, 856, 0, 0, 318,
	319, 824, 825, 796, 320, 321, 322, 323, 0, 0,
	324, 325, 326, 327, 816, 328, 0, 391, 329, 330,
	331, 919, 857, 0, 0, 332, 0, 0, 0, 129,
	333, 334, 335, 336, 337, 770, 130, 0, 0, 0,
	0, 768, 0, 0, 0, 0, 766, 767, 801, 790,
	791, 788, 789, 780, 0, 1150, 0, 0, 0, 0,
	0, 0, 0, 779, 179, 180, 0, 181, 0, 0,
	0, 0, 818, 783, 0, 0, 0, 182, 183, 184,
	339, 833, 341, 834, 185, 835, 836, 0, 186, 345,
	346, 187, 188, 189, 786, 817, 837, 838, 349, 0,
	190, 829, 0, 809, 0, 191, 192, 193, 0, 194,
	0, 195, 196, 197, 0, 480, 198, 199, 200, 0,
	810, 811, 813, 0, 812, 814, 201, 202, 401, 203,
	839, 204, 840, 841, 0, 205, 0, 206, 0, 207,
	0, 0, 832, 209, 0, 210, 0, 0, 0, 774,
	211, 212, 213, 819, 820, 797, 0, 0, 214, 215,
	842, 843, 844, 0, 216, 0, 217, 0, 0, 481,
	218, 0, 219, 830, 0, 361, 0, 220, 221, 222,
	223, 224, 826, 828, 483, 0, 228, 0, 225, 0,
	482, 226, 845, 227, 846, 847, 848, 849, 850, 0,
	808, 0, 484, 229, 230, 231, 485, 232, 233, 234,
	0, 236, 235, 0, 831, 486, 237, 487, 0, 238,
	0, 0, 239, 0, 240, 241, 242, 244, 372, 243,
	488, 245, 246, 248, 247, 769, 0, 798, 827, 249,
	851, 250, 251, 0, 252, 0, 0, 253, 0, 0,
	254, 375, 489, 255, 490, 821, 256, 257, 258, 259,
	260, 0, 261, 822, 262, 378, 263, 0, 264, 265,
	266, 267, 268, 269, 852, 270, 271, 0, 272, 273,
	274, 275, 276, 278, 279, 277, 280, 281, 282, 283,
	0, 284, 491, 285, 286, 775, 287, 0, 291, 292,
	293, 294, 135, 296, 381, 295, 297, 298, 815, 299,
	288, 289, 300, 492, 301, 853, 383, 302, 0, 309,
	303, 304, 290, 305, 308, 854, 306, 307, 823, 0,
	310, 137, 311, 312, 313, 314, 315, 316, 317, 0,
	386, 855, 856, 0, 0, 318, 319, 824, 825, 796,
	320, 321, 322, 323, 0, 0, 324, 325, 326, 327,
	816, 328, 0, 391, 329, 330, 331, 919, 857, 0,
	0, 332, 0, 0, 0, 129, 333, 334, 335, 336,
	337, 770, 130, 0, 0, 0, 0, 768, 0, 0,
	0, 0, 766, 767, 801, 790, 791, 788, 789, 780,
	0, 1150, 0, 0, 0, 0, 0, 0, 0, 779,
	179, 180, 0, 181, 0, 0, 0, 0, 818, 783,
	0, 0, 0, 182, 183, 184, 339, 833, 341, 834,
	185, 835, 836, 1590, 186, 345, 346, 187, 188, 189,
	786, 817, 837, 838, 349, 0, 190, 829, 0, 809,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	0, 480, 198, 199, 200, 0, 810, 811, 813, 0,
	812, 814, 201, 202, 401, 203, 839, 204, 840, 841,
	0, 205, 0, 206, 0, 207, 0, 0, 832, 209,
	0, 210, 0, 0, 0, 774, 211, 212, 213, 819,
	820, 797, 0, 0, 214, 215, 842, 843, 844, 0,
	216, 0, 217, 0, 1595, 481, 218, 0, 219, 830,
	0, 361, 0, 220, 221, 222, 223, 224, 826, 828,
	483, 0, 228, 0, 225, 0, 482, 226, 845, 227,
	846, 847, 848, 849, 850, 0, 808, 0, 484, 229,
	230, 231, 485, 232, 233, 234, 0, 236, 235, 1591,
	831, 486, 237, 487, 0, 238, 0, 0, 239, 0,
	240, 241, 242, 244, 372, 243, 488, 245, 246, 248,
	247, 769, 0, 798, 827, 249, 851, 250, 251, 0,
	252, 0, 0, 253, 0, 0, 254, 375, 489, 255,
	490, 821, 256, 257, 258, 259, 260, 0, 261, 822,
	262, 378, 263, 0, 264, 265, 266, 267, 268, 269,
	852, 270, 271, 0, 272, 273, 274, 275, 276, 278,
	279, 277, 280, 281, 282, 283, 0, 284, 491, 285,
	286, 775, 287, 0, 291, 292, 293, 294, 0, 296,
	381, 295, 297, 298, 815, 299, 288, 289, 300, 492,
	301, 853, 383, 302, 0, 309, 303, 304, 290, 305,
	308, 854, 306, 307, 823, 0, 310, 0, 311, 312,
	313, 314, 315, 316, 317, 0, 386, 855, 856, 0,
	1592, 318, 319, 824, 825, 796, 320, 321, 322, 323,
	0, 0, 324, 325, 326, 327, 816, 328, 0, 391,
	329, 330, 331, 392, 857, 0, 0, 332, 0, 0,
	0, 0, 333, 334, 335, 336, 337, 770, 0, 0,
	0, 0, 0, 768, 0, 0, 0, 0, 766, 767,
	801, 790, 791, 788, 789, 780, 0, 776, 0, 0,
	0, 0, 0, 0, 0, 779, 179, 180, 0, 181,
	0, 0, 0, 0, 818, 783, 0, 0, 0, 182,
	183, 184, 339, 833, 341, 834, 185, 835, 836, 0,
	186, 345, 346, 187, 188, 189, 786, 817, 837, 838,
	349, 0, 190, 829, 0, 809, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 0, 480, 198, 199,
	200, 0, 810, 811, 813, 0, 812, 814, 201, 202,
	401, 203, 839, 204, 840, 841, 0, 205, 0, 206,
	0, 207, 0, 0, 832, 209, 0, 210, 0, 0,
	0, 774, 211, 212, 213, 819, 820, 797, 0, 0,
	214, 215, 842, 843, 844, 0, 216, 0, 217, 0,
	0, 481, 218, 0, 219, 830, 0, 361, 0, 220,
	221, 222, 223, 224, 826, 828, 483, 0, 228, 0,
	225, 0, 482, 226, 845, 227, 846, 847, 848, 849,
	850, 0, 808, 0, 484, 229, 230, 231, 485, 232,
	233, 234, 0, 236, 235, 0, 831, 486, 237, 487,
	0, 238, 0, 0, 239, 0, 240, 241, 242, 244,
	372, 243, 488, 245, 246, 248, 247, 769, 2121, 798,
	827, 249, 851, 250, 251, 0, 252, 0, 0, 253,
	0, 0, 254, 375, 489, 255, 490, 821, 256, 257,
	258, 259, 260, 0, 261, 822, 262, 378, 263, 0,
	264, 265, 266, 267, 268, 269, 852, 270, 271, 0,
	272, 273, 274, 275, 276, 278, 279, 277, 280, 281,
	282, 283, 0, 284, 491, 285, 286, 775, 287, 0,
	291, 292, 293, 294, 0, 296, 381, 295, 297, 298,
	815, 299, 288, 289, 300, 492, 301, 853, 383, 302,
	0, 309, 303, 304, 290, 305, 308, 854, 306, 307,
	823, 0, 310, 0, 311, 312, 313, 314, 315, 316,
	317, 0, 386, 855, 856, 0, 0, 318, 319, 824,
	825, 796, 320, 321, 322, 323, 0, 0, 324, 325,
	326, 327, 816, 328, 0, 391, 329, 330, 331, 392,
	857, 0, 0, 332, 0, 0, 0, 0, 333, 334,
	335, 336, 337, 770, 0, 0, 0, 0, 0, 768,
	0, 0, 0, 0, 766, 767, 1044, 801, 790, 791,
	788, 789, 780, 776, 0, 0, 0, 0, 0, 0,
	0, 779, 0, 179, 180, 0, 181, 0, 0, 0,
	0, 818, 783, 0, 0, 0, 182, 183, 184, 339,
	833, 341, 834, 185, 835, 836, 0, 186, 345, 346,
	187, 188, 189, 786, 817, 837, 838, 349, 0, 190,
	829, 0, 809, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 0, 480, 198, 199, 200, 0, 810,
	811, 813, 0, 812, 814, 201, 202, 401, 203, 839,
	204, 840, 841, 0, 205, 0, 206, 0, 207, 0,
	0, 832, 209, 0, 210, 0, 0, 0, 774, 211,
	212, 213, 819, 820, 797, 0, 0, 214, 215, 842,
	843, 844, 0, 216, 0, 217, 0, 0, 481, 218,
	0, 219, 830, 0, 361, 0, 220, 221, 222, 223,
	224, 826, 828, 483, 0, 228, 1378, 225, 0, 482,
	226, 845, 227, 846, 847, 848, 849, 850, 0, 808,
	0, 484, 229, 230, 231, 485, 232, 233, 234, 0,
	236, 235, 0, 831, 486, 237, 487, 0, 238, 0,
	0, 239, 0, 240, 241, 242, 244, 372, 243, 488,
	245, 246, 248, 247, 769, 0, 798, 827, 249, 851,
	250, 251, 0, 252, 0, 0, 253, 0, 0, 254,
	375, 489, 255, 490, 821, 256, 257, 258, 259, 260,
	0, 261, 822, 262, 378, 263, 1377, 264, 265, 266,
	267, 268, 269, 852, 270, 271, 0, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 0,
	284, 491, 285, 286, 775, 287, 0, 291, 292, 293,
	294, 0, 296, 381, 295, 297, 298, 815, 299, 288,
	289, 300, 492, 301, 853, 383, 302, 0, 309, 303,
	304, 290, 305, 308, 854, 306, 307, 823, 0, 310,
	0, 311, 312, 313, 314, 315, 316, 317, 0, 386,
	855, 856, 0, 0, 318, 319, 824, 825, 796, 320,
	321, 322, 323, 0, 0, 324, 325, 326, 327, 816,
	328, 0, 391, 329, 330, 331, 392, 857, 0, 0,
	332, 0, 0, 0, 0, 333, 334, 335, 336, 337,
	770, 0, 0, 0, 0, 0, 768, 0, 0, 0,
	0, 766, 767, 801, 790, 791, 788, 789, 780, 0,
	776, 0, 0, 0, 0, 0, 0, 0, 779, 179,
	180, 0, 181, 0, 0, 0, 0, 818, 783, 0,
	0, 0, 182, 183, 184, 339, 833, 341, 834, 185,
	835, 836, 0, 186, 345, 346, 187, 188, 189, 786,
	817, 837, 838, 349, 0, 190, 829, 0, 809, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 0,
	480, 198, 199, 200, 0, 810, 811, 813, 0, 812,
	814, 201, 202, 401, 203, 839, 204, 840, 841, 0,
	205, 0, 206, 0, 207, 0, 0, 832, 209, 0,
	210, 0, 0, 0, 774, 211, 212, 213, 819, 820,
	797, 0, 0, 214, 215, 842, 843, 844, 0, 216,
	0, 217, 0, 0, 481, 218, 0, 219, 830, 0,
	361, 0, 220, 221, 222, 223, 224, 826, 828, 483,
	0, 228, 0, 225, 0, 482, 226, 845, 227, 846,
	847, 848, 849, 850, 0, 808, 0, 484, 229, 230,
	231, 485, 232, 233, 234, 0, 236, 235, 0, 831,
	486, 237, 487, 0, 238, 0, 0, 239, 0, 240,
	241, 242, 244, 372, 243, 488, 245, 246, 248, 247,
	769, 0, 798, 827, 249, 851, 250, 251, 0, 252,
	0, 0, 253, 0, 0, 254, 375, 489, 255, 490,
	821, 256, 257, 258, 259, 260, 0, 261, 822, 262,
	378, 263, 0, 264, 265, 266, 267, 268, 269, 852,
	270, 271, 0, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 0, 284, 491, 285, 286,
	775, 287, 0, 291, 292, 293, 294, 0, 296, 381,
	295, 297, 298, 815, 299, 288, 289, 300, 492, 301,
	853, 383, 302, 0, 309, 303, 304, 290, 305, 308,
	854, 306, 307, 823, 0, 310, 0, 311, 312, 313,
	314, 315, 316, 317, 0, 386, 855, 856, 0, 0,
	318, 319, 824, 825, 796, 320, 321, 322, 323, 0,
	0, 324, 325, 326, 327, 816, 328, 0, 391, 329,
	330, 331, 392, 857, 0, 0, 332, 0, 0, 0,
	0, 333, 334, 335, 336, 337, 770, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 0, 766, 767, 0,
	0, 0, 0, 0, 1154, 1527, 776, 801, 790, 791,
	788, 789, 780, 0, 779, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 180, 0, 181, 0, 0, 0,
	0, 818, 783, 0, 0, 0, 182, 183, 184, 339,
	833, 341, 834, 185, 835, 836, 0, 186, 345, 346,
	187, 188, 189, 786, 817, 837, 838, 349, 0, 190,
	829, 0, 809, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 0, 480, 198, 199, 200, 0, 810,
	811, 813, 0, 812, 814, 201, 202, 401, 203, 839,
	204, 840, 841, 1049, 205, 0, 206, 0, 207, 0,
	0, 832, 209, 0, 210, 0, 0, 0, 774, 211,
	212, 213, 819, 820, 797, 0, 0, 214, 215, 842,
	843, 844, 0, 216, 0, 217, 0, 0, 481, 218,
	0, 219, 830, 0, 361, 0, 220, 221, 222, 223,
	224, 826, 828, 483, 0, 228, 0, 225, 0, 482,
	226, 845, 227, 846, 847, 848, 849, 850, 0, 808,
	0, 484, 229, 230, 231, 485, 232, 233, 234, 0,
	236, 235, 0, 831, 486, 237, 487, 0, 238, 0,
	0, 239, 0, 240, 241, 242, 244, 372, 243, 488,
	245, 246, 248, 247, 769, 0, 798, 827, 249, 851,
	250, 251, 0, 252, 0, 0, 253, 0, 0, 254,
	375, 489, 255, 490, 821, 256, 257, 258, 259, 260,
	0, 261, 822, 262, 378, 263, 0, 264, 265, 266,
	267, 268, 269, 852, 270, 271, 0, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 0,
	284, 491, 285, 286, 775, 287, 0, 291, 292, 293,
	294, 0, 296, 381, 295, 297, 298, 815, 299, 288,
	289, 300, 492, 301, 853, 383, 302, 0, 309, 303,
	304, 290, 305, 308, 854, 306, 307, 823, 0, 310,
	0, 311, 312, 313, 314, 315, 316, 317, 0, 386,
	855, 856, 0, 0, 318, 319, 824, 825, 796, 320,
	321, 322, 323, 0, 0, 324, 325, 326, 327, 816,
	328, 0, 391, 329, 330, 331, 392, 857, 0, 0,
	332, 0, 0, 0, 0, 333, 334, 335, 336, 337,
	770, 0, 0, 0, 0, 0, 768, 0, 0, 0,
	0, 766, 767, 801, 790, 791, 788, 789, 780, 0,
	776, 0, 0, 0, 0, 0, 0, 0, 779, 179,
	180, 0, 181, 0, 0, 0, 0, 818, 783, 0,
	0, 0, 182, 183, 184, 339, 833, 341, 834, 185,
	835, 836, 0, 186, 345, 346, 187, 188, 189, 786,
	817, 837, 838, 349, 0, 190, 829, 0, 809, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 0,
	480, 198, 199, 200, 0, 810, 811, 813, 0, 812,
	814, 201, 202, 401, 203, 839, 204, 840, 841, 0,
	205, 0, 206, 0, 207, 0, 0, 832, 209, 0,
	210, 0, 0, 0, 774, 211, 212, 213, 819, 820,
	797, 0, 0, 214, 215, 842, 843, 844, 0, 216,
	0, 217, 0, 0, 481, 218, 0, 219, 830, 0,
	361, 0, 220, 221, 222, 223, 224, 826, 828, 483,
	0, 228, 0, 225, 0, 482, 226, 845, 227, 846,
	847, 848, 849, 850, 0, 808, 0, 484, 229, 230,
	231, 485, 232, 233, 234, 0, 236, 235, 0, 831,
	486, 237, 487, 0, 238, 0, 0, 239, 0, 240,
	241, 242, 244, 372, 243, 488, 245, 246, 248, 247,
	769, 0, 798, 827, 249, 851, 250, 251, 0, 252,
	0, 0, 253, 0, 0, 254, 375, 489, 255, 490,
	821, 256, 257, 258, 259, 260, 0, 261, 822, 262,
	378, 263, 0, 264, 265, 266, 267, 268, 269, 852,
	270, 271, 0, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 0, 284, 491, 285, 286,
	775, 287, 0, 291, 292, 293, 294, 0, 296, 381,
	295, 297, 298, 815, 299, 288, 289, 300, 492, 301,
	853, 383, 302, 0, 309, 303, 304, 290, 305, 308,
	854, 306, 307, 823, 0, 310, 0, 311, 312, 313,
	314, 315, 316, 317, 0, 386, 855, 856, 0, 0,
	318, 319, 824, 825, 796, 320, 321, 322, 323, 0,
	0, 324, 325, 326, 327, 816, 328, 0, 391, 329,
	330, 331, 392, 857, 0, 0, 332, 0, 0, 0,
	0, 333, 334, 335, 336, 337, 770, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 0, 766, 767, 801,
	790, 791, 788, 789, 780, 0, 776, 2088, 0, 0,
	0, 0, 0, 0, 779, 179, 180, 0, 181, 0,
	0, 0, 0, 818, 783, 0, 0, 0, 182, 183,
	184, 339, 833, 341, 834, 185, 835, 836, 0, 186,
	345, 346, 187, 188, 189, 786, 817, 837, 838, 349,
	0, 190, 829, 0, 809, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 0, 480, 198, 199, 200,
	0, 810, 811, 813, 0, 812, 814, 201, 202, 401,
	203, 839, 204, 840, 841, 0, 205, 0, 206, 0,
	207, 0, 0, 832, 209, 0, 210, 0, 0, 0,
	774, 211, 212, 213, 819, 820, 797, 0, 0, 214,
	215, 842, 843, 844, 0, 216, 0, 217, 0, 0,
	481, 218, 0, 219, 830, 0, 361, 0, 220, 221,
	222, 223, 224, 826, 828, 483, 0, 228, 0, 225,
	0, 482, 226, 845, 227, 846, 847, 848, 849, 850,
	0, 808, 0, 484, 229, 230, 231, 485, 232, 233,
	234, 0, 236, 235, 0, 831, 486, 237, 487, 0,
	238, 0, 0, 239, 0, 240, 241, 242, 244, 372,
	243, 488, 245, 246, 248, 247, 769, 0, 798, 827,
	249, 851, 250, 251, 0, 252, 0, 0, 253, 0,
	0, 254, 375, 489, 255, 490, 821, 256, 257, 258,
	259, 260, 0, 261, 822, 262, 378, 263, 0, 264,
	265, 266, 267, 268, 269, 852, 270, 271, 0, 272,
	273, 274, 275, 276, 278, 279, 277, 280, 281, 282,
	283, 0, 284, 491, 285, 286, 775, 287, 0, 291,
	292, 293, 294, 0, 296, 381, 295, 297, 298, 815,
	299, 288, 289, 300, 492, 301, 853, 383, 302, 0,
	309, 303, 304, 290, 305, 308, 854, 306, 307, 823,
	0, 310, 0, 311, 312, 313, 314, 315, 316, 317,
	0, 386, 855, 856, 0, 0, 318, 319, 824, 825,
	796, 320, 321, 322, 323, 0, 0, 324, 325, 326,
	327, 816, 328, 0, 391, 329, 330, 331, 392, 857,
	2037, 0, 332, 0, 0, 0, 0, 333, 334, 335,
	336, 337, 770, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 0, 766, 767, 801, 790, 791, 788, 789,
	780, 0, 776, 0, 0, 0, 0, 0, 0, 0,
	779, 179, 180, 0, 181, 0, 0, 0, 0, 818,
	783, 0, 0, 0, 182, 183, 184, 339, 833, 341,
	834, 185, 835, 836, 0, 186, 345, 346, 187, 188,
	189, 786, 817, 837, 838, 349, 0, 190, 829, 0,
	809, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 0, 480, 198, 199, 200, 0, 810, 811, 813,
	0, 812, 814, 201, 202, 401, 203, 839, 204, 840,
	841, 0, 205, 0, 206, 0, 207, 0, 0, 832,
	209, 0, 210, 0, 0, 0, 774, 211, 212, 213,
	819, 820, 797, 0, 0, 214, 215, 842, 843, 844,
	0, 216, 0, 217, 0, 0, 481, 218, 0, 219,
	830, 0, 361, 0, 220, 221, 222, 223, 224, 826,
	828, 483, 0, 228, 0, 225, 0, 482, 226, 845,
	227, 846, 847, 848, 849, 850, 0, 808, 0, 484,
	229, 230, 231, 485, 232, 233, 234, 0, 236, 235,
	0, 831, 486, 237, 487, 0, 238, 0, 0, 239,
	0, 240, 241, 242, 244, 372, 243, 488, 245, 246,
	248, 247, 769, 0, 798, 827, 249, 851, 250, 251,
	0, 252, 0, 0, 253, 0, 0, 254, 375, 489,
	255, 490, 821, 256, 257, 258, 259, 260, 0, 261,
	822, 262, 378, 263, 0, 264, 265, 266, 267, 268,
	269, 852, 270, 271, 0, 272, 273, 274, 275, 276,
	278, 279, 277, 280, 281, 282, 283, 0, 284, 491,
	285, 286, 775, 287, 0, 291, 292, 293, 294, 0,
	296, 381, 295, 297, 298, 815, 299, 288, 289, 300,
	492, 301, 853, 383, 302, 0, 309, 303, 304, 290,
	305, 308, 854, 306, 307, 823, 0, 310, 0, 311,
	312, 313, 314, 315, 316, 317, 0, 386, 855, 856,
	0, 0, 318, 319, 824, 825, 796, 320, 321, 322,
	323, 0, 0, 324, 325, 326, 327, 816, 328, 0,
	391, 329, 330, 331, 392, 857, 0, 0, 332, 0,
	0, 0, 0, 333, 334, 335, 336, 337, 770, 0,
	0, 0, 0, 0, 768, 0, 0, 0, 0, 766,
	767, 801, 790, 791, 788, 789, 780, 0, 776, 2027,
	0, 0, 0, 0, 0, 0, 779, 179, 180, 0,
	181, 0, 0, 0, 0, 818, 783, 0, 0, 0,
	182, 183, 184, 339, 833, 341, 834, 185, 835, 836,
	0, 186, 345, 346, 187, 188, 189, 786, 817, 837,
	838, 349, 0, 190, 829, 0, 809, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 0, 480, 198,
	199, 200, 0, 810, 811, 813, 0, 812, 814, 201,
	202, 401, 203, 839, 204, 840, 841, 0, 205, 0,
	206, 0, 207, 0, 0, 832, 209, 0, 210, 0,
	0, 0, 774, 211, 212, 213, 819, 820, 797, 0,
	0, 214, 215, 842, 843, 844, 0, 216, 0, 217,
	0, 1595, 481, 218, 0, 219, 830, 0, 361, 0,
	220, 221, 222, 223, 224, 826, 828, 483, 0, 228,
	0, 225, 0, 482, 226, 845, 227, 846, 847, 848,
	849, 850, 0, 808, 0, 484, 229, 230, 231, 485,
	232, 233, 234, 0, 236, 235, 0, 831, 486, 237,
	487, 0, 238, 0, 0, 239, 0, 240, 241, 242,
	244, 372, 243, 488, 245, 246, 248, 247, 769, 0,
	798, 827, 249, 851, 250, 251, 0, 252, 0, 0,
	253, 0, 0, 254, 375, 489, 255, 490, 821, 256,
	257, 258, 259, 260, 0, 261, 822, 262, 378, 263,
	0, 264, 265, 266, 267, 268, 269, 852, 270, 271,
	0, 272, 273, 274, 275, 276, 278, 279, 277, 280,
	281, 282, 283, 0, 284, 491, 285, 286, 775, 287,
	0, 291, 292, 293, 294, 0, 296, 381, 295, 297,
	298, 815, 299, 288, 289, 300, 492, 301, 853, 383,
	302, 0, 309, 303, 304, 290, 305, 308, 854, 306,
	307, 823, 0, 310, 0, 311, 312, 313, 314, 315,
	316, 317, 0, 386, 855, 856, 0, 0, 318, 319,
	824, 825, 796, 320, 321, 322, 323, 0, 0, 324,
	325, 326, 327, 816, 328, 0, 391, 329, 330, 331,
	392, 857, 0, 0, 332, 0, 0, 0, 0, 333,
	334, 335, 336, 337, 770, 0, 0, 0, 0, 0,
	768, 0, 0, 0, 0, 766, 767, 801, 790, 791,
	788, 789, 780, 0, 776, 0, 0, 0, 0, 0,
	0, 0, 779, 179, 180, 0, 181, 0, 0, 0,
	0, 818, 783, 0, 0, 0, 182, 183, 184, 339,
	833, 341, 834, 185, 835, 836, 0, 186, 345, 346,
	187, 188, 189, 786, 817, 837, 838, 349, 0, 190,
	829, 0, 809, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 0, 480, 198, 199, 200, 0, 810,
	811, 813, 0, 812, 814, 201, 202, 401, 203, 839,
	204, 840, 841, 0, 205, 0, 206, 0, 207, 0,
	0, 832, 209, 0, 210, 0, 0, 0, 774, 211,
	212, 213, 819, 820, 797, 0, 0, 214, 215, 842,
	843, 844, 0, 216, 0, 217, 0, 0, 481, 218,
	0, 219, 830, 0, 361, 0, 220, 221, 222, 223,
	224, 826, 828, 483, 0, 228, 0, 225, 0, 482,
	226, 845, 227, 846, 847, 848, 849, 850, 0, 808,
	0, 484, 229, 230, 231, 485, 232, 233, 234, 0,
	236, 235, 0, 831, 486, 237, 487, 0, 238, 0,
	0, 239, 0, 240, 241, 242, 244, 372, 243, 488,
	245, 246, 248, 247, 769, 0, 798, 827, 249, 851,
	250, 251, 0, 252, 0, 0, 253, 0, 0, 254,
	375, 489, 255, 490, 821, 256, 257, 258, 259, 260,
	0, 261, 822, 262, 378, 263, 0, 264, 265, 266,
	267, 268, 269, 852, 270, 271, 0, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 0,
	284, 491, 285, 286, 775, 287, 0, 291, 292, 293,
	294, 0, 296, 381, 295, 297, 298, 815, 299, 288,
	289, 300, 492, 301, 853, 383, 302, 0, 309, 303,
	304, 290, 305, 308, 854, 306, 307, 823, 0, 310,
	0, 311, 312, 313, 314, 315, 316, 317, 0, 386,
	855, 856, 0, 0, 318, 319, 824, 825, 796, 320,
	321, 322, 323, 0, 0, 324, 325, 326, 327, 816,
	328, 0, 391, 329, 330, 331, 392, 857, 0, 0,
	332, 0, 0, 0, 0, 333, 334, 335, 336, 337,
	770, 0, 0, 0, 0, 0, 768, 0, 0, 0,
	0, 766, 767, 1044, 0, 0, 0, 0, 0, 1604,
	776, 801, 790, 791, 788, 789, 780, 0, 779, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 180, 0,
	181, 0, 0, 0, 0, 818, 783, 0, 0, 0,
	182, 183, 184, 339, 833, 341, 834, 185, 835, 836,
	0, 186, 345, 346, 187, 188, 189, 786, 817, 837,
	838, 349, 0, 190, 829, 0, 809, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 0, 480, 198,
	199, 200, 0, 810, 811, 813, 0, 812, 814, 201,
	202, 401, 203, 839, 204, 840, 841, 0, 205, 0,
	206, 0, 207, 0, 0, 832, 209, 0, 210, 0,
	0, 0, 774, 211, 212, 213, 819, 820, 797, 0,
	0, 214, 215, 842, 843, 844, 0, 216, 0, 217,
	0, 0, 481, 218, 0, 219, 830, 0, 361, 0,
	220, 221, 222, 223, 224, 826, 828, 483, 0, 228,
	0, 225, 0, 482, 226, 845, 227, 846, 847, 848,
	849, 850, 0, 808, 0, 484, 229, 230, 231, 485,
	232, 233, 234, 0, 236, 235, 0, 831, 486, 237,
	487, 0, 238, 0, 0, 239, 0, 240, 241, 242,
	244, 372, 243, 488, 245, 246, 248, 247, 769, 0,
	798, 827, 249, 851, 250, 251, 0, 252, 0, 0,
	253, 0, 0, 254, 375, 489, 255, 490, 821, 256,
	257, 258, 259, 260, 0, 261, 822, 262, 378, 263,
	0, 264, 265, 266, 267, 268, 269, 852, 270, 271,
	0, 272, 273, 274, 275, 276, 278, 279, 277, 280,
	281, 282, 283, 0, 284, 491, 285, 286, 775, 287,
	0, 291, 292, 293, 294, 0, 296, 381, 295, 297,
	298, 815, 299, 288, 289, 300, 492, 301, 853, 383,
	302, 0, 309, 303, 304, 290, 305, 308, 854, 306,
	307, 823, 0, 310, 0, 311, 312, 313, 314, 315,
	316, 317, 0, 386, 855, 856, 0, 0, 318, 319,
	824, 825, 796, 320, 321, 322, 323, 0, 0, 324,
	325, 326, 327, 816, 328, 0, 391, 329, 330, 331,
	392, 857, 0, 0, 332, 0, 0, 0, 0, 333,
	334, 335, 336, 337, 770, 0, 0, 0, 0, 0,
	768, 0, 0, 0, 0, 766, 767, 0, 0, 0,
	0, 0, 0, 1602, 776, 801, 790, 791, 788, 789,
	780, 0, 779, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 180, 0, 181, 0, 0, 0, 0, 818,
	783, 0, 0, 0, 182, 183, 184, 339, 833, 341,
	834, 185, 835, 836, 0, 186, 345, 346, 187, 188,
	189, 786, 817, 837, 838, 349, 0, 190, 829, 0,
	809, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 0, 480, 198, 199, 200, 0, 810, 811, 813,
	0, 812, 814, 201, 202, 401, 203, 839, 204, 840,
	841, 0, 205, 0, 206, 0, 207, 0, 0, 832,
	209, 0, 210, 0, 0, 0, 774, 211, 212, 213,
	819, 820, 797, 0, 0, 214, 215, 842, 843, 844,
	0, 216, 0, 217, 0, 0, 481, 218, 0, 219,
	830, 0, 361, 0, 220, 221, 222, 223, 224, 826,
	828, 483, 0, 228, 0, 225, 0, 482, 226, 845,
	227, 846, 847, 848, 849, 850, 0, 808, 0, 484,
	229, 230, 231, 485, 232, 233, 234, 0, 236, 235,
	0, 831, 486, 237, 487, 0, 238, 0, 0, 239,
	0, 240, 241, 242, 244, 372, 243, 488, 245, 246,
	248, 247, 769, 0, 798, 827, 249, 851, 250, 251,
	0, 252, 0, 0, 253, 0, 0, 254, 375, 489,
	255, 490, 821, 256, 257, 258, 259, 260, 0, 261,
	822, 262, 378, 263, 0, 264, 265, 266, 267, 268,
	269, 852, 270, 271, 0, 272, 273, 274, 275, 276,
	278, 279, 277, 280, 281, 282, 283, 0, 284, 491,
	285, 286, 775, 287, 0, 291, 292, 293, 294, 0,
	296, 381, 295, 297, 298, 815, 299, 288, 289, 300,
	492, 301, 853, 383, 302, 0, 309, 303, 304, 290,
	305, 308, 854, 306, 307, 823, 0, 310, 0, 311,
	312, 313, 314, 315, 316, 317, 0, 386, 855, 856,
	0, 0, 318, 319, 824, 825, 796, 320, 321, 322,
	323, 0, 0, 324, 325, 326, 327, 816, 328, 0,
	391, 329, 330, 331, 392, 857, 0, 0, 332, 0,
	0, 0, 0, 333, 334, 335, 336, 337, 770, 0,
	0, 0, 0, 0, 768, 0, 0, 0, 0, 766,
	767, 0, 0, 0, 0, 0, 0, 1586, 776, 801,
	790, 791, 788, 789, 780, 0, 779, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 180, 0, 181, 0,
	0, 0, 0, 818, 783, 0, 0, 0, 182, 183,
	184, 339, 833, 341, 834, 185, 835, 836, 0, 186,
	345, 346, 187, 188, 189, 786, 817, 837, 838, 349,
	0, 190, 829, 0, 809, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 0, 480, 198, 199, 200,
	0, 810, 811, 813, 0, 812, 814, 201, 202, 401,
	203, 839, 204, 840, 841, 0, 205, 0, 206, 0,
	207, 0, 0, 832, 209, 0, 210, 0, 0, 0,
	774, 211, 212, 213, 819, 820, 797, 0, 0, 214,
	215, 842, 843, 844, 0, 216, 0, 217, 0, 0,
	481, 218, 0, 219, 830, 0, 361, 0, 220, 221,
	222, 223, 224, 826, 828, 483, 0, 228, 0, 225,
	0, 482, 226, 845, 227, 846, 847, 848, 849, 850,
	0, 808, 0, 484, 229, 230, 231, 485, 232, 233,
	234, 0, 236, 235, 0, 831, 486, 237, 487, 0,
	238, 0, 0, 239, 0, 240, 241, 242, 244, 372,
	243, 488, 245, 246, 248, 247, 769, 0, 798, 827,
	249, 851, 250, 251, 0, 252, 0, 0, 253, 0,
	0, 254, 375, 489, 255, 490, 821, 256, 257, 258,
	259, 260, 0, 261, 822, 262, 378, 263, 0, 264,
	265, 266, 267, 268, 269, 852, 270, 271, 0, 272,
	273, 274, 275, 276, 278, 279, 277, 280, 281, 282,
	283, 0, 284, 491, 285, 286, 775, 287, 0, 291,
	292, 293, 294, 0, 296, 381, 295, 297, 298, 815,
	299, 288, 289, 300, 492, 301, 853, 383, 302, 0,
	309, 303, 304, 290, 305, 308, 854, 306, 307, 823,
	0, 310, 0, 311, 312, 313, 314, 315, 316, 317,
	0, 386, 855, 856, 0, 0, 318, 319, 824, 825,
	796, 320, 321, 322, 323, 0, 0, 324, 325, 326,
	327, 816, 328, 0, 391, 329, 330, 331, 392, 857,
	0, 0, 332, 0, 0, 0, 0, 333, 334, 335,
	336, 337, 770, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 0, 766, 767, 0, 0, 0, 0, 0,
	0, 1574, 776, 801, 790, 791, 788, 789, 780, 0,
	779, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	180, 0, 181, 0, 0, 0, 0, 818, 783, 0,
	0, 0, 182, 183, 184, 339, 833, 341, 834, 185,
	835, 836, 0, 186, 345, 346, 187, 188, 189, 786,
	817, 837, 838, 349, 0, 190, 829, 0, 809, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 0,
	480, 198, 199, 200, 0, 810, 811, 813, 0, 812,
	814, 201, 202, 401, 203, 839, 204, 840, 841, 0,
	205, 0, 206, 0, 207, 0, 0, 832, 209, 0,
	210, 0, 0, 0, 774, 211, 212, 213, 819, 820,
	797, 0, 0, 214, 215, 842, 843, 844, 0, 216,
	0, 217, 0, 0, 481, 218, 0, 219, 830, 0,
	361, 0, 220, 221, 222, 223, 224, 826, 828, 483,
	0, 228, 0, 225, 0, 482, 226, 845, 227, 846,
	847, 848, 849, 850, 0, 808, 0, 484, 229, 230,
	231, 485, 232, 233, 234, 0, 236, 235, 0, 831,
	486, 237, 487, 0, 238, 0, 0, 239, 0, 240,
	241, 242, 244, 372, 243, 488, 245, 246, 248, 247,
	769, 0, 798, 827, 249, 851, 250, 251, 0, 252,
	0, 0, 253, 0, 0, 254, 375, 489, 255, 490,
	821, 256, 257, 258, 259, 260, 0, 261, 822, 262,
	378, 263, 0, 264, 265, 266, 267, 268, 269, 852,
	270, 271, 0, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 0, 284, 491, 285, 286,
	775, 287, 0, 291, 292, 293, 294, 0, 296, 381,
	295, 297, 298, 815, 299, 288, 289, 300, 492, 301,
	853, 383, 302, 0, 309, 303, 304, 290, 305, 308,
	854, 306, 307, 823, 0, 310, 0, 311, 312, 313,
	314, 315, 316, 317, 0, 386, 855, 856, 0, 0,
	318, 319, 824, 825, 796, 320, 321, 322, 323, 0,
	0, 324, 325, 326, 327, 816, 328, 0, 391, 329,
	330, 331, 392, 857, 0, 0, 332, 0, 0, 0,
	0, 333, 334, 335, 336, 337, 770, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 0, 766, 767, 0,
	0, 0, 0, 0, 0, 1572, 776, 1564, 790, 791,
	788, 789, 780, 0, 779, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 180, 0, 181, 0, 0, 0,
	0, 818, 783, 0, 0, 0, 182, 183, 184, 339,
	833, 341, 834, 185, 835, 836, 0, 186, 345, 346,
	187, 188, 189, 786, 817, 837, 838, 349, 0, 190,
	829, 0, 809, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 0, 480, 198, 199, 200, 0, 810,
	811, 813, 0, 812, 814, 201, 202, 401, 203, 839,
	1567, 840, 841, 0, 205, 0, 206, 0, 207, 0,
	0, 832, 209, 0, 210, 0, 0, 0, 774, 211,
	212, 213, 819, 820, 797, 0, 0, 214, 215, 842,
	843, 844, 0, 216, 0, 217, 0, 0, 481, 218,
	0, 219, 830, 0, 361, 0, 220, 221, 1568, 223,
	224, 826, 828, 483, 0, 228, 0, 225, 0, 482,
	226, 845, 227, 846, 847, 848, 849, 850, 0, 808,
	0, 484, 229, 230, 231, 485, 232, 233, 234, 0,
	236, 235, 0, 831, 486, 237, 487, 0, 238, 0,
	0, 239, 0, 240, 1569, 1566, 244, 372, 243, 488,
	245, 246, 248, 247, 769, 0, 798, 827, 249, 851,
	250, 251, 0, 252, 0, 0, 253, 0, 0, 254,
	375, 489, 255, 490, 821, 256, 257, 258, 259, 260,
	0, 261, 822, 262, 378, 263, 0, 264, 265, 266,
	267, 268, 269, 852, 270, 271, 0, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 0,
	284, 491, 285, 286, 775, 287, 0, 291, 292, 293,
	1570, 0, 296, 381, 295, 297, 298, 815, 299, 288,
	289, 300, 492, 301, 853, 383, 302, 0, 309, 303,
	304, 290, 305, 308, 854, 306, 307, 823, 0, 310,
	0, 311, 312, 313, 314, 315, 316, 317, 0, 386,
	855, 856, 0, 0, 318, 319, 824, 825, 796, 320,
	321, 322, 323, 0, 0, 324, 325, 326, 327, 816,
	328, 0, 391, 329, 330, 331, 392, 857, 0, 0,
	332, 0, 0, 0, 0, 333, 334, 335, 1565, 337,
	770, 0, 0, 0, 0, 0, 768, 0, 0, 0,
	0, 766, 767, 0, 0, 0, 0, 0, 0, 1561,
	776, 1564, 790, 791, 788, 789, 780, 0, 779, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 180, 0,
	181, 0, 0, 0, 0, 818, 783, 0, 0, 0,
	182, 183, 184, 339, 833, 341, 834, 185, 835, 836,
	0, 186, 345, 346, 187, 188, 189, 786, 817, 837,
	838, 349, 0, 190, 829, 0, 809, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 0, 480, 198,
	199, 200, 0, 810, 811, 813, 0, 812, 814, 201,
	202, 401, 203, 839, 1567, 840, 841, 0, 205, 0,
	206, 0, 207, 0, 0, 832, 209, 0, 210, 0,
	0, 0, 774, 211, 212, 213, 819, 820, 797, 0,
	0, 214, 215, 842, 843, 844, 0, 216, 0, 217,
	0, 0, 481, 218, 0, 219, 830, 0, 361, 0,
	220, 221, 1568, 223, 224, 826, 828, 483, 0, 228,
	0, 225, 0, 482, 226, 845, 227, 846, 847, 848,
	849, 850, 0, 808, 0, 484, 229, 230, 231, 485,
	232, 233, 234, 0, 236, 235, 0, 831, 486, 237,
	487, 0, 238, 0, 0, 239, 0, 240, 1569, 1566,
	244, 372, 243, 488, 245, 246, 248, 247, 769, 0,
	798, 827, 249, 851, 250, 251, 0, 252, 0, 0,
	253, 0, 0, 254, 375, 489, 255, 490, 821, 256,
	257, 258, 259, 260, 0, 261, 822, 262, 378, 263,
	0, 264, 265, 266, 267, 268, 269, 852, 270, 271,
	0, 272, 273, 274, 275, 276, 278, 279, 277, 280,
	281, 282, 283, 0, 284, 491, 285, 286, 775, 287,
	0, 291, 292, 293, 1570, 0, 296, 381, 295, 297,
	298, 815, 299, 288, 289, 300, 492, 301, 853, 383,
	302, 0, 309, 303, 304, 290, 305, 308, 854, 306,
	307, 823, 0, 310, 0, 311, 312, 313, 314, 315,
	316, 317, 0, 386, 855, 856, 0, 0, 318, 319,
	824, 825, 796, 320, 321, 322, 323, 0, 0, 324,
	325, 326, 327, 816, 328, 0, 391, 329, 330, 331,
	392, 857, 0, 0, 332, 0, 0, 0, 0, 333,
	334, 335, 1565, 337, 770, 0, 0, 0, 0, 0,
	768, 0, 0, 0, 0, 766, 767, 801, 790, 791,
	788, 789, 780, 0, 776, 0, 0, 0, 0, 0,
	0, 0, 779, 179, 180, 0, 181, 0, 0, 0,
	0, 818, 783, 0, 0, 0, 182, 183, 184, 339,
	833, 341, 834, 185, 835, 836, 0, 186, 345, 346,
	187, 188, 189, 786, 817, 837, 838, 349, 0, 190,
	829, 0, 809, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 0, 480, 198, 199, 200, 0, 810,
	811, 813, 0, 812, 814, 201, 202, 401, 203, 839,
	204, 840, 841, 0, 205, 0, 206, 0, 207, 0,
	0, 832, 209, 0, 210, 0, 0, 0, 774, 211,
	212, 213, 819, 820, 797, 0, 0, 214, 215, 842,
	843, 844, 0, 216, 0, 217, 0, 0, 481, 218,
	0, 219, 830, 0, 361, 0, 220, 221, 222, 223,
	224, 826, 828, 483, 0, 228, 0, 225, 0, 482,
	226, 845, 227, 846, 847, 848, 849, 850, 0, 808,
	0, 484, 229, 230, 231, 485, 232, 233, 234, 0,
	236, 235, 0, 831, 486, 237, 487, 0, 238, 0,
	0, 239, 0, 240, 241, 242, 244, 372, 243, 488,
	245, 246, 248, 247, 769, 0, 798, 827, 249, 851,
	250, 251, 0, 252, 0, 0, 253, 0, 0, 254,
	375, 489, 255, 490, 821, 256, 257, 258, 259, 260,
	0, 261, 822, 262, 378, 263, 0, 264, 265, 266,
	267, 268, 269, 852, 270, 271, 0, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 0,
	284, 491, 285, 286, 775, 287, 0, 291, 292, 293,
	294, 0, 296, 381, 295, 297, 298, 815, 299, 288,
	289, 300, 492, 301, 853, 383, 302, 0, 309, 303,
	304, 290, 305, 308, 854, 306, 307, 823, 0, 310,
	0, 311, 312, 313, 314, 315, 316, 317, 0, 386,
	855, 856, 0, 0, 318, 319, 824, 825, 796, 320,
	321, 322, 323, 0, 0, 324, 325, 326, 327, 816,
	328, 0, 391, 329, 330, 331, 392, 857, 0, 0,
	332, 0, 0, 0, 0, 333, 334, 335, 336, 337,
	770, 0, 0, 0, 0, 0, 768, 0, 0, 0,
	0, 766, 767, 0, 0, 0, 0, 0, 0, 0,
	776, 1522, 0, 0, 0, 0, 0, 1408, 779, 801,
	790, 791, 788, 789, 780, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 180, 0, 181, 0,
	0, 0, 0, 818, 783, 0, 0, 0, 182, 183,
	184, 339, 833, 341, 834, 185, 835, 836, 0, 186,
	345, 346, 187, 188, 189, 786, 817, 837, 838, 349,
	0, 190, 829, 0, 809, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 0, 480, 198, 199, 200,
	0, 810, 811, 813, 0, 812, 814, 201, 202, 401,
	203, 839, 204, 840, 841, 0, 205, 0, 206, 0,
	207, 0, 0, 832, 209, 0, 210, 0, 0, 0,
	774, 211, 212, 213, 819, 820, 797, 0, 0, 214,
	215, 842, 843, 844, 0, 216, 0, 217, 0, 0,
	481, 218, 0, 219, 830, 0, 361, 0, 220, 221,
	222, 223, 224, 826, 828, 483, 0, 228, 0, 225,
	0, 482, 226, 845, 227, 846, 847, 848, 849, 850,
	0, 808, 0, 484, 229, 230, 231, 485, 232, 233,
	234, 0, 236, 235, 0, 831, 486, 237, 487, 0,
	238, 0, 0, 239, 0, 240, 241, 242, 244, 372,
	243, 488, 245, 246, 248, 247, 769, 0, 798, 827,
	249, 851, 250, 251, 0, 252, 0, 0, 253, 0,
	0, 254, 375, 489, 255, 490, 821, 256, 257, 258,
	259, 260, 0, 261, 822, 262, 378, 263, 0, 264,
	265, 266, 267, 268, 269, 852, 270, 271, 0, 272,
	273, 274, 275, 276, 278, 279, 277, 280, 281, 282,
	283, 0, 284, 491, 285, 286, 775, 287, 0, 291,
	292, 293, 294, 0, 296, 381, 295, 297, 298, 815,
	299, 288, 289, 300, 492, 301, 853, 383, 302, 0,
	309, 303, 304, 290, 305, 308, 854, 306, 307, 823,
	0, 310, 0, 311, 312, 313, 314, 315, 316, 317,
	0, 386, 855, 856, 0, 0, 318, 319, 824, 825,
	796, 320, 321, 322, 323, 0, 0, 324, 325, 326,
	327, 816, 328, 0, 391, 329, 330, 331, 392, 857,
	0, 0, 332, 0, 0, 0, 0, 333, 334, 335,
	336, 337, 770, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 0, 766, 767, 801, 790, 791, 788, 789,
	780, 0, 776, 0, 0, 0, 0, 0, 0, 0,
	779, 179, 180, 1365, 181, 0, 0, 0, 0, 818,
	783, 0, 0, 0, 182, 183, 184, 339, 833, 341,
	834, 185, 835, 836, 0, 186, 345, 346, 187, 188,
	189, 786, 817, 837, 838, 349, 0, 190, 829, 0,
	809, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 0, 480, 198, 199, 200, 0, 810, 811, 813,
	0, 812, 814, 201, 202, 401, 203, 839, 204, 840,
	841, 0, 205, 0, 206, 0, 207, 0, 0, 832,
	209, 0, 210, 0, 0, 0, 774, 211, 212, 213,
	819, 820, 797, 0, 0, 214, 215, 842, 843, 844,
	0, 216, 0, 217, 0, 0, 481, 218, 0, 219,
	830, 0, 361, 0, 220, 221, 222, 223, 224, 826,
	828, 483, 0, 228, 0, 225, 0, 482, 226, 845,
	227, 846, 847, 848, 849, 850, 0, 808, 0, 484,
	229, 230, 231, 485, 232, 233, 234, 0, 236, 235,
	0, 831, 486, 237, 487, 0, 238, 0, 0, 239,
	0, 240, 241, 242, 244, 372, 243, 488, 245, 246,
	248, 247, 769, 0, 798, 827, 249, 851, 250, 251,
	0, 252, 0, 0, 253, 0, 0, 254, 375, 489,
	255, 490, 821, 256, 257, 258, 259, 260, 0, 261,
	822, 262, 378, 263, 0, 264, 265, 266, 267, 268,
	269, 852, 270, 271, 0, 272, 273, 274, 275, 276,
	278, 279, 277, 280, 281, 282, 283, 0, 284, 491,
	285, 286, 775, 287, 0, 291, 292, 293, 294, 0,
	296, 381, 295, 297, 298, 815, 299, 288, 289, 300,
	492, 301, 853, 383, 302, 0, 309, 303, 304, 290,
	305, 308, 854, 306, 307, 823, 0, 310, 0, 311,
	312, 313, 314, 315, 316, 317, 0, 386, 855, 856,
	0, 0, 318, 319, 824, 825, 796, 320, 321, 322,
	323, 0, 0, 324, 325, 326, 327, 816, 328, 0,
	391, 329, 330, 331, 392, 857, 0, 0, 332, 0,
	0, 0, 0, 333, 334, 335, 336, 337, 770, 0,
	0, 0, 0, 0, 768, 0, 0, 0, 0, 766,
	767, 0, 0, 0, 0, 0, 0, 865, 776, 801,
	790, 791, 788, 789, 780, 0, 779, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 180, 0, 181, 0,
	0, 0, 0, 818, 783, 0, 0, 0, 182, 183,
	184, 339, 833, 341, 834, 185, 835, 836, 0, 186,
	345, 346, 187, 188, 189, 786, 817, 837, 838, 349,
	0, 190, 829, 0, 809, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 0, 480, 198, 199, 200,
	0, 810, 811, 813, 0, 812, 814, 201, 202, 401,
	203, 839, 204, 840, 841, 0, 205, 0, 206, 0,
	207, 0, 0, 832, 209, 0, 210, 0, 0, 0,
	774, 211, 212, 213, 819, 820, 797, 0, 0, 214,
	215, 842, 843, 844, 0, 216, 0, 217, 0, 0,
	481, 218, 0, 219, 830, 0, 361, 0, 220, 221,
	222, 223, 224, 826, 828, 483, 0, 228, 0, 225,
	0, 482, 226, 845, 227, 846, 847, 848, 849, 850,
	0, 808, 0, 484, 229, 230, 231, 485, 232, 233,
	234, 0, 236, 235, 0, 831, 486, 237, 487, 0,
	238, 0, 0, 239, 0, 240, 241, 242, 244, 372,
	243, 488, 245, 246, 248, 247, 769, 0, 798, 827,
	249, 851, 250, 251, 0, 252, 0, 0, 253, 0,
	0, 254, 375, 489, 255, 490, 821, 256, 257, 258,
	259, 260, 0, 261, 822, 262, 378, 263, 0, 264,
	265, 266, 267, 268, 269, 852, 270, 271, 0, 272,
	273, 274, 275, 276, 278, 279, 277, 280, 281, 282,
	283, 0, 284, 491, 285, 286, 775, 287, 0, 291,
	292, 293, 294, 0, 296, 381, 295, 297, 298, 815,
	299, 288, 289, 300, 492, 301, 853, 383, 302, 0,
	309, 303, 304, 290, 305, 308, 854, 306, 307, 823,
	0, 310, 0, 311, 312, 313, 314, 315, 316, 317,
	0, 386, 855, 856, 0, 0, 318, 319, 824, 825,
	796, 320, 321, 322, 323, 0, 0, 324, 325, 326,
	327, 816, 328, 0, 391, 329, 330, 331, 392, 857,
	0, 0, 332, 0, 0, 0, 0, 333, 334, 335,
	336, 337, 770, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 0, 766, 767, 0, 0, 0, 0, 0,
	0, 764, 776, 801, 790, 791, 788, 789, 780, 0,
	779, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	180, 0, 181, 0, 0, 0, 0, 818, 783, 0,
	0, 0, 182, 183, 184, 339, 833, 341, 834, 185,
	835, 836, 0, 186, 345, 346, 187, 188, 189, 786,
	817, 837, 838, 349, 0, 190, 829, 0, 809, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 0,
	480, 198, 199, 200, 0, 810, 811, 813, 0, 812,
	814, 201, 202, 401, 203, 839, 204, 840, 841, 0,
	205, 0, 206, 0, 207, 0, 0, 832, 209, 0,
	210, 0, 0, 0, 774, 211, 212, 213, 819, 820,
	797, 0, 0, 214, 215, 842, 843, 844, 0, 216,
	0, 217, 0, 0, 481, 218, 0, 219, 830, 0,
	361, 0, 220, 221, 222, 223, 224, 826, 828, 483,
	0, 228, 0, 225, 0, 482, 226, 845, 227, 846,
	847, 848, 849, 850, 0, 808, 0, 484, 229, 230,
	231, 485, 232, 233, 234, 0, 236, 235, 0, 831,
	486, 237, 487, 0, 238, 0, 0, 239, 0, 240,
	241, 242, 244, 372, 243, 488, 245, 246, 248, 247,
	769, 0, 798, 827, 249, 851, 250, 251, 0, 252,
	0, 0, 253, 0, 0, 254, 375, 489, 255, 490,
	821, 256, 257, 258, 259, 260, 0, 261, 822, 262,
	378, 263, 0, 264, 265, 266, 267, 268, 269, 852,
	270, 271, 0, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 0, 284, 491, 285, 286,
	775, 287, 0, 291, 292, 293, 294, 0, 296, 381,
	295, 297, 298, 815, 299, 288, 289, 300, 492, 301,
	853, 383, 302, 0, 309, 303, 304, 290, 305, 308,
	854, 306, 307, 823, 0, 310, 0, 311, 312, 313,
	314, 315, 316, 317, 0, 386, 855, 856, 0, 0,
	318, 319, 824, 825, 796, 320, 321, 322, 323, 0,
	0, 324, 325, 326, 327, 816, 328, 0, 391, 329,
	330, 331, 392, 857, 0, 0, 332, 0, 0, 0,
	0, 333, 334, 335, 336, 337, 770, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 0, 766, 767, 801,
	790, 791, 788, 789, 780, 0, 776, 0, 0, 0,
	0, 0, 0, 0, 779, 179, 180, 0, 181, 0,
	0, 0, 0, 818, 783, 0, 0, 0, 182, 183,
	184, 339, 833, 341, 834, 185, 835, 836, 0, 186,
	345, 346, 187, 188, 189, 786, 817, 837, 838, 349,
	0, 190, 829, 0, 809, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 0, 480, 198, 199, 2451,
	0, 810, 811, 813, 0, 812, 814, 201, 202, 401,
	203, 839, 204, 840, 841, 0, 205, 0, 206, 0,
	207, 0, 0, 832, 209, 0, 210, 0, 0, 0,
	774, 211, 212, 213, 819, 820, 797, 0, 0, 214,
	215, 842, 843, 844, 0, 216, 0, 217, 0, 0,
	481, 218, 0, 219, 830, 0, 361, 0, 220, 221,
	222, 223, 224, 826, 828, 483, 0, 228, 0, 225,
	0, 482, 226, 845, 227, 846, 847, 848, 849, 850,
	0, 808, 0, 484, 229, 230, 231, 485, 232, 233,
	234, 0, 236, 235, 0, 831, 486, 237, 487, 0,
	238, 0, 0, 239, 0, 240, 241, 242, 244, 372,
	243, 488, 245, 246, 248, 247, 769, 0, 798, 827,
	249, 851, 250, 251, 0, 252, 0, 0, 253, 0,
	0, 254, 375, 489, 255, 490, 821, 256, 257, 258,
	259, 260, 0, 261, 822, 262, 378, 263, 0, 264,
	265, 266, 267, 268, 269, 852, 270, 271, 0, 272,
	273, 274, 275, 276, 278, 279, 277, 280, 281, 282,
	283, 0, 284, 491, 285, 286, 775, 287, 0, 291,
	292, 293, 294, 0, 296, 381, 295, 297, 298, 815,
	299, 288, 289, 300, 492, 301, 853, 383, 302, 0,
	309, 303, 304, 290, 305, 308, 854, 306, 307, 823,
	0, 310, 0, 311, 312, 313, 314, 315, 316, 317,
	0, 386, 855, 856, 0, 0, 318, 319, 824, 825,
	796, 320, 321, 2450, 323, 0, 0, 324, 325, 326,
	327, 816, 328, 0, 391, 329, 330, 331, 392, 857,
	0, 0, 332, 0, 0, 0, 0, 333, 334, 335,
	336, 337, 770, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 0, 766, 767, 801, 790, 791, 788, 789,
	780, 0, 776, 0, 0, 0, 0, 0, 0, 0,
	779, 179, 180, 0, 181, 0, 0, 0, 0, 818,
	783, 0, 0, 0, 182, 183, 184, 2449, 833, 341,
	834, 185, 835, 836, 0, 186, 345, 346, 187, 188,
	189, 786, 817, 837, 838, 349, 0, 190, 829, 0,
	809, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 0, 480, 198, 199, 2451, 0, 810, 811, 813,
	0, 812, 814, 201, 202, 401, 203, 839, 204, 840,
	841, 0, 205, 0, 206, 0, 207, 0, 0, 832,
	209, 0, 210, 0, 0, 0, 774, 211, 212, 213,
	819, 820, 797, 0, 0, 214, 215, 842, 843, 844,
	0, 216, 0, 217, 0, 0, 481, 218, 0, 219,
	830, 0, 361, 0, 220, 221, 222, 223, 224, 826,
	828, 483, 0, 228, 0, 225, 0, 482, 226, 845,
	227, 846, 847, 848, 849, 850, 0, 808, 0, 484,
	229, 230, 231, 485, 232, 233, 234, 0, 236, 235,
	0, 831, 486, 237, 487, 0, 238, 0, 0, 239,
	0, 240, 241, 242, 244, 372, 243, 488, 245, 246,
	248, 247, 769, 0, 798, 827, 249, 851, 250, 251,
	0, 252, 0, 0, 253, 0, 0, 254, 375, 489,
	255, 490, 821, 256, 257, 258, 259, 260, 0, 261,
	822, 262, 378, 263, 0, 264, 265, 266, 267, 268,
	269, 852, 270, 271, 0, 272, 273, 274, 275, 276,
	278, 279, 277, 280, 281, 282, 283, 0, 284, 491,
	285, 286, 775, 287, 0, 291, 292, 293, 294, 0,
	296, 381, 295, 297, 298, 815, 299, 288, 289, 300,
	492, 301, 853, 383, 302, 0, 309, 303, 304, 290,
	305, 308, 854, 306, 307, 823, 0, 310, 0, 311,
	312, 313, 314, 315, 316, 317, 0, 386, 855, 856,
	0, 0, 318, 319, 824, 825, 796, 320, 321, 2450,
	323, 0, 0, 324, 325, 326, 327, 816, 328, 0,
	391, 329, 330, 331, 392, 857, 0, 0, 332, 0,
	0, 0, 0, 333, 334, 335, 336, 337, 770, 0,
	0, 0, 0, 0, 768, 0, 0, 0, 0, 766,
	767, 801, 790, 791, 788, 789, 780, 0, 776, 0,
	0, 0, 0, 0, 0, 0, 779, 179, 180, 0,
	181, 0, 0, 0, 0, 818, 783, 0, 0, 0,
	182, 183, 184, 339, 833, 341, 834, 185, 835, 836,
	0, 186, 345, 346, 187, 188, 189, 786, 817, 837,
	838, 349, 0, 190, 829, 0, 809, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 0, 480, 198,
	199, 200, 0, 810, 811, 813, 0, 812, 814, 201,
	202, 401, 203, 839, 204, 840, 841, 0, 205, 0,
	206, 0, 207, 0, 0, 832, 209, 0, 210, 0,
	0, 0, 774, 211, 212, 213, 819, 820, 797, 0,
	0, 214, 215, 842, 843, 844, 0, 216, 0, 217,
	0, 0, 481, 218, 0, 219, 830, 0, 361, 0,
	220, 221, 222, 223, 224, 826, 828, 483, 0, 228,
	0, 225, 0, 482, 226, 845, 227, 846, 847, 848,
	849, 850, 0, 808, 0, 484, 229, 230, 231, 485,
	232, 233, 234, 0, 236, 235, 0, 831, 486, 237,
	487, 0, 238, 0, 0, 239, 0, 240, 241, 242,
	244, 372, 243, 488, 245, 246, 248, 247, 769, 0,
	798, 827, 249, 851, 250, 251, 0, 252, 0, 0,
	253, 0, 0, 254, 375, 489, 255, 490, 821, 256,
	257, 258, 259, 260, 0, 261, 822, 262, 378, 263,
	0, 264, 265, 266, 267, 268, 269, 852, 270, 271,
	0, 272, 273, 274, 275, 276, 278, 279, 277, 280,
	281, 282, 283, 0, 284, 491, 285, 286, 775, 287,
	0, 291, 292, 293, 294, 0, 296, 381, 295, 297,
	298, 815, 299, 288, 289, 300, 492, 301, 853, 383,
	302, 0, 309, 303, 304, 290, 305, 308, 854, 306,
	307, 823, 0, 310, 0, 311, 312, 313, 314, 315,
	316, 317, 0, 386, 855, 856, 0, 0, 318, 319,
	824, 825, 796, 320, 321, 322, 323, 0, 0, 324,
	325, 326, 327, 816, 328, 0, 391, 329, 330, 331,
	392, 857, 0, 0, 332, 0, 0, 0, 0, 333,
	334, 335, 336, 337, 770, 0, 0, 0, 0, 0,
	768, 0, 0, 0, 0, 766, 767, 801, 790, 791,
	788, 789, 780, 0, 776, 0, 0, 0, 0, 0,
	0, 0, 779, 179, 180, 0, 181, 0, 0, 0,
	0, 818, 783, 0, 0, 0, 182, 183, 184, 339,
	833, 341, 834, 185, 835, 836, 0, 186, 345, 346,
	187, 188, 189, 786, 817, 837, 838, 349, 0, 190,
	829, 0, 809, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 0, 480, 198, 199, 200, 0, 810,
	811, 813, 0, 812, 814, 201, 202, 401, 203, 839,
	204, 840, 841, 0, 205, 0, 206, 0, 207, 0,
	0, 832, 209, 0, 210, 0, 0, 0, 774, 211,
	212, 213, 819, 820, 797, 0, 0, 214, 215, 842,
	843, 844, 0, 216, 0, 217, 0, 0, 481, 218,
	0, 219, 830, 0, 361, 0, 220, 221, 222, 223,
	224, 826, 828, 483, 0, 228, 0, 225, 0, 482,
	226, 845, 227, 846, 847, 848, 849, 850, 0, 808,
	0, 484, 229, 230, 231, 485, 232, 233, 234, 0,
	236, 235, 0, 831, 486, 237, 487, 0, 238, 0,
	0, 239, 0, 240, 241, 242, 244, 372, 243, 488,
	245, 246, 248, 247, 0, 0, 798, 827, 249, 851,
	250, 251, 0, 252, 0, 0, 253, 0, 0, 254,
	375, 489, 255, 490, 821, 256, 257, 258, 259, 260,
	0, 261, 822, 262, 378, 263, 0, 264, 265, 266,
	267, 268, 269, 852, 270, 271, 0, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 0,
	284, 491, 285, 286, 1584, 287, 0, 291, 292, 293,
	294, 0, 296, 381, 295, 297, 298, 815, 299, 288,
	289, 300, 492, 301, 853, 383, 302, 0, 309, 303,
	304, 290, 305, 308, 854, 306, 307, 823, 0, 310,
	0, 311, 312, 313, 314, 315, 316, 317, 0, 386,
	855, 856, 0, 0, 318, 319, 824, 825, 796, 320,
	321, 322, 323, 0, 0, 324, 325, 326, 327, 816,
	328, 0, 391, 329, 330, 331, 392, 857, 0, 0,
	332, 0, 0, 0, 0, 333, 334, 335, 336, 337,
	801, 790, 791, 788, 789, 780, 1582, 0, 0, 0,
	0, 1580, 1581, 0, 0, 0, 179, 180, 0, 181,
	1583, 0, 0, 0, 818, 783, 0, 0, 779, 182,
	183, 184, 339, 833, 341, 834, 185, 835, 836, 0,
	186, 345, 346, 187, 188, 189, 0, 817, 837, 838,
	349, 0, 190, 829, 0, 809, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 0, 480, 198, 199,
	200, 0, 810, 811, 813, 0, 812, 814, 201, 202,
	401, 203, 839, 204, 840, 841, 0, 205, 0, 206,
	0, 207, 0, 0, 832, 209, 0, 210, 0, 0,
	0, 354, 211, 212, 213, 819, 820, 797, 0, 0,
	214, 215, 842, 843, 844, 0, 216, 0, 217, 0,
	0, 481, 218, 0, 219, 830, 0, 361, 0, 220,
	221, 222, 223, 224, 826, 828, 483, 0, 228, 0,
	225, 0, 482, 226, 845, 227, 846, 847, 848, 849,
	850, 0, 808, 0, 484, 229, 230, 231, 485, 232,
	233, 234, 0, 236, 235, 0, 831, 486, 237, 487,
	0, 238, 0, 0, 239, 0, 240, 241, 242, 244,
	372, 243, 488, 245, 246, 248, 247, 0, 0, 798,
	827, 249, 851, 250, 251, 0, 252, 0, 0, 253,
	0, 0, 254, 375, 489, 255, 490, 821, 256, 257,
	258, 259, 260, 0, 261, 822, 262, 378, 263, 0,
	264, 265, 266, 267, 268, 269, 852, 270, 271, 0,
	272, 273, 274, 275, 276, 278, 279, 277, 280, 281,
	282, 283, 0, 284, 491, 285, 286, 1584, 287, 0,
	291, 292, 293, 294, 0, 296, 381, 295, 297, 298,
	815, 299, 288, 289, 300, 492, 301, 853, 383, 302,
	0, 309, 303, 304, 290, 305, 308, 854, 306, 307,
	823, 0, 310, 0, 311, 312, 313, 314, 315, 316,
	317, 0, 386, 855, 856, 0, 0, 318, 319, 824,
	825, 796, 320, 321, 322, 323, 0, 0, 324, 325,
	326, 327, 816, 328, 0, 391, 329, 330, 331, 392,
	857, 0, 0, 332, 0, 0, 0, 0, 333, 334,
	335, 336, 337, 801, 790, 791, 788, 789, 780, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	180, 0, 181, 1583, 0, 0, 0, 818, 783, 0,
	0, 779, 182, 183, 184, 0, 833, 341, 834, 185,
	835, 836, 0, 186, 345, 346, 187, 188, 189, 786,
	817, 837, 838, 349, 0, 190, 829, 0, 809, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 0,
	480, 198, 199, 2451, 0, 810, 811, 813, 0, 812,
	814, 201, 202, 401, 203, 839, 204, 840, 841, 0,
	205, 0, 206, 0, 207, 0, 0, 832, 209, 0,
	210, 0, 0, 0, 774, 211, 212, 213, 819, 820,
	797, 0, 0, 214, 215, 842, 843, 844, 0, 216,
	0, 217, 0, 0, 481, 218, 0, 219, 830, 0,
	361, 0, 220, 221, 222, 223, 224, 826, 828, 0,
	0, 228, 0, 225, 0, 482, 226, 845, 227, 846,
	847, 848, 849, 850, 0, 808, 0, 0, 229, 230,
	231, 485, 232, 233, 234, 0, 236, 235, 0, 831,
	486, 237, 0, 0, 238, 0, 0, 239, 0, 240,
	241, 242, 244, 372, 243, 488, 245, 246, 248, 247,
	769, 0, 798, 827, 249, 851, 250, 251, 0, 252,
	0, 0, 253, 0, 0, 254, 375, 489, 255, 490,
	821, 256, 257, 258, 259, 260, 0, 261, 822, 262,
	378, 263, 0, 264, 265, 266, 267, 268, 269, 852,
	270, 271, 0, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 0, 284, 491, 285, 286,
	775, 287, 0, 291, 292, 293, 294, 0, 296, 381,
	295, 297, 298, 815, 299, 288, 289, 300, 0, 301,
	853, 383, 302, 0, 309, 303, 304, 290, 305, 308,
	854, 306, 307, 823, 0, 310, 0, 311, 312, 313,
	314, 315, 316, 317, 0, 386, 855, 856, 0, 0,
	318, 319, 824, 825, 796, 320, 321, 2450, 323, 0,
	0, 324, 325, 326, 327, 816, 328, 0, 391, 329,
	330, 331, 392, 857, 0, 0, 332, 0, 0, 0,
	0, 333, 334, 335, 336, 337, 801, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 766, 767, 0,
	0, 0, 179, 180, 0, 181, 776, 0, 0, 0,
	818, 0, 0, 0, 779, 182, 183, 184, 339, 340,
	341, 342, 185, 343, 344, 0, 186, 345, 346, 187,
	188, 189, 0, 817, 347, 348, 349, 0, 190, 829,
	0, 809, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 0, 480, 198, 199, 200, 0, 810, 811,
	813, 0, 812, 814, 201, 202, 401, 203, 351, 204,
	352, 353, 0, 205, 0, 206, 0, 207, 0, 0,
	208, 209, 0, 210, 0, 0, 0, 354, 211, 212,
	213, 819, 820, 0, 0, 0, 214, 215, 357, 358,
	359, 0, 216, 0, 217, 0, 0, 481, 218, 0,
	219, 830, 0, 361, 0, 220, 221, 222, 223, 224,
	826, 828, 483, 0, 228, 0, 225, 0, 482, 226,
	364, 227, 365, 366, 367, 368, 369, 0, 370, 0,
	484, 229, 230, 231, 485, 232, 233, 234, 0, 236,
	235, 0, 831, 486, 237, 487, 0, 238, 0, 0,
	239, 0, 240, 241, 242, 244, 372, 243, 488, 245,
	246, 248, 247, 0, 0, 0, 827, 249, 374, 250,
	251, 0, 252, 0, 0, 253, 0, 0, 254, 375,
	489, 255, 490, 821, 256, 257, 258, 259, 260, 0,
	261, 822, 262, 378, 263, 0, 264, 265, 266, 267,
	268, 269, 379, 270, 271, 0, 272, 273, 274, 275,
	276, 278, 279, 277, 280, 281, 282, 283, 0, 284,
	491, 285, 286, 380, 287, 0, 291, 292, 293, 294,
	0, 296, 381, 295, 297, 298, 815, 299, 288, 289,
	300, 492, 301, 382, 383, 302, 0, 309, 303, 304,
	290, 305, 308, 384, 306, 307, 823, 0, 310, 0,
	311, 312, 313, 314, 315, 316, 317, 0, 386, 387,
	388, 0, 0, 318, 319, 824, 825, 0, 320, 321,
	322, 323, 0, 0, 324, 325, 326, 327, 816, 328,
	0, 391, 329, 330, 331, 392, 393, 0, 0, 332,
	916, 0, 697, 0, 333, 334, 335, 336, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 180,
	0, 181, 0, 0, 0, 0, 338, 0, 0, 1991,
	0, 182, 183, 184, 339, 340, 341, 342, 185, 343,
	344, 0, 186, 345, 346, 187, 188, 189, 0, 0,
	347, 348, 349, 0, 190, 350, 0, 479, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 0, 480,
	198, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	201, 202, 401, 203, 351, 204, 352, 353, 0, 205,
	0, 206, 0, 207, 0, 0, 208, 209, 0, 210,
	0, 0, 0, 354, 211, 212, 213, 355, 356, 0,
	0, 0, 214, 215, 357, 358, 359, 0, 216, 0,
	217, 0, 0, 481, 218, 0, 219, 360, 0, 361,
	0, 220, 221, 222, 223, 224, 362, 363, 483, 0,
	228, 0, 225, 0, 482, 226, 364, 227, 365, 366,
	367, 368, 369, 0, 370, 0, 484, 229, 230, 231,
	485, 232, 233, 234, 0, 236, 235, 0, 371, 486,
	237, 487, 0, 238, 0, 0, 239, 0, 240, 241,
	242, 244, 372, 243, 488, 245, 246, 248, 247, 0,
	0, 0, 373, 249, 374, 250, 251, 0, 252, 0,
	0, 253, 0, 0, 254, 375, 489, 255, 490, 376,
	256, 257, 258, 259, 260, 0, 261, 377, 262, 378,
	263, 0, 264, 265, 266, 267, 268, 269, 379, 270,
	271, 0, 272, 273, 274, 275, 276, 278, 279, 277,
	280, 281, 282, 283, 0, 284, 491, 285, 286, 380,
	287, 0, 291, 292, 293, 294, 135, 296, 381, 295,
	297, 298, 0, 299, 288, 289, 300, 492, 301, 382,
	383, 302, 0, 309, 303, 304, 290, 305, 308, 384,
	306, 307, 385, 0, 310, 137, 311, 312, 313, 314,
	315, 316, 317, 0, 386, 387, 388, 0, 0, 318,
	319, 389, 390, 0, 320, 321, 322, 323, 0, 0,
	324, 325, 326, 327, 0, 328, 0, 391, 329, 330,
	331, 919, 393, 0, 0, 332, 0, 0, 0, 129,
	333, 334, 335, 336, 337, 0, 130, 697, 694, 0,
	695, 690, 685, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 180, 122, 181, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 182, 183, 184, 339,
	340, 341, 342, 185, 343, 344, 0, 186, 345, 346,
	187, 188, 189, 0, 0, 347, 348, 349, 0, 190,
	350, 0, 479, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 0, 480, 198, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 201, 202, 401, 203, 351,
	204, 352, 353, 1329, 205, 0, 206, 0, 207, 0,
	0, 208, 209, 0, 210, 0, 0, 0, 354, 211,
	212, 213, 355, 356, 687, 0, 0, 214, 215, 357,
	358, 359, 0, 216, 0, 217, 0, 0, 481, 218,
	0, 219, 360, 0, 361, 0, 220, 221, 222, 223,
	224, 362, 363, 483, 0, 228, 0, 225, 0, 482,
	226, 364, 227, 365, 366, 367, 368, 369, 0, 370,
	0, 484, 229, 230, 231, 485, 232, 233, 234, 0,
	236, 235, 0, 371, 486, 237, 487, 0, 238, 0,
	0, 239, 0, 240, 241, 242, 244, 372, 243, 488,
	245, 246, 248, 247, 0, 0, 0, 373, 249, 374,
	250, 251, 0, 252, 688, 0, 253, 0, 0, 254,
	375, 489, 255, 490, 376, 256, 257, 258, 259, 260,
	0, 261, 377, 262, 378, 263, 0, 264, 265, 266,
	267, 268, 269, 379, 270, 271, 0, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 0,
	284, 491, 285, 286, 380, 287, 0, 291, 292, 293,
	294, 0, 296, 381, 295, 297, 298, 0, 299, 288,
	289, 300, 492, 301, 382, 383, 302, 0, 309, 303,
	304, 290, 305, 308, 384, 306, 307, 385, 0, 310,
	0, 311, 312, 313, 314, 315, 316, 317, 0, 386,
	387, 388, 0, 0, 318, 319, 389, 390, 686, 320,
	321, 322, 323, 0, 0, 324, 325, 326, 327, 0,
	328, 0, 391, 329, 330, 331, 392, 393, 0, 0,
	332, 0, 0, 0, 0, 333, 334, 335, 336, 337,
	697, 694, 0, 695, 690, 685, 0, 0, 0, 0,
	0, 696, 691, 0, 0, 0, 179, 180, 0, 181,
	0, 0, 0, 0, 338, 0, 0, 0, 0, 182,
	183, 184, 339, 340, 341, 342, 185, 343, 344, 0,
	186, 345, 346, 187, 188, 189, 0, 0, 347, 348,
	349, 0, 190, 350, 0, 479, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 0, 480, 198, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 201, 202,
	401, 203, 351, 204, 352, 353, 1326, 205, 0, 206,
	0, 207, 0, 0, 208, 209, 0, 210, 0, 0,
	0, 354, 211, 212, 213, 355, 356, 687, 0, 0,
	214, 215, 357, 358, 359, 0, 216, 0, 217, 0,
	0, 481, 218, 0, 219, 360, 0, 361, 0, 220,
	221, 222, 223, 224, 362, 363, 483, 0, 228, 0,
	225, 0, 482, 226, 364, 227, 365, 366, 367, 368,
	369, 0, 370, 0, 484, 229, 230, 231, 485, 232,
	233, 234, 0, 236, 235, 0, 371, 486, 237, 487,
	0, 238, 0, 0, 239, 0, 240, 241, 242, 244,
	372, 243, 488, 245, 246, 248, 247, 0, 0, 0,
	373, 249, 374, 250, 251, 0, 252, 688, 0, 253,
	0, 0, 254, 375, 489, 255, 490, 376, 256, 257,
	258, 259, 260, 0, 261, 377, 262, 378, 263, 0,
	264, 265, 266, 267, 268, 269, 379, 270, 271, 0,
	272, 273, 274, 275, 276, 278, 279, 277, 280, 281,
	282, 283, 0, 284, 491, 285, 286, 380, 287, 0,
	291, 292, 293, 294, 0, 296, 381, 295, 297, 298,
	0, 299, 288, 289, 300, 492, 301, 382, 383, 302,
	0, 309, 303, 304, 290, 305, 308, 384, 306, 307,
	385, 0, 310, 0, 311, 312, 313, 314, 315, 316,
	317, 0, 386, 387, 388, 0, 0, 318, 319, 389,
	390, 686, 320, 321, 322, 323, 0, 0, 324, 325,
	326, 327, 0, 328, 0, 391, 329, 330, 331, 392,
	393, 0, 0, 332, 0, 0, 0, 0, 333, 334,
	335, 336, 337, 697, 694, 0, 695, 690, 685, 0,
	0, 0, 0, 0, 696, 691, 0, 0, 0, 179,
	180, 0, 181, 0, 0, 0, 0, 338, 0, 0,
	0, 0, 182, 183, 184, 339, 340, 341, 342, 185,
	343, 344, 0, 186, 345, 346, 187, 188, 189, 0,
	0, 347, 348, 349, 0, 190, 350, 0, 479, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 0,
	480, 198, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 201, 202, 401, 203, 351, 204, 352, 353, 960,
	205, 0, 206, 0, 207, 0, 0, 208, 209, 0,
	210, 0, 0, 0, 354, 211, 212, 213, 355, 356,
	687, 0, 0, 214, 215, 357, 358, 359, 0, 216,
	0, 217, 0, 0, 481, 218, 0, 219, 360, 0,
	361, 0, 220, 221, 222, 223, 224, 362, 363, 483,
	0, 228, 0, 225, 0, 482, 226, 364, 227, 365,
	366, 367, 368, 369, 0, 370, 0, 484, 229, 230,
	231, 485, 232, 233, 234, 0, 236, 235, 0, 371,
	486, 237, 487, 0, 238, 0, 0, 239, 0, 240,
	241, 242, 244, 372, 243, 488, 245, 246, 248, 247,
	0, 0, 0, 373, 249, 374, 250, 251, 0, 252,
	688, 0, 253, 0, 0, 254, 375, 489, 255, 490,
	376, 256, 257, 258, 259, 260, 0, 261, 377, 262,
	378, 263, 0, 264, 265, 266, 267, 268, 269, 379,
	270, 271, 0, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 0, 284, 491, 285, 286,
	380, 287, 0, 291, 292, 293, 294, 0, 296, 381,
	295, 297, 298, 0, 299, 288, 289, 300, 492, 301,
	382, 383, 302, 0, 309, 303, 304, 290, 305, 308,
	384, 306, 307, 385, 0, 310, 0, 311, 312, 313,
	314, 315, 316, 317, 0, 386, 387, 388, 0, 0,
	318, 319, 389, 390, 686, 320, 321, 322, 323, 0,
	0, 324, 325, 326, 327, 0, 328, 0, 391, 329,
	330, 331, 392, 393, 0, 0, 332, 0, 0, 0,
	0, 333, 334, 335, 336, 337, 682, 0, 697, 694,
	0, 695, 690, 685, 0, 0, 0, 696, 691, 0,
	0, 0, 0, 0, 179, 180, 0, 181, 0, 0,
	0, 0, 338, 0, 0, 0, 0, 182, 183, 184,
	339, 340, 341, 342, 185, 343, 344, 0, 186, 345,
	346, 187, 188, 189, 0, 0, 347, 348, 349, 0,
	190, 350, 0, 479, 0, 191, 192, 193, 0, 194,
	0, 195, 196, 197, 0, 480, 198, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 201, 202, 401, 203,
	351, 204, 352, 353, 0, 205, 0, 206, 0, 207,
	0, 0, 208, 209, 0, 210, 0, 0, 0, 354,
	211, 212, 213, 355, 356, 687, 0, 0, 214, 215,
	357, 358, 359, 0, 216, 0, 217, 0, 0, 481,
	218, 0, 219, 360, 0, 361, 0, 220, 221, 222,
	223, 224, 362, 363, 483, 0, 228, 0, 225, 0,
	482, 226, 364, 227, 365, 366, 367, 368, 369, 0,
	370, 0, 484, 229, 230, 231, 485, 232, 233, 234,
	0, 236, 235, 0, 371, 486, 237, 487, 0, 238,
	0, 0, 239, 0, 240, 241, 242, 244, 372, 243,
	488, 245, 246, 248, 247, 0, 0, 0, 373, 249,
	374, 250, 251, 0, 252, 688, 0, 253, 0, 0,
	254, 375, 489, 255, 490, 376, 256, 257, 258, 259,
	260, 0, 261, 377, 262, 378, 263, 0, 264, 265,
	266, 267, 268, 269, 379, 270, 271, 0, 272, 273,
	274, 275, 276, 278, 279, 277, 280, 281, 282, 283,
	0, 284, 491, 285, 286, 380, 287, 0, 291, 292,
	293, 294, 0, 296, 381, 295, 297, 298, 0, 299,
	288, 289, 300, 492, 301, 382, 383, 302, 0, 309,
	303, 304, 290, 305, 308, 384, 306, 307, 385, 0,
	310, 0, 311, 312, 313, 314, 315, 316, 317, 0,
	386, 387, 388, 0, 0, 318, 319, 389, 390, 686,
	320, 321, 322, 323, 0, 0, 324, 325, 326, 327,
	0, 328, 0, 391, 329, 330, 331, 392, 393, 0,
	0, 332, 0, 0, 0, 0, 333, 334, 335, 336,
	337, 697, 694, 0, 695, 690, 685, 0, 0, 0,
	0, 0, 696, 691, 0, 0, 0, 179, 180, 0,
	181, 0, 0, 0, 0, 338, 0, 0, 0, 0,
	182, 183, 184, 339, 340, 341, 342, 185, 343, 344,
	0, 186, 345, 346, 187, 188, 189, 0, 0, 347,
	348, 349, 0, 190, 350, 0, 479, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 0, 480, 198,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 201,
	202, 401, 203, 351, 204, 352, 353, 0, 205, 0,
	206, 0, 207, 0, 0, 208, 209, 0, 210, 0,
	0, 0, 354, 211, 212, 213, 355, 356, 687, 0,
	0, 214, 215, 357, 358, 359, 0, 216, 0, 217,
	0, 0, 481, 218, 0, 219, 360, 0, 361, 0,
	220, 221, 222, 223, 224, 362, 363, 483, 0, 228,
	0, 225, 0, 482, 226, 364, 227, 365, 366, 367,
	368, 369, 0, 370, 0, 484, 229, 230, 231, 485,
	232, 233, 234, 0, 236, 235, 0, 371, 486, 237,
	487, 0, 238, 0, 0, 239, 0, 240, 241, 242,
	244, 372, 243, 488, 245, 246, 248, 247, 0, 0,
	0, 373, 249, 374, 250, 251, 0, 252, 688, 0,
	253, 0, 0, 254, 375, 489, 255, 490, 376, 256,
	257, 258, 259, 260, 0, 261, 377, 262, 378, 263,
	0, 264, 265, 266, 267, 268, 269, 379, 270, 271,
	0, 272, 273, 274, 275, 276, 278, 279, 277, 280,
	281, 282, 283, 0, 284, 491, 285, 286, 380, 287,
	0, 291, 292, 293, 294, 0, 296, 381, 295, 297,
	298, 0, 299, 288, 289, 300, 492, 301, 382, 383,
	302, 0, 309, 303, 304, 290, 305, 308, 384, 306,
	307, 385, 0, 310, 0, 311, 312, 313, 314, 315,
	316, 317, 0, 386, 387, 388, 0, 0, 318, 319,
	389, 390, 686, 320, 321, 322, 323, 0, 0, 324,
	325, 326, 327, 0, 328, 0, 391, 329, 330, 331,
	392, 393, 0, 679, 332, 176, 0, 0, 0, 333,
	334, 335, 336, 337, 0, 0, 0, 0, 0, 0,
	0, 179, 180, 0, 181, 696, 691, 0, 0, 338,
	0, 0, 0, 0, 182, 183, 184, 339, 340, 341,
	342, 185, 343, 344, 0, 186, 345, 346, 187, 188,
	189, 0, 0, 347, 348, 349, 0, 190, 350, 0,
	0, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 0, 0, 198, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 201, 202, 401, 203, 351, 204, 352,
	353, 0, 205, 0, 206, 0, 207, 0, 0, 208,
	209, 0, 210, 0, 0, 0, 354, 211, 212, 213,
	355, 356, 0, 0, 0, 214, 215, 357, 358, 359,
	0, 216, 0, 217, 0, 0, 0, 218, 0, 219,
	360, 0, 361, 0, 220, 221, 222, 223, 224, 362,
	363, 0, 0, 228, 0, 225, 0, 0, 226, 364,
	227, 365, 366, 367, 368, 369, 0, 370, 0, 0,
	229, 230, 231, 0, 232, 233, 234, 0, 236, 235,
	0, 371, 0, 237, 0, 0, 238, 0, 0, 239,
	0, 240, 241, 242, 244, 372, 243, 0, 245, 246,
	248, 247, 0, 0, 0, 373, 249, 374, 250, 251,
	0, 252, 0, 739, 253, 0, 0, 254, 375, 0,
	255, 0, 376, 256, 257, 258, 259, 260, 0, 261,
	377, 262, 378, 263, 0, 264, 265, 266, 267, 268,
	269, 379, 270, 271, 0, 272, 273, 274, 275, 276,
	278, 279, 277, 280, 281, 282, 283, 0, 284, 0,
	285, 286, 380, 287, 0, 291, 292, 293, 294, 135,
	296, 381, 295, 297, 298, 0, 299, 288, 289, 300,
	0, 301, 382, 383, 302, 0, 309, 303, 304, 290,
	305, 308, 384, 306, 307, 385, 0, 310, 137, 311,
	312, 313, 314, 315, 316, 317, 0, 386, 387, 388,
	0, 0, 318, 319, 389, 390, 0, 320, 321, 322,
	323, 0, 0, 324, 325, 326, 327, 0, 328, 0,
	391, 329, 330, 331, 919, 393, 0, 0, 332, 0,
	176, 0, 129, 333, 334, 335, 336, 337, 0, 130,
	0, 0, 0, 0, 0, 0, 179, 180, 0, 181,
	0, 0, 0, 0, 338, 0, 733, 0, 1068, 182,
	183, 184, 339, 340, 341, 342, 185, 343, 344, 0,
	186, 345, 346, 187, 188, 189, 0, 0, 347, 348,
	349, 0, 190, 350, 0, 0, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 0, 0, 198, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 201, 202,
	401, 203, 351, 204, 352, 353, 0, 205, 0, 206,
	0, 207, 0, 0, 208, 209, 0, 210, 0, 0,
	0, 354, 211, 212, 213, 355, 356, 0, 0, 0,
	214, 215, 357, 358, 359, 0, 216, 0, 217, 0,
	0, 0, 218, 0, 219, 360, 0, 361, 0, 220,
	221, 222, 223, 224, 362, 363, 0, 0, 228, 0,
	225, 0, 0, 226, 364, 227, 365, 366, 367, 368,
	369, 0, 370, 0, 0, 229, 230, 231, 0, 232,
	233, 234, 0, 236, 235, 0, 371, 0, 237, 0,
	0, 238, 0, 0, 239, 0, 240, 241, 242, 244,
	372, 243, 0, 245, 246, 248, 247, 0, 0, 0,
	373, 249, 374, 250, 251, 0, 252, 0, 739, 253,
	0, 0, 254, 375, 0, 255, 0, 376, 256, 257,
	258, 259, 260, 0, 261, 377, 262, 378, 263, 0,
	264, 265, 266, 267, 268, 269, 379, 270, 271, 0,
	272, 273, 274, 275, 276, 278, 279, 277, 280, 281,
	282, 283, 0, 284, 0, 285, 286, 380, 287, 0,
	291, 292, 293, 294, 135, 296, 381, 295, 297, 298,
	0, 299, 288, 289, 300, 0, 301, 382, 383, 302,
	0, 309, 303, 304, 290, 305, 308, 384, 306, 307,
	385, 0, 310, 137, 311, 312, 313, 314, 315, 316,
	317, 0, 386, 387, 388, 0, 0, 318, 319, 389,
	390, 0, 320, 321, 322, 323, 0, 0, 324, 325,
	326, 327, 0, 328, 0, 391, 329, 330, 331, 919,
	393, 0, 0, 332, 679, 0, 176, 129, 333, 334,
	335, 336, 337, 0, 130, 0, 0, 0, 0, 0,
	0, 0, 179, 180, 0, 181, 0, 0, 0, 0,
	338, 733, 0, 1068, 0, 182, 183, 184, 339, 340,
	341, 342, 185, 343, 344, 0, 186, 345, 346, 187,
	188, 189, 0, 0, 347, 348, 349, 0, 190, 350,
	0, 0, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 0, 0, 198, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 201, 202, 401, 203, 351, 204,
	352, 353, 0, 205, 0, 206, 0, 207, 0, 0,
	208, 209, 0, 210, 0, 0, 0, 354, 211, 212,
	213, 355, 356, 0, 0, 0, 214, 215, 357, 358,
	359, 0, 216, 0, 217, 0, 0, 0, 218, 0,
	219, 360, 0, 361, 0, 220, 221, 222, 223, 224,
	362, 363, 0, 0, 228, 0, 225, 0, 0, 226,
	364, 227, 365, 366, 367, 368, 369, 0, 370, 0,
	0, 229, 230, 231, 0, 232, 233, 234, 0, 236,
	235, 0, 371, 0, 237, 0, 0, 238, 0, 0,
	239, 0, 240, 241, 242, 244, 372, 243, 0, 245,
	246, 248, 247, 0, 0, 0, 373, 249, 374, 250,
	251, 0, 252, 0, 0, 253, 0, 0, 254, 375,
	0, 255, 0, 376, 256, 257, 258, 259, 260, 0,
	261, 377, 262, 378, 263, 0, 264, 265, 266, 267,
	268, 269, 379, 270, 271, 0, 272, 273, 274, 275,
	276, 278, 279, 277, 280, 281, 282, 283, 0, 284,
	0, 285, 286, 380, 287, 0, 291, 292, 293, 294,
	135, 296, 381, 295, 297, 298, 0, 299, 288, 289,
	300, 0, 301, 382, 383, 302, 0, 309, 303, 304,
	290, 305, 308, 384, 306, 307, 385, 0, 310, 137,
	311, 312, 313, 314, 315, 316, 317, 0, 386, 387,
	388, 0, 0, 318, 319, 389, 390, 0, 320, 321,
	322, 323, 0, 0, 324, 325, 326, 327, 0, 328,
	0, 391, 329, 330, 331, 919, 393, 0, 0, 332,
	1715, 0, 176, 129, 333, 334, 335, 336, 337, 0,
	130, 0, 0, 0, 0, 0, 0, 0, 179, 180,
	0, 181, 0, 0, 0, 0, 338, 0, 0, 122,
	0, 182, 183, 184, 339, 340, 341, 342, 185, 343,
	344, 0, 186, 345, 346, 187, 188, 189, 0, 0,
	347, 348, 349, 0, 190, 350, 0, 0, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 0, 0,
	198, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	201, 202, 401, 203, 351, 204, 352, 353, 0, 205,
	0, 206, 0, 207, 0, 0, 208, 209, 0, 210,
	0, 0, 0, 354, 211, 212, 213, 355, 356, 0,
	0, 0, 214, 215, 357, 358, 359, 0, 216, 0,
	217, 0, 0, 0, 218, 0, 219, 360, 0, 361,
	0, 220, 221, 222, 223, 224, 362, 363, 0, 0,
	228, 0, 225, 0, 0, 226, 364, 227, 365, 366,
	367, 368, 369, 0, 370, 0, 0, 229, 230, 231,
	0, 232, 233, 234, 0, 236, 235, 0, 371, 0,
	237, 0, 0, 238, 0, 0, 239, 0, 240, 241,
	242, 244, 372, 243, 0, 245, 246, 248, 247, 0,
	0, 0, 373, 249, 374, 250, 251, 0, 252, 0,
	739, 253, 0, 0, 254, 375, 0, 255, 0, 376,
	256, 257, 258, 259, 260, 0, 261, 377, 262, 378,
	263, 0, 264, 265, 266, 267, 268, 269, 379, 270,
	271, 0, 272, 273, 274, 275, 276, 278, 279, 277,
	280, 281, 282, 283, 0, 284, 0, 285, 286, 380,
	287, 0, 291, 292, 293, 294, 0, 296, 381, 295,
	297, 298, 0, 299, 288, 289, 300, 0, 301, 382,
	383, 302, 0, 309, 303, 304, 290, 305, 308, 384,
	306, 307, 385, 0, 310, 0, 311, 312, 313, 314,
	315, 316, 317, 0, 386, 387, 388, 0, 0, 318,
	319, 389, 390, 0, 320, 321, 322, 323, 0, 0,
	324, 325, 326, 327, 0, 328, 0, 391, 329, 330,
	331, 392, 393, 0, 0, 332, 732, 0, 176, 0,
	333, 334, 335, 336, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 180, 0, 181, 0, 0,
	0, 0, 338, 733, 0, 738, 0, 182, 183, 184,
	339, 340, 341, 342, 185, 343, 344, 0, 186, 345,
	346, 187, 188, 189, 0, 0, 347, 348, 349, 0,
	190, 350, 0, 0, 0, 191, 192, 193, 0, 194,
	0, 195, 196, 197, 0, 0, 198, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 201, 202, 401, 203,
	351, 204, 352, 353, 0, 205, 0, 206, 0, 207,
	0, 0, 208, 209, 0, 210, 0, 0, 0, 354,
	211, 212, 213, 355, 356, 0, 0, 0, 214, 215,
	357, 358, 359, 0, 216, 0, 217, 0, 0, 0,
	218, 0, 219, 360, 0, 361, 0, 220, 221, 222,
	223, 224, 362, 363, 0, 0, 228, 0, 225, 0,
	0, 226, 364, 227, 365, 366, 367, 368, 369, 0,
	370, 0, 0, 229, 230, 231, 0, 232, 233, 234,
	0, 236, 235, 0, 371, 0, 237, 0, 0, 238,
	0, 0, 239, 0, 240, 241, 242, 244, 372, 243,
	0, 245, 246, 248, 247, 0, 0, 0, 373, 249,
	374, 250, 251, 0, 252, 0, 739, 253, 0, 0,
	254, 375, 0, 255, 0, 376, 256, 257, 258, 259,
	260, 0, 261, 377, 262, 378, 263, 0, 264, 265,
	266, 267, 268, 269, 379, 270, 271, 0, 272, 273,
	274, 275, 276, 278, 279, 277, 280, 281, 282, 283,
	0, 284, 0, 285, 286, 380, 287, 0, 291, 292,
	293, 294, 0, 296, 381, 295, 297, 298, 0, 299,
	288, 289, 300, 0, 301, 382, 383, 302, 0, 309,
	303, 304, 290, 305, 308, 384, 306, 307, 385, 0,
	310, 0, 311, 312, 313, 314, 315, 316, 317, 0,
	386, 387, 388, 0, 0, 318, 319, 389, 390, 0,
	320, 321, 322, 323, 0, 0, 324, 325, 326, 327,
	0, 328, 0, 391, 329, 330, 331, 392, 393, 0,
	0, 332, 0, 176, 0, 0, 333, 334, 335, 336,
	337, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	180, 0, 181, 0, 0, 0, 0, 338, 0, 733,
	0, 738, 182, 183, 184, 339, 340, 341, 342, 185,
	343, 344, 0, 186, 345, 346, 187, 188, 189, 0,
	0, 347, 348, 349, 0, 190, 350, 0, 0, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 0,
	0, 198, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 201, 202, 401, 203, 351, 204, 352, 353, 0,
	205, 0, 206, 0, 207, 0, 0, 208, 209, 0,
	210, 0, 0, 0, 354, 211, 212, 213, 355, 356,
	0, 0, 0, 214, 215, 357, 358, 359, 0, 216,
	0, 217, 0, 0, 0, 218, 0, 219, 360, 0,
	361, 0, 220, 221, 222, 223, 224, 362, 363, 0,
	0, 228, 0, 225, 0, 0, 226, 364, 227, 365,
	366, 367, 368, 369, 0, 370, 0, 0, 229, 230,
	231, 0, 232, 233, 234, 0, 236, 235, 0, 371,
	0, 237, 0, 0, 238, 0, 0, 239, 0, 240,
	241, 242, 244, 372, 243, 0, 245, 246, 248, 247,
	0, 0, 0, 373, 249, 374, 250, 251, 0, 252,
	0, 739, 253, 0, 0, 254, 375, 0, 255, 0,
	376, 256, 257, 258, 259, 260, 0, 261, 377, 262,
	378, 263, 0, 264, 265, 266, 267, 268, 269, 379,
	270, 271, 0, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 0, 284, 0, 285, 286,
	380, 287, 0, 291, 292, 293, 294, 0, 296, 381,
	295, 297, 298, 0, 299, 288, 289, 300, 0, 301,
	382, 383, 302, 0, 309, 303, 304, 290, 305, 308,
	384, 306, 307, 385, 0, 310, 0, 311, 312, 313,
	314, 315, 316, 317, 0, 386, 387, 388, 0, 0,
	318, 319, 389, 390, 0, 320, 321, 322, 323, 0,
	0, 324, 325, 326, 327, 0, 328, 0, 391, 329,
	330, 331, 392, 393, 0, 0, 332, 0, 176, 0,
	0, 333, 334, 335, 336, 337, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 180, 0, 181, 0, 0,
	0, 0, 338, 0, 733, 0, 738, 182, 183, 184,
	339, 340, 341, 342, 185, 343, 344, 0, 186, 345,
	346, 187, 188, 189, 0, 0, 347, 348, 349, 0,
	190, 350, 0, 0, 0, 191, 192, 193, 0, 194,
	0, 195, 196, 197, 0, 0, 198, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 201, 202, 401, 203,
	351, 204, 352, 353, 0, 205, 0, 206, 0, 207,
	0, 0, 208, 209, 0, 210, 0, 0, 0, 354,
	211, 212, 213, 355, 356, 0, 0, 0, 214, 215,
	357, 358, 359, 0, 216, 0, 217, 0, 0, 0,
	218, 0, 219, 360, 0, 361, 0, 220, 221, 222,
	223, 224, 362, 363, 0, 0, 228, 0, 225, 0,
	0, 226, 364, 227, 365, 366, 367, 368, 369, 0,
	370, 0, 0, 229, 230, 231, 0, 232, 233, 234,
	0, 236, 235, 0, 371, 0, 237, 0, 0, 238,
	0, 0, 239, 0, 240, 241, 242, 244, 372, 243,
	0, 245, 246, 248, 247, 0, 0, 0, 373, 249,
	374, 250, 251, 0, 252, 0, 0, 253, 0, 0,
	254, 375, 0, 255, 0, 376, 256, 257, 258, 259,
	260, 0, 261, 377, 262, 378, 263, 0, 264, 265,
	266, 267, 268, 269, 379, 270, 271, 0, 272, 273,
	274, 275, 276, 278, 279, 277, 280, 281, 282, 283,
	0, 284, 0, 285, 286, 380, 287, 0, 291, 292,
	293, 294, 0, 296, 381, 295, 297, 298, 0, 299,
	288, 289, 300, 0, 301, 382, 383, 302, 0, 309,
	303, 304, 290, 305, 308, 384, 306, 307, 385, 0,
	310, 0, 311, 312, 313, 314, 315, 316, 317, 0,
	386, 387, 388, 0, 0, 318, 319, 389, 390, 0,
	320, 321, 322, 323, 0, 0, 324, 325, 326, 327,
	0, 328, 0, 391, 329, 330, 331, 392, 393, 0,
	0, 332, 0, 0, 176, 0, 333, 334, 335, 336,
	337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 180, 0, 181, 0, 0, 0, 0, 338, 0,
	0, 0, 1198, 182, 183, 184, 339, 340, 341, 342,
	185, 343, 344, 0, 186, 345, 346, 187, 188, 189,
	0, 0, 347, 348, 349, 0, 190, 350, 0, 0,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	0, 0, 198, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 201, 202, 401, 203, 351, 204, 352, 353,
	0, 205, 0, 206, 0, 207, 0, 0, 208, 209,
	0, 210, 0, 0, 0, 354, 211, 212, 213, 355,
	356, 0, 0, 0, 214, 215, 357, 358, 359, 0,
	216, 0, 217, 0, 0, 0, 218, 0, 219, 360,
	0, 361, 0, 220, 221, 222, 223, 224, 362, 363,
	0, 0, 228, 0, 225, 0, 0, 226, 364, 227,
	365, 366, 367, 368, 369, 0, 370, 0, 0, 229,
	230, 231, 0, 232, 233, 234, 0, 236, 235, 0,
	371, 0, 237, 0, 0, 238, 0, 0, 239, 0,
	240, 241, 242, 244, 372, 243, 0, 245, 246, 248,
	247, 0, 0, 0, 373, 249, 374, 250, 251, 0,
	252, 0, 0, 253, 0, 0, 254, 375, 0, 255,
	0, 376, 256, 257, 258, 259, 260, 0, 261, 377,
	262, 378, 263, 0, 264, 265, 266, 267, 268, 269,
	379, 270, 271, 0, 272, 273, 274, 275, 276, 278,
	279, 277, 280, 281, 282, 283, 0, 284, 0, 285,
	286, 380, 287, 0, 291, 292, 293, 294, 0, 296,
	381, 295, 297, 298, 0, 299, 288, 289, 300, 0,
	301, 382, 383, 302, 0, 309, 303, 304, 290, 305,
	308, 384, 306, 307, 385, 0, 310, 0, 311, 312,
	313, 314, 315, 316, 317, 0, 386, 387, 388, 0,
	0, 318, 319, 389, 390, 0, 320, 321, 322, 323,
	0, 0, 324, 325, 326, 327, 0, 328, 0, 391,
	329, 330, 331, 392, 393, 0, 0, 332, 0, 176,
	0, 0, 333, 334, 335, 336, 337, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 180, 0, 181, 0,
	0, 0, 0, 338, 0, 0, 0, 1652, 182, 183,
	184, 339, 340, 341, 342, 185, 343, 344, 0, 186,
	345, 346, 187, 188, 189, 0, 0, 347, 348, 349,
	0, 190, 350, 0, 0, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 0, 0, 198, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 201, 202, 401,
	203, 351, 204, 352, 353, 0, 205, 0, 206, 0,
	207, 0, 0, 208, 209, 0, 210, 0, 0, 0,
	354, 211, 212, 213, 355, 356, 0, 0, 0, 214,
	215, 357, 358, 359, 0, 216, 0, 217, 0, 0,
	0, 218, 0, 219, 360, 0, 361, 0, 220, 221,
	222, 223, 224, 362, 363, 0, 0, 228, 0, 225,
	0, 0, 226, 364, 227, 365, 366, 367, 368, 369,
	0, 370, 0, 0, 229, 230, 231, 0, 232, 233,
	234, 0, 236, 235, 0, 371, 0, 237, 0, 0,
	238, 0, 0, 239, 0, 240, 241, 242, 244, 372,
	243, 0, 245, 246, 248, 247, 0, 0, 0, 373,
	249, 374, 250, 251, 0, 252, 0, 0, 253, 0,
	0, 254, 375, 0, 255, 0, 376, 256, 257, 258,
	259, 260, 0, 261, 377, 262, 378, 263, 0, 264,
	265, 266, 267, 268, 269, 379, 270, 271, 0, 272,
	273, 274, 275, 276, 278, 279, 277, 280, 281, 282,
	283, 0, 284, 0, 285, 286, 380, 287, 0, 291,
	292, 293, 294, 0, 296, 381, 295, 297, 298, 0,
	299, 288, 289, 300, 0, 301, 382, 383, 302, 0,
	309, 303, 304, 290, 305, 308, 384, 306, 307, 385,
	0, 310, 0, 311, 312, 313, 314, 315, 316, 317,
	0, 386, 387, 388, 0, 0, 318, 319, 389, 390,
	0, 320, 321, 322, 323, 0, 0, 324, 325, 326,
	327, 0, 328, 0, 391, 329, 330, 331, 392, 393,
	0, 0, 332, 0, 176, 0, 0, 333, 334, 335,
	336, 337, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 180, 0, 181, 0, 0, 0, 0, 338, 0,
	0, 0, 2052, 182, 183, 184, 339, 340, 341, 342,
	185, 343, 344, 0, 186, 345, 346, 187, 188, 189,
	0, 0, 347, 348, 349, 0, 190, 350, 0, 0,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	0, 0, 198, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 201, 202, 401, 203, 351, 204, 352, 353,
	0, 205, 0, 206, 0, 207, 0, 0, 208, 209,
	0, 210, 0, 0, 0, 354, 211, 212, 213, 355,
	356, 0, 0, 0, 214, 215, 357, 358, 359, 0,
	216, 0, 217, 0, 0, 0, 218, 0, 219, 360,
	0, 361, 0, 220, 221, 222, 223, 224, 362, 363,
	0, 0, 228, 0, 225, 0, 0, 226, 364, 227,
	365, 366, 367, 368, 369, 0, 370, 0, 0, 229,
	230, 231, 0, 232, 233, 234, 0, 236, 235, 0,
	371, 0, 237, 0, 0, 238, 0, 0, 239, 0,
	240, 241, 242, 244, 372, 243, 0, 245, 246, 248,
	247, 0, 0, 0, 373, 249, 374, 250, 251, 0,
	252, 0, 0, 253, 0, 0, 254, 375, 0, 255,
	0, 376, 256, 257, 258, 259, 260, 0, 261, 377,
	262, 378, 263, 0, 264, 265, 266, 267, 268, 269,
	379, 270, 271, 0, 272, 273, 274, 275, 276, 278,
	279, 277, 280, 281, 282, 283, 0, 284, 0, 285,
	286, 380, 287, 0, 291, 292, 293, 294, 0, 296,
	381, 295, 297, 298, 0, 299, 288, 289, 300, 0,
	301, 382, 383, 302, 0, 309, 303, 304, 290, 305,
	308, 384, 306, 307, 385, 0, 310, 0, 311, 312,
	313, 314, 315, 316, 317, 0, 386, 387, 388, 0,
	0, 318, 319, 389, 390, 0, 320, 321, 322, 323,
	0, 0, 324, 325, 326, 327, 0, 328, 0, 391,
	329, 330, 331, 392, 393, 0, 0, 332, 0, 0,
	0, 0, 333, 334, 335, 336, 337, 801, 790, 791,
	788, 789, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 180, 0, 181, 1071, 0, 0,
	0, 338, 0, 0, 0, 0, 182, 183, 184, 339,
	833, 341, 834, 185, 835, 836, 0, 186, 345, 346,
	187, 188, 189, 0, 0, 837, 838, 349, 0, 190,
	350, 0, 479, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 0, 480, 198, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 201, 202, 401, 203, 839,
	204, 840, 841, 0, 205, 0, 206, 0, 207, 0,
	0, 832, 209, 0, 210, 0, 0, 0, 354, 211,
	212, 213, 355, 356, 797, 0, 0, 214, 215, 842,
	843, 844, 0, 216, 0, 217, 0, 0, 481, 218,
	0, 219, 360, 0, 361, 0, 220, 221, 222, 223,
	224, 362, 363, 483, 0, 228, 0, 225, 0, 482,
	226, 845, 227, 846, 847, 848, 849, 850, 0, 808,
	0, 484, 229, 230, 231, 485, 232, 233, 234, 0,
	236, 235, 0, 371, 486, 237, 487, 0, 238, 0,
	0, 239, 0, 240, 241, 242, 244, 372, 243, 488,
	245, 246, 248, 247, 0, 0, 798, 373, 249, 851,
	250, 251, 0, 252, 0, 0, 253, 0, 0, 254,
	375, 489, 255, 490, 376, 256, 257, 258, 259, 260,
	0, 261, 377, 262, 378, 263, 0, 264, 265, 266,
	267, 268, 269, 852, 270, 271, 0, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 0,
	284, 491, 285, 286, 380, 287, 0, 291, 292, 293,
	294, 0, 296, 381, 295, 297, 298, 0, 299, 288,
	289, 300, 492, 301, 853, 383, 302, 0, 309, 303,
	304, 290, 305, 308, 854, 306, 307, 385, 0, 310,
	0, 311, 312, 313, 314, 315, 316, 317, 0, 386,
	855, 856, 0, 0, 318, 319, 389, 390, 796, 320,
	321, 322, 323, 0, 0, 324, 325, 326, 327, 0,
	328, 0, 391, 329, 330, 331, 392, 857, 0, 0,
	332, 0, 0, 0, 0, 333, 334, 335, 336, 337,
	966, 0, 697, 694, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 180,
	0, 181, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 182, 183, 184, 339, 340, 341, 342, 185, 343,
	344, 0, 186, 345, 346, 187, 188, 189, 0, 0,
	347, 348, 349, 0, 190, 350, 0, 479, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 0, 480,
	198, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	201, 202, 401, 203, 351, 204, 352, 353, 0, 205,
	0, 206, 0, 207, 0, 0, 208, 209, 0, 210,
	0, 0, 0, 354, 211, 212, 213, 355, 356, 0,
	0, 0, 214, 215, 357, 358, 359, 0, 216, 0,
	217, 0, 0, 481, 218, 0, 219, 360, 0, 361,
	0, 220, 221, 222, 223, 224, 362, 363, 483, 0,
	228, 0, 225, 0, 482, 226, 364, 227, 365, 366,
	367, 368, 369, 0, 370, 0, 484, 229, 230, 231,
	485, 232, 233, 234, 0, 236, 235, 0, 371, 486,
	237, 487, 0, 238, 0, 0, 239, 0, 240, 241,
	242, 244, 372, 243, 488, 245, 246, 248, 247, 0,
	0, 0, 373, 249, 374, 250, 251, 0, 252, 0,
	0, 253, 0, 0, 254, 375, 489, 255, 490, 376,
	256, 257, 258, 259, 260, 0, 261, 377, 262, 378,
	263, 0, 264, 265, 266, 267, 268, 269, 379, 270,
	271, 0, 272, 273, 274, 275, 276, 278, 279, 277,
	280, 281, 282, 283, 0, 284, 491, 285, 286, 380,
	287, 0, 291, 292, 293, 294, 0, 296, 381, 295,
	297, 298, 0, 299, 288, 289, 300, 492, 301, 382,
	383, 302, 0, 309, 303, 304, 290, 305, 308, 384,
	306, 307, 385, 0, 310, 0, 311, 312, 313, 314,
	315, 316, 317, 0, 386, 387, 388, 0, 0, 318,
	319, 389, 390, 0, 320, 321, 322, 323, 0, 0,
	324, 325, 326, 327, 0, 328, 0, 391, 329, 330,
	331, 392, 393, 0, 582, 332, 176, 0, 0, 0,
	333, 334, 335, 336, 337, 0, 0, 0, 0, 0,
	0, 0, 179, 180, 0, 181, 0, 0, 0, 0,
	338, 0, 0, 0, 0, 182, 183, 184, 339, 340,
	341, 342, 185, 343, 344, 0, 186, 345, 346, 187,
	188, 189, 0, 0, 347, 348, 349, 0, 190, 350,
	0, 0, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 0, 0, 198, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 201, 202, 172, 203, 351, 204,
	352, 353, 0, 205, 0, 206, 0, 207, 0, 0,
	208, 209, 0, 210, 0, 0, 0, 354, 211, 212,
	213, 355, 356, 0, 0, 0, 214, 215, 357, 358,
	359, 0, 216, 0, 217, 0, 0, 0, 218, 0,
	219, 360, 0, 361, 0, 220, 221, 222, 223, 224,
	362, 363, 0, 0, 228, 0, 225, 0, 0, 226,
	364, 227, 365, 366, 367, 368, 369, 0, 370, 0,
	0, 229, 230, 231, 0, 232, 233, 234, 0, 236,
	235, 0, 371, 0, 237, 0, 0, 238, 0, 0,
	239, 0, 240, 241, 242, 244, 372, 243, 0, 245,
	246, 248, 247, 0, 0, 0, 373, 249, 374, 250,
	251, 0, 252, 0, 0, 253, 0, 0, 254, 375,
	0, 255, 0, 376, 256, 257, 258, 259, 260, 0,
	261, 377, 262, 378, 263, 0, 264, 265, 266, 267,
	268, 269, 379, 270, 271, 0, 272, 273, 274, 275,
	276, 278, 279, 277, 280, 281, 282, 283, 0, 284,
	0, 285, 286, 380, 287, 0, 291, 292, 293, 294,
	0, 296, 381, 295, 297, 298, 0, 299, 288, 289,
	300, 0, 301, 382, 383, 302, 0, 309, 303, 304,
	290, 305, 308, 384, 306, 307, 385, 0, 310, 171,
	311, 312, 313, 314, 315, 316, 317, 0, 386, 387,
	388, 0, 0, 318, 319, 389, 390, 0, 320, 321,
	322, 323, 0, 0, 324, 325, 326, 327, 0, 328,
	0, 391, 329, 330, 331, 392, 393, 0, 169, 332,
	176, 0, 0, 0, 333, 334, 335, 336, 337, 0,
	0, 0, 0, 0, 0, 0, 179, 180, 0, 181,
	0, 0, 175, 0, 338, 0, 0, 0, 0, 182,
	183, 184, 339, 340, 341, 342, 185, 343, 344, 0,
	186, 345, 346, 187, 188, 189, 0, 0, 347, 348,
	349, 0, 190, 350, 0, 0, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 0, 0, 198, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 201, 202,
	172, 203, 351, 204, 352, 353, 0, 205, 0, 206,
	0, 207, 0, 0, 208, 209, 0, 210, 0, 0,
	0, 354, 211, 212, 213, 355, 356, 0, 0, 0,
	214, 215, 357, 358, 359, 0, 216, 0, 217, 0,
	0, 0, 218, 0, 219, 360, 0, 361, 0, 220,
	221, 222, 223, 224, 362, 363, 0, 0, 228, 0,
	225, 0, 0, 226, 364, 227, 365, 366, 367, 368,
	369, 0, 370, 0, 0, 229, 230, 231, 0, 232,
	233, 234, 0, 236, 235, 0, 371, 0, 237, 0,
	0, 238, 0, 0, 239, 0, 240, 241, 242, 244,
	372, 243, 0, 245, 246, 248, 247, 0, 0, 0,
	373, 249, 374, 250, 251, 0, 252, 0, 0, 253,
	0, 0, 254, 375, 0, 255, 0, 376, 256, 257,
	258, 259, 260, 0, 261, 377, 262, 378, 263, 0,
	264, 265, 266, 267, 268, 269, 379, 270, 271, 0,
	272, 273, 274, 275, 276, 278, 279, 277, 280, 281,
	282, 283, 0, 284, 0, 285, 286, 380, 287, 0,
	291, 292, 293, 294, 0, 296, 381, 295, 297, 298,
	0, 299, 288, 289, 300, 0, 301, 382, 383, 302,
	0, 309, 303, 304, 290, 305, 308, 384, 306, 307,
	385, 0, 310, 171, 311, 312, 313, 314, 315, 316,
	317, 0, 386, 387, 388, 0, 0, 318, 319, 389,
	390, 0, 320, 321, 322, 323, 0, 0, 324, 325,
	326, 327, 0, 328, 0, 391, 329, 330, 331, 392,
	393, 697, 694, 332, 0, 0, 968, 0, 333, 334,
	335, 336, 337, 0, 0, 0, 0, 179, 180, 0,
	181, 0, 0, 0, 0, 338, 175, 0, 0, 0,
	182, 183, 184, 339, 340, 341, 342, 185, 343, 344,
	0, 186, 345, 346, 187, 188, 189, 0, 0, 347,
	348, 349, 0, 190, 350, 0, 479, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 0, 480, 198,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 201,
	202, 401, 203, 351, 204, 352, 353, 0, 205, 0,
	206, 0, 207, 0, 0, 208, 209, 0, 210, 0,
	0, 0, 354, 211, 212, 213, 355, 356, 0, 0,
	0, 214, 215, 357, 358, 359, 0, 216, 0, 217,
	0, 0, 481, 218, 0, 219, 360, 0, 361, 0,
	220, 221, 222, 223, 224, 362, 363, 483, 0, 228,
	0, 225, 0, 482, 226, 364, 227, 365, 366, 367,
	368, 369, 0, 370, 0, 484, 229, 230, 231, 485,
	232, 233, 234, 0, 236, 235, 0, 371, 486, 237,
	487, 0, 238, 0, 0, 239, 0, 240, 241, 242,
	244, 372, 243, 488, 245, 246, 248, 247, 0, 0,
	0, 373, 249, 374, 250, 251, 0, 252, 0, 0,
	253, 0, 0, 254, 375, 489, 255, 490, 376, 256,
	257, 258, 259, 260, 0, 261, 377, 262, 378, 263,
	0, 264, 265, 266, 267, 268, 269, 379, 270, 271,
	0, 272, 273, 274, 275, 276, 278, 279, 277, 280,
	281, 282, 283, 0, 284, 491, 285, 286, 380, 287,
	0, 291, 292, 293, 294, 0, 296, 381, 295, 297,
	298, 0, 299, 288, 289, 300, 492, 301, 382, 383,
	302, 0, 309, 303, 304, 290, 305, 308, 384, 306,
	307, 385, 0, 310, 0, 311, 312, 313, 314, 315,
	316, 317, 0, 386, 387, 388, 0, 0, 318, 319,
	389, 390, 0, 320, 321, 322, 323, 0, 0, 324,
	325, 326, 327, 0, 328, 0, 391, 329, 330, 331,
	392, 393, 176, 0, 332, 0, 0, 0, 0, 333,
	334, 335, 336, 337, 0, 0, 0, 0, 179, 180,
	0, 181, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 182, 183, 184, 339, 340, 341, 342, 185, 343,
	344, 0, 186, 345, 346, 187, 188, 189, 0, 0,
	347, 348, 349, 0, 190, 350, 0, 0, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 0, 0,
	198, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	201, 202, 172, 203, 351, 204, 352, 353, 0, 205,
	0, 206, 0, 207, 0, 0, 208, 209, 0, 210,
	0, 0, 0, 354, 211, 212, 213, 355, 356, 0,
	0, 0, 214, 215, 357, 358, 359, 0, 216, 0,
	217, 0, 0, 0, 218, 0, 219, 360, 0, 361,
	0, 220, 221, 222, 223, 224, 362, 363, 0, 0,
	228, 0, 225, 0, 0, 226, 364, 227, 365, 366,
	367, 368, 369, 0, 370, 0, 0, 229, 230, 231,
	0, 232, 233, 234, 0, 236, 235, 0, 371, 0,
	237, 0, 0, 238, 0, 0, 239, 0, 240, 241,
	242, 244, 372, 243, 0, 245, 246, 248, 247, 0,
	0, 0, 373, 249, 374, 250, 251, 0, 252, 0,
	0, 253, 0, 0, 254, 375, 0, 255, 0, 376,
	256, 257, 258, 259, 260, 0, 261, 377, 262, 378,
	263, 0, 264, 265, 266, 267, 268, 269, 379, 270,
	271, 0, 272, 273, 274, 275, 276, 278, 279, 277,
	280, 281, 282, 283, 0, 284, 0, 285, 286, 380,
	287, 0, 291, 292, 293, 294, 0, 296, 381, 295,
	297, 298, 0, 299, 288, 289, 300, 0, 301, 382,
	383, 302, 0, 309, 303, 304, 290, 305, 308, 384,
	306, 307, 385, 0, 310, 171, 311, 312, 313, 314,
	315, 316, 317, 0, 386, 387, 388, 0, 0, 318,
	319, 389, 390, 0, 320, 321, 322, 323, 0, 0,
	324, 325, 326, 327, 0, 328, 0, 391, 329, 330,
	331, 392, 393, 697, 694, 332, 0, 0, 0, 0,
	333, 334, 335, 336, 337, 0, 0, 0, 0, 179,
	180, 0, 181, 0, 0, 0, 0, 338, 175, 0,
	0, 0, 182, 183, 184, 339, 340, 341, 342, 185,
	343, 344, 0, 186, 345, 346, 187, 188, 189, 0,
	0, 347, 348, 349, 0, 190, 350, 0, 479, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 0,
	480, 198, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 201, 202, 401, 203, 351, 204, 352, 353, 0,
	205, 0, 206, 0, 207, 0, 0, 208, 209, 0,
	210, 0, 0, 0, 354, 211, 212, 213, 355, 356,
	0, 0, 0, 214, 215, 357, 358, 359, 0, 216,
	0, 217, 0, 0, 481, 218, 0, 219, 360, 0,
	361, 0, 220, 221, 222, 223, 224, 362, 363, 483,
	0, 228, 0, 225, 0, 482, 226, 364, 227, 365,
	366, 367, 368, 369, 0, 370, 0, 484, 229, 230,
	231, 485, 232, 233, 234, 0, 236, 235, 0, 371,
	486, 237, 487, 0, 238, 0, 0, 239, 0, 240,
	241, 242, 244, 372, 243, 488, 245, 246, 248, 247,
	0, 0, 0, 373, 249, 374, 250, 251, 0, 252,
	0, 0, 253, 0, 0, 254, 375, 489, 255, 490,
	376, 256, 257, 258, 259, 260, 0, 261, 377, 262,
	378, 263, 0, 264, 265, 266, 267, 268, 269, 379,
	270, 271, 0, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 0, 284, 491, 285, 286,
	380, 287, 0, 291, 292, 293, 294, 0, 296, 381,
	295, 297, 298, 0, 299, 288, 289, 300, 492, 301,
	382, 383, 302, 0, 309, 303, 304, 290, 305, 308,
	384, 306, 307, 385, 0, 310, 0, 311, 312, 313,
	314, 315, 316, 317, 0, 386, 387, 388, 0, 0,
	318, 319, 389, 390, 0, 320, 321, 322, 323, 0,
	0, 324, 325, 326, 327, 0, 328, 0, 391, 329,
	330, 331, 392, 393, 176, 0, 332, 0, 0, 0,
	0, 333, 334, 335, 336, 337, 0, 0, 0, 0,
	179, 180, 0, 181, 0, 0, 0, 0, 338, 0,
	0, 0, 0, 182, 183, 184, 339, 340, 341, 342,
	185, 343, 344, 0, 186, 345, 346, 187, 188, 189,
	0, 0, 347, 348, 349, 0, 190, 350, 0, 0,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	0, 0, 198, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 201, 202, 401, 203, 351, 204, 352, 353,
	0, 205, 0, 206, 0, 207, 0, 0, 208, 209,
	0, 210, 0, 0, 0, 354, 211, 212, 213, 355,
	356, 0, 0, 0, 214, 215, 357, 358, 359, 0,
	216, 0, 217, 0, 0, 0, 218, 0, 219, 360,
	0, 361, 0, 220, 221, 222, 223, 224, 362, 363,
	0, 0, 228, 0, 225, 0, 0, 226, 364, 227,
	365, 366, 367, 368, 369, 0, 370, 0, 0, 229,
	230, 231, 0, 232, 233, 234, 0, 236, 235, 0,
	371, 0, 237, 0, 0, 238, 0, 0, 239, 0,
	240, 241, 242, 244, 372, 243, 0, 245, 246, 248,
	247, 0, 0, 0, 373, 249, 374, 250, 251, 0,
	252, 0, 0, 253, 0, 0, 254, 375, 0, 255,
	0, 376, 256, 257, 258, 259, 260, 0, 261, 377,
	262, 378, 263, 0, 264, 265, 266, 267, 268, 269,
	379, 270, 271, 0, 272, 273, 274, 275, 276, 278,
	279, 277, 280, 281, 282, 283, 0, 284, 0, 285,
	286, 380, 287, 0, 291, 292, 293, 294, 0, 296,
	381, 295, 297, 298, 0, 299, 288, 289, 300, 0,
	301, 382, 383, 302, 0, 309, 303, 304, 290, 305,
	308, 384, 306, 307, 385, 0, 310, 0, 311, 312,
	313, 314, 315, 316, 317, 0, 386, 387, 388, 0,
	0, 318, 319, 389, 390, 0, 320, 321, 322, 323,
	0, 0, 324, 325, 326, 327, 0, 328, 0, 391,
	329, 330, 331, 392, 393, 697, 0, 332, 0, 0,
	0, 0, 333, 334, 335, 336, 337, 0, 0, 0,
	0, 179, 180, 0, 181, 0, 0, 0, 0, 338,
	175, 0, 0, 0, 182, 183, 184, 339, 340, 341,
	342, 185, 343, 344, 0, 186, 345, 346, 187, 188,
	189, 0, 0, 347, 348, 349, 0, 190, 350, 0,
	479, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 0, 480, 198, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 201, 202, 401, 203, 351, 204, 352,
	353, 0, 205, 0, 206, 0, 207, 0, 0, 208,
	209, 0, 210, 0, 0, 0, 354, 211, 212, 213,
	355, 356, 0, 0, 0, 214, 215, 357, 358, 359,
	0, 216, 0, 217, 0, 0, 481, 218, 0, 219,
	360, 0, 361, 0, 220, 221, 222, 223, 224, 362,
	363, 483, 0, 228, 0, 225, 0, 482, 226, 364,
	227, 365, 366, 367, 368, 369, 0, 370, 0, 484,
	229, 230, 231, 485, 232, 233, 234, 0, 236, 235,
	0, 371, 486, 237, 487, 0, 238, 0, 0, 239,
	0, 240, 241, 242, 244, 372, 243, 488, 245, 246,
	248, 247, 0, 0, 0, 373, 249, 374, 250, 251,
	0, 252, 0, 0, 253, 0, 0, 254, 375, 489,
	255, 490, 376, 256, 257, 258, 259, 260, 0, 261,
	377, 262, 378, 263, 0, 264, 265, 266, 267, 268,
	269, 379, 270, 271, 0, 272, 273, 274, 275, 276,
	278, 279, 277, 280, 281, 282, 283, 0, 284, 491,
	285, 286, 380, 287, 0, 291, 292, 293, 294, 0,
	296, 381, 295, 297, 298, 0, 299, 288, 289, 300,
	492, 301, 382, 383, 302, 0, 309, 303, 304, 290,
	305, 308, 384, 306, 307, 385, 0, 310, 0, 311,
	312, 313, 314, 315, 316, 317, 0, 386, 387, 388,
	0, 0, 318, 319, 389, 390, 0, 320, 321, 322,
	323, 0, 0, 324, 325, 326, 327, 0, 328, 0,
	391, 329, 330, 331, 392, 393, 176, 0, 332, 0,
	0, 0, 0, 333, 334, 335, 336, 337, 0, 0,
	0, 0, 179, 180, 0, 181, 0, 0, 0, 0,
	338, 0, 0, 0, 0, 182, 183, 184, 339, 340,
	341, 342, 185, 343, 344, 0, 186, 345, 346, 187,
	188, 189, 0, 0, 347, 348, 349, 1428, 190, 350,
	0, 0, 0, 191, 192, 193, 0, 194, 1426, 195,
	196, 197, 0, 0, 198, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 201, 202, 401, 203, 351, 204,
	352, 353, 0, 205, 0, 206, 0, 207, 0, 0,
	208, 209, 0, 210, 0, 0, 0, 354, 211, 212,
	213, 355, 356, 0, 1625, 0, 214, 215, 357, 358,
	359, 0, 216, 0, 217, 1431, 0, 0, 218, 0,
	219, 360, 0, 361, 0, 220, 221, 222, 223, 224,
	362, 363, 0, 0, 228, 1623, 225, 0, 0, 226,
	364, 227, 365, 366, 367, 368, 369, 0, 370, 0,
	0, 229, 230, 231, 0, 232, 233, 234, 0, 236,
	235, 0, 371, 0, 237, 0, 0, 238, 0, 0,
	239, 0, 240, 241, 242, 244, 372, 243, 0, 245,
	246, 248, 247, 0, 0, 0, 373, 249, 374, 250,
	251, 0, 252, 0, 0, 253, 0, 0, 254, 375,
	0, 255, 0, 376, 256, 257, 258, 259, 260, 0,
	261, 377, 262, 378, 263, 1430, 264, 265, 266, 267,
	268, 269, 379, 270, 271, 0, 272, 273, 274, 275,
	276, 278, 279, 277, 280, 281, 282, 283, 0, 284,
	0, 285, 286, 380, 287, 0, 291, 292, 293, 294,
	0, 296, 381, 295, 297, 298, 0, 299, 288, 289,
	300, 0, 301, 382, 383, 302, 0, 309, 303, 304,
	290, 305, 308, 384, 306, 307, 385, 0, 310, 0,
	311, 312, 313, 314, 315, 316, 317, 0, 386, 387,
	388, 0, 0, 318, 319, 389, 390, 0, 320, 321,
	322, 323, 0, 1624, 324, 325, 326, 327, 0, 328,
	0, 391, 329, 330, 331, 392, 393, 176, 0, 332,
	0, 0, 0, 0, 333, 334, 335, 336, 337, 0,
	0, 0, 0, 179, 180, 0, 181, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 182, 183, 184, 339,
	340, 341, 342, 185, 343, 344, 0, 186, 345, 346,
	187, 188, 189, 0, 0, 347, 348, 349, 1428, 190,
	350, 0, 0, 1423, 191, 192, 193, 0, 194, 1426,
	195, 196, 197, 0, 0, 198, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 201, 202, 401, 203, 351,
	204, 352, 353, 0, 205, 0, 206, 0, 207, 0,
	0, 208, 209, 0, 210, 0, 0, 0, 354, 211,
	212, 213, 355, 356, 0, 0, 0, 214, 215, 357,
	358, 359, 0, 216, 0, 217, 1431, 0, 0, 218,
	0, 219, 360, 0, 361, 0, 220, 221, 222, 223,
	224, 1422, 363, 0, 0, 228, 0, 225, 0, 0,
	226, 364, 227, 365, 366, 367, 368, 369, 0, 370,
	0, 0, 229, 230, 231, 0, 232, 233, 234, 0,
	236, 235, 0, 371, 0, 237, 0, 0, 238, 0,
	0, 239, 0, 240, 241, 242, 244, 372, 243, 0,
	245, 246, 248, 247, 0, 0, 0, 373, 249, 374,
	250, 251, 0, 252, 0, 0, 253, 0, 0, 254,
	375, 0, 255, 0, 376, 256, 257, 258, 259, 260,
	0, 261, 377, 262, 378, 263, 1430, 264, 265, 266,
	267, 268, 269, 379, 270, 271, 0, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 0,
	284, 0, 285, 286, 380, 287, 0, 291, 292, 293,
	294, 0, 296, 381, 295, 297, 298, 0, 299, 288,
	289, 300, 0, 301, 382, 383, 302, 0, 309, 303,
	304, 290, 305, 308, 384, 306, 307, 385, 0, 310,
	0, 311, 312, 313, 314, 315, 316, 317, 0, 386,
	387, 388, 0, 0, 318, 319, 389, 390, 0, 320,
	321, 322, 323, 0, 1429, 324, 325, 326, 327, 0,
	328, 0, 391, 329, 330, 331, 392, 393, 0, 894,
	332, 176, 0, 0, 0, 333, 334, 335, 336, 337,
	0, 0, 0, 0, 0, 0, 0, 179, 180, 0,
	181, 0, 0, 0, 0, 338, 0, 0, 0, 0,
	182, 183, 184, 339, 340, 341, 342, 185, 343, 344,
	0, 186, 345, 346, 187, 188, 189, 0, 0, 347,
	348, 349, 0, 190, 350, 0, 0, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 0, 0, 198,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 201,
	202, 401, 203, 351, 204, 352, 353, 0, 205, 0,
	206, 0, 207, 0, 0, 208, 209, 0, 210, 0,
	0, 0, 354, 211, 212, 213, 355, 356, 0, 0,
	0, 214, 215, 357, 358, 359, 0, 216, 0, 217,
	0, 0, 0, 218, 0, 219, 360, 0, 361, 0,
	220, 221, 222, 223, 224, 362, 363, 0, 0, 228,
	0, 225, 0, 0, 226, 364, 227, 365, 366, 367,
	368, 369, 0, 370, 0, 0, 229, 230, 231, 0,
	232, 233, 234, 0, 236, 235, 0, 371, 0, 237,
	0, 0, 238, 0, 0, 239, 0, 240, 241, 242,
	244, 372, 243, 0, 245, 246, 248, 247, 0, 0,
	0, 373, 249, 374, 250, 251, 0, 252, 0, 739,
	253, 0, 0, 254, 375, 0, 255, 0, 376, 256,
	257, 258, 259, 260, 0, 261, 377, 262, 378, 263,
	0, 264, 265, 266, 267, 268, 269, 379, 270, 271,
	0, 272, 273, 274, 275, 276, 278, 279, 277, 280,
	281, 282, 283, 0, 284, 0, 285, 286, 380, 287,
	0, 291, 292, 293, 294, 0, 296, 381, 295, 297,
	298, 0, 299, 288, 289, 300, 0, 301, 382, 383,
	302, 0, 309, 303, 304, 290, 305, 308, 384, 306,
	307, 385, 0, 310, 0, 311, 312, 313, 314, 315,
	316, 317, 0, 386, 387, 388, 0, 0, 318, 319,
	389, 390, 0, 320, 321, 322, 323, 0, 0, 324,
	325, 326, 327, 0, 328, 0, 391, 329, 330, 331,
	392, 393, 0, 745, 332, 176, 0, 0, 0, 333,
	334, 335, 336, 337, 0, 0, 0, 0, 0, 0,
	0, 179, 180, 0, 181, 0, 0, 0, 0, 338,
	0, 0, 0, 0, 182, 183, 184, 339, 340, 341,
	342, 185, 343, 344, 0, 186, 345, 346, 187, 188,
	189, 0, 0, 347, 348, 349, 0, 190, 350, 0,
	0, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 0, 0, 198, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 201, 202, 401, 203, 351, 204, 352,
	353, 0, 205, 0, 206, 0, 207, 0, 0, 208,
	209, 0, 210, 0, 0, 0, 354, 211, 212, 213,
	355, 356, 0, 0, 0, 214, 215, 357, 358, 359,
	0, 216, 0, 217, 0, 0, 0, 218, 0, 219,
	360, 0, 361, 0, 220, 221, 222, 223, 224, 747,
	363, 0, 0, 228, 0, 225, 0, 0, 226, 364,
	227, 365, 366, 367, 368, 369, 0, 370, 0, 0,
	229, 230, 231, 0, 232, 233, 234, 0, 236, 235,
	0, 371, 0, 237, 0, 0, 238, 0, 0, 239,
	0, 240, 241, 242, 244, 372, 243, 0, 245, 246,
	248, 247, 0, 0, 0, 373, 249, 374, 250, 251,
	0, 252, 0, 739, 253, 0, 0, 254, 375, 0,
	255, 0, 376, 256, 257, 258, 259, 260, 0, 261,
	377, 262, 378, 263, 0, 264, 265, 266, 267, 268,
	269, 379, 270, 271, 0, 272, 273, 274, 275, 276,
	278, 279, 277, 280, 281, 282, 283, 0, 284, 0,
	285, 286, 380, 287, 0, 291, 292, 293, 294, 0,
	296, 381, 295, 297, 298, 0, 299, 288, 289, 300,
	0, 301, 382, 383, 302, 0, 309, 303, 304, 290,
	305, 308, 384, 306, 307, 385, 0, 310, 0, 311,
	312, 313, 314, 315, 316, 317, 0, 386, 387, 388,
	0, 0, 318, 319, 389, 390, 0, 320, 321, 322,
	323, 0, 0, 324, 325, 326, 327, 0, 328, 0,
	391, 329, 330, 331, 392, 393, 0, 741, 332, 176,
	0, 0, 0, 333, 334, 335, 336, 337, 0, 0,
	0, 0, 0, 0, 0, 179, 180, 0, 181, 0,
	0, 0, 0, 338, 0, 0, 0, 0, 182, 183,
	184, 339, 340, 341, 342, 185, 343, 344, 0, 186,
	345, 346, 187, 188, 189, 0, 0, 347, 348, 349,
	0, 190, 350, 0, 0, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 0, 0, 198, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 201, 202, 401,
	203, 351, 204, 352, 353, 0, 205, 0, 206, 0,
	207, 0, 0, 208, 209, 0, 210, 0, 0, 0,
	354, 211, 212, 213, 355, 356, 0, 0, 0, 214,
	215, 357, 358, 359, 0, 216, 0, 217, 0, 0,
	0, 218, 0, 219, 360, 0, 361, 0, 220, 221,
	222, 223, 224, 743, 363, 0, 0, 228, 0, 225,
	0, 0, 226, 364, 227, 365, 366, 367, 368, 369,
	0, 370, 0, 0, 229, 230, 231, 0, 232, 233,
	234, 0, 236, 235, 0, 371, 0, 237, 0, 0,
	238, 0, 0, 239, 0, 240, 241, 242, 244, 372,
	243, 0, 245, 246, 248, 247, 0, 0, 0, 373,
	249, 374, 250, 251, 0, 252, 0, 739, 253, 0,
	0, 254, 375, 0, 255, 0, 376, 256, 257, 258,
	259, 260, 0, 261, 377, 262, 378, 263, 0, 264,
	265, 266, 267, 268, 269, 379, 270, 271, 0, 272,
	273, 274, 275, 276, 278, 279, 277, 280, 281, 282,
	283, 0, 284, 0, 285, 286, 380, 287, 0, 291,
	292, 293, 294, 0, 296, 381, 295, 297, 298, 0,
	299, 288, 289, 300, 0, 301, 382, 383, 302, 0,
	309, 303, 304, 290, 305, 308, 384, 306, 307, 385,
	0, 310, 0, 311, 312, 313, 314, 315, 316, 317,
	0, 386, 387, 388, 0, 0, 318, 319, 389, 390,
	0, 320, 321, 322, 323, 0, 0, 324, 325, 326,
	327, 0, 328, 0, 391, 329, 330, 331, 392, 393,
	0, 421, 332, 176, 0, 0, 0, 333, 334, 335,
	336, 337, 0, 0, 0, 0, 0, 0, 0, 179,
	180, 420, 181, 0, 0, 0, 0, 338, 0, 0,
	0, 0, 182, 183, 184, 339, 340, 341, 342, 185,
	343, 344, 0, 186, 345, 346, 187, 188, 189, 0,
	0, 347, 348, 349, 0, 190, 350, 0, 0, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 0,
	0, 198, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 201, 202, 401, 203, 351, 204, 352, 353, 0,
	205, 0, 206, 0, 207, 0, 0, 208, 209, 0,
	210, 0, 0, 0, 354, 211, 212, 213, 355, 356,
	0, 0, 0, 214, 215, 357, 358, 359, 0, 216,
	0, 217, 0, 0, 0, 218, 0, 219, 360, 0,
	361, 0, 220, 221, 222, 223, 224, 362, 363, 0,
	0, 228, 0, 225, 0, 0, 226, 364, 227, 365,
	366, 367, 368, 369, 0, 370, 0, 0, 229, 230,
	231, 0, 232, 233, 234, 0, 236, 235, 0, 371,
	0, 237, 0, 0, 238, 0, 0, 239, 0, 240,
	241, 242, 244, 372, 243, 0, 245, 246, 248, 247,
	0, 0, 0, 373, 249, 374, 250, 251, 0, 252,
	0, 0, 253, 0, 0, 254, 375, 0, 255, 0,
	376, 256, 257, 258, 259, 260, 0, 261, 377, 262,
	378, 419, 0, 264, 265, 266, 267, 268, 269, 379,
	270, 271, 0, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 0, 284, 0, 285, 286,
	380, 287, 0, 291, 292, 293, 294, 0, 296, 381,
	295, 297, 298, 0, 299, 288, 289, 300, 0, 301,
	382, 383, 302, 0, 309, 303, 304, 290, 305, 308,
	384, 306, 307, 385, 0, 310, 0, 311, 312, 313,
	314, 315, 316, 317, 0, 386, 387, 388, 0, 0,
	318, 319, 389, 390, 0, 320, 321, 322, 323, 0,
	0, 324, 325, 326, 327, 0, 328, 0, 391, 329,
	330, 331, 392, 393, 176, 0, 332, 0, 0, 0,
	0, 333, 334, 335, 336, 337, 0, 0, 0, 0,
	179, 180, 0, 181, 0, 0, 0, 0, 338, 0,
	1411, 0, 0, 182, 183, 184, 339, 340, 341, 342,
	185, 343, 344, 0, 186, 345, 346, 187, 188, 189,
	0, 0, 347, 348, 349, 0, 190, 350, 0, 0,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	0, 0, 198, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 201, 202, 401, 203, 351, 204, 352, 353,
	0, 205, 0, 206, 0, 207, 0, 0, 208, 209,
	0, 210, 0, 0, 0, 354, 211, 212, 213, 355,
	356, 0, 0, 0, 214, 215, 357, 358, 359, 0,
	216, 0, 217, 0, 0, 0, 218, 0, 219, 360,
	0, 361, 0, 220, 221, 222, 223, 224, 362, 363,
	0, 0, 228, 0, 225, 0, 0, 226, 364, 227,
	365, 366, 367, 368, 369, 0, 370, 0, 0, 229,
	230, 231, 0, 232, 233, 234, 0, 236, 235, 0,
	371, 0, 237, 0, 0, 238, 0, 0, 239, 0,
	240, 241, 242, 244, 372, 243, 0, 245, 246, 248,
	247, 0, 0, 0, 373, 249, 374, 250, 251, 0,
	252, 0, 0, 253, 0, 0, 254, 375, 0, 255,
	0, 376, 256, 257, 258, 259, 260, 0, 261, 377,
	262, 378, 263, 0, 264, 265, 266, 267, 268, 269,
	379, 270, 271, 0, 272, 273, 274, 275, 276, 278,
	279, 277, 280, 281, 282, 283, 0, 284, 0, 285,
	286, 380, 287, 0, 291, 292, 293, 294, 0, 296,
	381, 295, 297, 298, 0, 299, 288, 289, 300, 0,
	301, 382, 383, 302, 0, 309, 303, 304, 290, 305,
	308, 384, 306, 307, 385, 0, 310, 0, 311, 312,
	313, 314, 315, 316, 317, 0, 386, 387, 388, 0,
	0, 318, 319, 389, 390, 0, 320, 321, 322, 323,
	0, 0, 324, 325, 326, 327, 0, 328, 0, 391,
	329, 330, 331, 392, 393, 176, 2140, 332, 0, 0,
	0, 0, 333, 334, 335, 336, 337, 0, 0, 0,
	0, 179, 180, 0, 181, 0, 0, 0, 0, 338,
	0, 0, 0, 0, 182, 183, 184, 339, 340, 341,
	342, 185, 343, 344, 0, 186, 345, 346, 187, 188,
	189, 0, 0, 347, 348, 349, 0, 190, 350, 0,
	0, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 0, 0, 198, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 201, 202, 401, 203, 351, 204, 352,
	353, 0, 205, 0, 206, 0, 207, 0, 0, 208,
	209, 0, 210, 0, 0, 0, 354, 211, 212, 213,
	355, 356, 0, 0, 0, 214, 215, 357, 358, 359,
	0, 216, 0, 217, 0, 0, 0, 218, 0, 219,
	360, 0, 361, 0, 220, 221, 222, 223, 224, 362,
	363, 0, 0, 228, 0, 225, 0, 0, 226, 364,
	227, 365, 366, 367, 368, 369, 0, 370, 0, 0,
	229, 230, 231, 0, 232, 233, 234, 0, 236, 235,
	0, 371, 0, 237, 0, 0, 238, 0, 0, 239,
	0, 240, 241, 242, 244, 372, 243, 0, 245, 246,
	248, 247, 0, 0, 0, 373, 249, 374, 250, 251,
	0, 252, 0, 0, 253, 0, 0, 254, 375, 0,
	255, 0, 376, 256, 257, 258, 259, 260, 0, 261,
	377, 262, 378, 263, 0, 264, 265, 266, 267, 268,
	269, 379, 270, 271, 0, 272, 273, 274, 275, 276,
	278, 279, 277, 280, 281, 282, 283, 0, 284, 0,
	285, 286, 380, 287, 0, 291, 292, 293, 294, 0,
	296, 381, 295, 297, 298, 0, 299, 288, 289, 300,
	0, 301, 382, 383, 302, 0, 309, 303, 304, 290,
	305, 308, 384, 306, 307, 385, 0, 310, 0, 311,
	312, 313, 314, 315, 316, 317, 0, 386, 387, 388,
	0, 0, 318, 319, 389, 390, 0, 320, 321, 322,
	323, 0, 0, 324, 325, 326, 327, 0, 328, 0,
	391, 329, 330, 331, 392, 393, 176, 2140, 332, 0,
	0, 0, 0, 333, 334, 335, 336, 337, 0, 0,
	0, 0, 179, 180, 0, 181, 0, 0, 0, 0,
	338, 0, 0, 0, 0, 182, 183, 184, 339, 340,
	341, 342, 185, 343, 344, 0, 186, 345, 346, 187,
	188, 189, 0, 0, 347, 348, 349, 0, 190, 350,
	0, 0, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 0, 0, 198, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 201, 202, 401, 203, 351, 204,
	352, 353, 0, 205, 0, 206, 0, 207, 0, 0,
	208, 209, 0, 210, 0, 0, 0, 354, 211, 212,
	213, 355, 356, 0, 0, 0, 214, 215, 357, 358,
	359, 0, 216, 0, 217, 0, 0, 0, 218, 0,
	219, 360, 0, 361, 0, 220, 221, 222, 223, 224,
	362, 363, 0, 0, 228, 0, 225, 0, 0, 226,
	364, 227, 365, 366, 367, 368, 369, 0, 370, 0,
	0, 229, 230, 231, 0, 232, 233, 234, 0, 236,
	235, 0, 371, 0, 237, 0, 0, 238, 0, 0,
	239, 0, 240, 241, 242, 244, 372, 243, 0, 245,
	246, 248, 247, 0, 0, 0, 373, 249, 374, 250,
	251, 0, 252, 0, 0, 2137, 0, 0, 254, 375,
	0, 255, 0, 376, 256, 257, 258, 259, 260, 0,
	261, 377, 262, 378, 263, 0, 264, 265, 266, 267,
	268, 269, 379, 270, 271, 0, 272, 273, 274, 275,
	276, 278, 279, 277, 280, 281, 282, 283, 0, 284,
	0, 285, 286, 380, 287, 0, 291, 292, 293, 294,
	0, 296, 381, 295, 297, 298, 0, 299, 288, 289,
	300, 0, 301, 382, 383, 302, 0, 309, 303, 304,
	290, 305, 308, 384, 306, 307, 385, 0, 310, 0,
	311, 312, 313, 314, 315, 316, 317, 0, 386, 387,
	388, 0, 0, 318, 319, 389, 390, 0, 320, 321,
	322, 323, 0, 0, 324, 325, 326, 327, 0, 328,
	0, 391, 329, 330, 331, 392, 393, 176, 0, 332,
	0, 0, 0, 0, 333, 334, 335, 336, 337, 0,
	0, 0, 0, 179, 180, 0, 181, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 182, 183, 184, 339,
	340, 341, 342, 185, 343, 344, 0, 186, 345, 346,
	187, 188, 189, 0, 0, 347, 348, 349, 0, 190,
	350, 0, 0, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 0, 0, 198, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 201, 202, 401, 203, 351,
	204, 352, 353, 0, 205, 0, 206, 0, 207, 0,
	0, 208, 209, 0, 210, 0, 0, 0, 354, 211,
	212, 213, 355, 356, 0, 0, 0, 214, 215, 357,
	358, 359, 0, 216, 0, 217, 0, 0, 0, 218,
	0, 219, 360, 0, 361, 0, 220, 221, 222, 223,
	224, 362, 363, 0, 0, 228, 0, 225, 0, 0,
	226, 364, 227, 365, 366, 367, 368, 369, 0, 370,
	0, 0, 229, 230, 231, 0, 232, 233, 234, 0,
	236, 235, 0, 371, 0, 237, 0, 0, 238, 0,
	0, 239, 0, 240, 241, 242, 244, 372, 243, 0,
	245, 246, 248, 247, 0, 0, 0, 373, 249, 374,
	250, 251, 0, 252, 0, 739, 253, 0, 0, 254,
	375, 0, 255, 0, 376, 256, 257, 258, 259, 260,
	0, 261, 377, 262, 378, 263, 0, 264, 265, 266,
	267, 268, 269, 379, 270, 271, 0, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 0,
	284, 0, 285, 286, 380, 287, 0, 291, 292, 293,
	294, 0, 296, 381, 295, 297, 298, 0, 299, 288,
	289, 300, 0, 301, 382, 383, 302, 0, 309, 303,
	304, 290, 305, 308, 384, 306, 307, 385, 0, 310,
	0, 311, 312, 313, 314, 315, 316, 317, 0, 386,
	387, 388, 0, 0, 318, 319, 389, 390, 0, 320,
	321, 322, 323, 0, 0, 324, 325, 326, 327, 0,
	328, 0, 391, 329, 330, 331, 392, 393, 0, 1354,
	332, 176, 0, 0, 0, 333, 334, 335, 336, 337,
	0, 0, 0, 0, 0, 0, 0, 179, 180, 0,
	181, 0, 0, 0, 0, 338, 0, 0, 0, 0,
	182, 183, 184, 339, 340, 341, 342, 185, 343, 344,
	0, 186, 345, 346, 187, 188, 189, 0, 0, 347,
	348, 349, 0, 190, 350, 0, 0, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 0, 0, 198,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 201,
	202, 401, 203, 351, 204, 352, 353, 0, 205, 0,
	206, 0, 207, 0, 0, 208, 209, 0, 210, 0,
	0, 0, 354, 211, 212, 213, 355, 356, 0, 0,
	0, 214, 215, 357, 358, 359, 0, 216, 0, 217,
	0, 0, 0, 218, 0, 219, 360, 0, 361, 0,
	220, 221, 222, 223, 224, 362, 363, 0, 0, 228,
	0, 225, 0, 0, 226, 364, 227, 365, 366, 367,
	368, 369, 0, 370, 0, 0, 229, 230, 231, 0,
	232, 233, 234, 0, 236, 235, 0, 371, 0, 237,
	0, 0, 238, 0, 0, 239, 0, 240, 241, 242,
	244, 372, 243, 0, 245, 246, 248, 247, 0, 0,
	0, 373, 249, 374, 250, 251, 0, 252, 0, 0,
	253, 0, 0, 254, 375, 0, 255, 0, 376, 256,
	257, 258, 259, 260, 0, 261, 377, 262, 378, 263,
	0, 264, 265, 266, 267, 268, 269, 379, 270, 271,
	0, 272, 273, 274, 275, 276, 278, 279, 277, 280,
	281, 282, 283, 0, 284, 0, 285, 286, 380, 287,
	0, 291, 292, 293, 294, 0, 296, 381, 295, 297,
	298, 0, 299, 288, 289, 300, 0, 301, 382, 383,
	302, 0, 309, 303, 304, 290, 305, 308, 384, 306,
	307, 385, 0, 310, 0, 311, 312, 313, 314, 315,
	316, 317, 0, 386, 387, 388, 0, 0, 318, 319,
	389, 390, 0, 320, 321, 322, 323, 0, 0, 324,
	325, 326, 327, 0, 328, 0, 391, 329, 330, 331,
	392, 393, 0, 1352, 332, 176, 0, 0, 0, 333,
	334, 335, 336, 337, 0, 0, 0, 0, 0, 0,
	0, 179, 180, 0, 181, 0, 0, 0, 0, 338,
	0, 0, 0, 0, 182, 183, 184, 339, 340, 341,
	342, 185, 343, 344, 0, 186, 345, 346, 187, 188,
	189, 0, 0, 347, 348, 349, 0, 190, 350, 0,
	0, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 0, 0, 198, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 201, 202, 401, 203, 351, 204, 352,
	353, 0, 205, 0, 206, 0, 207, 0, 0, 208,
	209, 0, 210, 0, 0, 0, 354, 211, 212, 213,
	355, 356, 0, 0, 0, 214, 215, 357, 358, 359,
	0, 216, 0, 217, 0, 0, 0, 218, 0, 219,
	360, 0, 361, 0, 220, 221, 222, 223, 224, 362,
	363, 0, 0, 228, 0, 225, 0, 0, 226, 364,
	227, 365, 366, 367, 368, 369, 0, 370, 0, 0,
	229, 230, 231, 0, 232, 233, 234, 0, 236, 235,
	0, 371, 0, 237, 0, 0, 238, 0, 0, 239,
	0, 240, 241, 242, 244, 372, 243, 0, 245, 246,
	248, 247, 0, 0, 0, 373, 249, 374, 250, 251,
	0, 252, 0, 0, 253, 0, 0, 254, 375, 0,
	255, 0, 376, 256, 257, 258, 259, 260, 0, 261,
	377, 262, 378, 263, 0, 264, 265, 266, 267, 268,
	269, 379, 270, 271, 0, 272, 273, 274, 275, 276,
	278, 279, 277, 280, 281, 282, 283, 0, 284, 0,
	285, 286, 380, 287, 0, 291, 292, 293, 294, 0,
	296, 381, 295, 297, 298, 0, 299, 288, 289, 300,
	0, 301, 382, 383, 302, 0, 309, 303, 304, 290,
	305, 308, 384, 306, 307, 385, 0, 310, 0, 311,
	312, 313, 314, 315, 316, 317, 0, 386, 387, 388,
	0, 0, 318, 319, 389, 390, 0, 320, 321, 322,
	323, 0, 0, 324, 325, 326, 327, 0, 328, 0,
	391, 329, 330, 331, 392, 393, 176, 0, 332, 0,
	0, 0, 0, 333, 334, 335, 336, 337, 0, 0,
	0, 0, 179, 180, 1334, 181, 0, 0, 0, 0,
	338, 0, 0, 0, 0, 182, 183, 184, 339, 340,
	341, 342, 185, 343, 344, 0, 186, 345, 346, 187,
	188, 189, 0, 0, 347, 348, 349, 0, 190, 350,
	0, 0, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 0, 0, 198, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 201, 202, 401, 203, 351, 204,
	352, 353, 0, 205, 0, 206, 0, 207, 0, 0,
	208, 209, 0, 210, 0, 0, 0, 354, 211, 212,
	213, 355, 356, 0, 0, 0, 214, 215, 357, 358,
	359, 0, 216, 0, 217, 0, 0, 0, 218, 0,
	219, 360, 0, 361, 0, 220, 221, 222, 223, 224,
	362, 363, 0, 0, 228, 0, 225, 0, 0, 226,
	364, 227, 365, 366, 367, 368, 369, 0, 370, 0,
	0, 229, 230, 231, 0, 232, 233, 234, 0, 236,
	235, 0, 371, 0, 237, 0, 0, 238, 0, 0,
	239, 0, 240, 241, 242, 244, 372, 243, 0, 245,
	246, 248, 247, 0, 0, 0, 373, 249, 374, 250,
	251, 0, 252, 0, 0, 253, 0, 0, 254, 375,
	0, 255, 0, 376, 256, 257, 258, 259, 260, 0,
	261, 377, 262, 378, 263, 0, 264, 265, 266, 267,
	268, 269, 379, 270, 271, 0, 272, 273, 274, 275,
	276, 278, 279, 277, 280, 281, 282, 283, 0, 284,
	0, 285, 286, 380, 287, 0, 291, 292, 293, 294,
	0, 296, 381, 295, 297, 298, 0, 299, 288, 289,
	300, 0, 301, 382, 383, 302, 0, 309, 303, 304,
	290, 305, 308, 384, 306, 307, 385, 0, 310, 0,
	311, 312, 313, 314, 315, 316, 317, 0, 386, 387,
	388, 0, 0, 318, 319, 389, 390, 0, 320, 321,
	322, 323, 0, 0, 324, 325, 326, 327, 0, 328,
	0, 391, 329, 330, 331, 392, 393, 0, 1212, 332,
	176, 0, 0, 0, 333, 334, 335, 336, 337, 0,
	0, 0, 0, 0, 0, 0, 179, 180, 0, 181,
	0, 0, 0, 0, 338, 0, 0, 0, 0, 182,
	183, 184, 339, 340, 341, 342, 185, 343, 344, 0,
	186, 345, 346, 187, 188, 189, 0, 0, 347, 348,
	349, 0, 190, 350, 0, 0, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 0, 0, 198, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 201, 202,
	401, 203, 351, 204, 352, 353, 0, 205, 0, 206,
	0, 207, 0, 0, 208, 209, 0, 210, 0, 0,
	0, 354, 211, 212, 213, 355, 356, 0, 0, 0,
	214, 215, 357, 358, 359, 0, 216, 0, 217, 0,
	0, 0, 218, 0, 219, 360, 0, 361, 0, 220,
	221, 222, 223, 224, 1211, 363, 0, 0, 228, 0,
	225, 0, 0, 226, 364, 227, 365, 366, 367, 368,
	369, 0, 370, 0, 0, 229, 230, 231, 0, 232,
	233, 234, 0, 236, 235, 0, 371, 0, 237, 0,
	0, 238, 0, 0, 239, 0, 240, 241, 242, 244,
	372, 243, 0, 245, 246, 248, 247, 0, 0, 0,
	373, 249, 374, 250, 251, 0, 252, 0, 0, 253,
	0, 0, 254, 375, 0, 255, 0, 376, 256, 257,
	258, 259, 260, 0, 261, 377, 262, 378, 263, 0,
	264, 265, 266, 267, 268, 269, 379, 270, 271, 0,
	272, 273, 274, 275, 276, 278, 279, 277, 280, 281,
	282, 283, 0, 284, 0, 285, 286, 380, 287, 0,
	291, 292, 293, 294, 0, 296, 381, 295, 297, 298,
	0, 299, 288, 289, 300, 0, 301, 382, 383, 302,
	0, 309, 303, 304, 290, 305, 308, 384, 306, 307,
	385, 0, 310, 0, 311, 312, 313, 314, 315, 316,
	317, 0, 386, 387, 388, 0, 0, 318, 319, 389,
	390, 0, 320, 321, 322, 323, 0, 0, 324, 325,
	326, 327, 0, 328, 0, 391, 329, 330, 331, 392,
	393, 0, 615, 332, 176, 0, 0, 0, 333, 334,
	335, 336, 337, 0, 0, 0, 0, 0, 0, 0,
	179, 180, 0, 181, 0, 0, 0, 0, 338, 0,
	0, 0, 0, 182, 183, 184, 339, 340, 341, 342,
	185, 343, 344, 0, 186, 345, 346, 187, 188, 189,
	0, 0, 347, 348, 943, 0, 190, 350, 0, 0,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	0, 0, 198, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 201, 202, 401, 203, 351, 204, 352, 353,
	0, 205, 0, 206, 0, 207, 0, 0, 208, 209,
	0, 210, 0, 0, 0, 354, 211, 212, 213, 355,
	356, 0, 0, 0, 214, 215, 357, 358, 359, 0,
	216, 0, 217, 0, 0, 0, 218, 0, 219, 360,
	0, 361, 0, 220, 221, 222, 223, 224, 362, 363,
	0, 0, 228, 0, 225, 0, 0, 226, 364, 227,
	365, 366, 367, 368, 369, 0, 370, 0, 0, 229,
	230, 231, 0, 232, 233, 234, 0, 236, 235, 0,
	371, 0, 237, 0, 0, 238, 0, 0, 239, 0,
	240, 241, 242, 244, 372, 617, 0, 245, 246, 248,
	247, 0, 0, 0, 373, 249, 374, 250, 251, 0,
	252, 0, 0, 253, 0, 0, 254, 375, 0, 255,
	0, 376, 256, 257, 258, 259, 260, 0, 261, 377,
	262, 378, 263, 0, 264, 265, 266, 267, 268, 269,
	379, 270, 271, 0, 272, 273, 274, 275, 276, 278,
	279, 277, 280, 281, 282, 283, 0, 284, 0, 285,
	286, 380, 287, 0, 291, 292, 293, 294, 0, 296,
	381, 295, 297, 298, 0, 299, 288, 289, 300, 0,
	301, 382, 383, 302, 0, 309, 303, 304, 290, 305,
	308, 384, 306, 307, 385, 0, 310, 0, 311, 312,
	313, 314, 315, 316, 317, 0, 612, 387, 388, 0,
	0, 318, 944, 389, 390, 0, 320, 321, 322, 323,
	0, 0, 324, 325, 326, 327, 0, 328, 0, 391,
	329, 330, 331, 392, 393, 0, 912, 332, 176, 0,
	0, 0, 333, 334, 335, 336, 337, 0, 0, 0,
	0, 0, 0, 0, 179, 180, 0, 181, 0, 0,
	0, 0, 338, 0, 0, 0, 0, 182, 183, 184,
	339, 340, 341, 342, 185, 343, 344, 0, 186, 345,
	346, 187, 188, 189, 0, 0, 347, 348, 349, 0,
	190, 350, 0, 0, 0, 191, 192, 193, 0, 194,
	0, 195, 196, 197, 0, 0, 198, 199, 200, 0,
	0, 0, 0, 0, 0, 0, 201, 202, 401, 203,
	351, 204, 352, 353, 0, 205, 0, 206, 0, 207,
	0, 0, 208, 209, 0, 210, 0, 0, 0, 354,
	211, 212, 213, 355, 356, 0, 0, 0, 214, 215,
	357, 358, 359, 0, 216, 0, 217, 0, 0, 0,
	218, 0, 219, 360, 0, 361, 0, 220, 221, 222,
	223, 224, 911, 363, 0, 0, 228, 0, 225, 0,
	0, 226, 364, 227, 365, 366, 367, 368, 369, 0,
	370, 0, 0, 229, 230, 231, 0, 232, 233, 234,
	0, 236, 235, 0, 371, 0, 237, 0, 0, 238,
	0, 0, 239, 0, 240, 241, 242, 244, 372, 243,
	0, 245, 246, 248, 247, 0, 0, 0, 373, 249,
	374, 250, 251, 0, 252, 0, 0, 253, 0, 0,
	254, 375, 0, 255, 0, 376, 256, 257, 258, 259,
	260, 0, 261, 377, 262, 378, 263, 0, 264, 265,
	266, 267, 268, 269, 379, 270, 271, 0, 272, 273,
	274, 275, 276, 278, 279, 277, 280, 281, 282, 283,
	0, 284, 0, 285, 286, 380, 287, 0, 291, 292,
	293, 294, 0, 296, 381, 295, 297, 298, 0, 299,
	288, 289, 300, 0, 301, 382, 383, 302, 0, 309,
	303, 304, 290, 305, 308, 384, 306, 307, 385, 0,
	310, 0, 311, 312, 313, 314, 315, 316, 317, 0,
	386, 387, 388, 0, 0, 318, 319, 389, 390, 0,
	320, 321, 322, 323, 0, 0, 324, 325, 326, 327,
	0, 328, 0, 391, 329, 330, 331, 392, 393, 0,
	909, 332, 176, 0, 0, 0, 333, 334, 335, 336,
	337, 0, 0, 0, 0, 0, 0, 0, 179, 180,
	0, 181, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 182, 183, 184, 339, 340, 341, 342, 185, 343,
	344, 0, 186, 345, 346, 187, 188, 189, 0, 0,
	347, 348, 349, 0, 190, 350, 0, 0, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 0, 0,
	198, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	201, 202, 401, 203, 351, 204, 352, 353, 0, 205,
	0, 206, 0, 207, 0, 0, 208, 209, 0, 210,
	0, 0, 0, 354, 211, 212, 213, 355, 356, 0,
	0, 0, 214, 215, 357, 358, 359, 0, 216, 0,
	217, 0, 0, 0, 218, 0, 219, 360, 0, 361,
	0, 220, 221, 222, 223, 224, 908, 363, 0, 0,
	228, 0, 225, 0, 0, 226, 364, 227, 365, 366,
	367, 368, 369, 0, 370, 0, 0, 229, 230, 231,
	0, 232, 233, 234, 0, 236, 235, 0, 371, 0,
	237, 0, 0, 238, 0, 0, 239, 0, 240, 241,
	242, 244, 372, 243, 0, 245, 246, 248, 247, 0,
	0, 0, 373, 249, 374, 250, 251, 0, 252, 0,
	0, 253, 0, 0, 254, 375, 0, 255, 0, 376,
	256, 257, 258, 259, 260, 0, 261, 377, 262, 378,
	263, 0, 264, 265, 266, 267, 268, 269, 379, 270,
	271, 0, 272, 273, 274, 275, 276, 278, 279, 277,
	280, 281, 282, 283, 0, 284, 0, 285, 286, 380,
	287, 0, 291, 292, 293, 294, 0, 296, 381, 295,
	297, 298, 0, 299, 288, 289, 300, 0, 301, 382,
	383, 302, 0, 309, 303, 304, 290, 305, 308, 384,
	306, 307, 385, 0, 310, 0, 311, 312, 313, 314,
	315, 316, 317, 0, 386, 387, 388, 0, 0, 318,
	319, 389, 390, 0, 320, 321, 322, 323, 0, 0,
	324, 325, 326, 327, 0, 328, 0, 391, 329, 330,
	331, 392, 393, 0, 905, 332, 176, 0, 0, 0,
	333, 334, 335, 336, 337, 0, 0, 0, 0, 0,
	0, 0, 179, 180, 0, 181, 0, 0, 0, 0,
	338, 0, 0, 0, 0, 182, 183, 184, 339, 340,
	341, 342, 185, 343, 344, 0, 186, 345, 346, 187,
	188, 189, 0, 0, 347, 348, 349, 0, 190, 350,
	0, 0, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 0, 0, 198, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 201, 202, 401, 203, 351, 204,
	352, 353, 0, 205, 0, 206, 0, 207, 0, 0,
	208, 209, 0, 210, 0, 0, 0, 354, 211, 212,
	213, 355, 356, 0, 0, 0, 214, 215, 357, 358,
	359, 0, 216, 0, 217, 0, 0, 0, 218, 0,
	219, 360, 0, 361, 0, 220, 221, 222, 223, 224,
	904, 363, 0, 0, 228, 0, 225, 0, 0, 226,
	364, 227, 365, 366, 367, 368, 369, 0, 370, 0,
	0, 229, 230, 231, 0, 232, 233, 234, 0, 236,
	235, 0, 371, 0, 237, 0, 0, 238, 0, 0,
	239, 0, 240, 241, 242, 244, 372, 243, 0, 245,
	246, 248, 247, 0, 0, 0, 373, 249, 374, 250,
	251, 0, 252, 0, 0, 253, 0, 0, 254, 375,
	0, 255, 0, 376, 256, 257, 258, 259, 260, 0,
	261, 377, 262, 378, 263, 0, 264, 265, 266, 267,
	268, 269, 379, 270, 271, 0, 272, 273, 274, 275,
	276, 278, 279, 277, 280, 281, 282, 283, 0, 284,
	0, 285, 286, 380, 287, 0, 291, 292, 293, 294,
	0, 296, 381, 295, 297, 298, 0, 299, 288, 289,
	300, 0, 301, 382, 383, 302, 0, 309, 303, 304,
	290, 305, 308, 384, 306, 307, 385, 0, 310, 0,
	311, 312, 313, 314, 315, 316, 317, 0, 386, 387,
	388, 0, 0, 318, 319, 389, 390, 0, 320, 321,
	322, 323, 0, 0, 324, 325, 326, 327, 0, 328,
	0, 391, 329, 330, 331, 392, 393, 0, 902, 332,
	176, 0, 0, 0, 333, 334, 335, 336, 337, 0,
	0, 0, 0, 0, 0, 0, 179, 180, 0, 181,
	0, 0, 0, 0, 338, 0, 0, 0, 0, 182,
	183, 184, 339, 340, 341, 342, 185, 343, 344, 0,
	186, 345, 346, 187, 188, 189, 0, 0, 347, 348,
	349, 0, 190, 350, 0, 0, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 0, 0, 198, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 201, 202,
	401, 203, 351, 204, 352, 353, 0, 205, 0, 206,
	0, 207, 0, 0, 208, 209, 0, 210, 0, 0,
	0, 354, 211, 212, 213, 355, 356, 0, 0, 0,
	214, 215, 357, 358, 359, 0, 216, 0, 217, 0,
	0, 0, 218, 0, 219, 360, 0, 361, 0, 220,
	221, 222, 223, 224, 901, 363, 0, 0, 228, 0,
	225, 0, 0, 226, 364, 227, 365, 366, 367, 368,
	369, 0, 370, 0, 0, 229, 230, 231, 0, 232,
	233, 234, 0, 236, 235, 0, 371, 0, 237, 0,
	0, 238, 0, 0, 239, 0, 240, 241, 242, 244,
	372, 243, 0, 245, 246, 248, 247, 0, 0, 0,
	373, 249, 374, 250, 251, 0, 252, 0, 0, 253,
	0, 0, 254, 375, 0, 255, 0, 376, 256, 257,
	258, 259, 260, 0, 261, 377, 262, 378, 263, 0,
	264, 265, 266, 267, 268, 269, 379, 270, 271, 0,
	272, 273, 274, 275, 276, 278, 279, 277, 280, 281,
	282, 283, 0, 284, 0, 285, 286, 380, 287, 0,
	291, 292, 293, 294, 0, 296, 381, 295, 297, 298,
	0, 299, 288, 289, 300, 0, 301, 382, 383, 302,
	0, 309, 303, 304, 290, 305, 308, 384, 306, 307,
	385, 0, 310, 0, 311, 312, 313, 314, 315, 316,
	317, 0, 386, 387, 388, 0, 0, 318, 319, 389,
	390, 0, 320, 321, 322, 323, 0, 0, 324, 325,
	326, 327, 0, 328, 0, 391, 329, 330, 331, 392,
	393, 0, 898, 332, 176, 0, 0, 0, 333, 334,
	335, 336, 337, 0, 0, 0, 0, 0, 0, 0,
	179, 180, 0, 181, 0, 0, 0, 0, 338, 0,
	0, 0, 0, 182, 183, 184, 339, 340, 341, 342,
	185, 343, 344, 0, 186, 345, 346, 187, 188, 189,
	0, 0, 347, 348, 349, 0, 190, 350, 0, 0,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	0, 0, 198, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 201, 202, 401, 203, 351, 204, 352, 353,
	0, 205, 0, 206, 0, 207, 0, 0, 208, 209,
	0, 210, 0, 0, 0, 354, 211, 212, 213, 355,
	356, 0, 0, 0, 214, 215, 357, 358, 359, 0,
	216, 0, 217, 0, 0, 0, 218, 0, 219, 360,
	0, 361, 0, 220, 221, 222, 223, 224, 897, 363,
	0, 0, 228, 0, 225, 0, 0, 226, 364, 227,
	365, 366, 367, 368, 369, 0, 370, 0, 0, 229,
	230, 231, 0, 232, 233, 234, 0, 236, 235, 0,
	371, 0, 237, 0, 0, 238, 0, 0, 239, 0,
	240, 241, 242, 244, 372, 243, 0, 245, 246, 248,
	247, 0, 0, 0, 373, 249, 374, 250, 251, 0,
	252, 0, 0, 253, 0, 0, 254, 375, 0, 255,
	0, 376, 256, 257, 258, 259, 260, 0, 261, 377,
	262, 378, 263, 0, 264, 265, 266, 267, 268, 269,
	379, 270, 271, 0, 272, 273, 274, 275, 276, 278,
	279, 277, 280, 281, 282, 283, 0, 284, 0, 285,
	286, 380, 287, 0, 291, 292, 293, 294, 0, 296,
	381, 295, 297, 298, 0, 299, 288, 289, 300, 0,
	301, 382, 383, 302, 0, 309, 303, 304, 290, 305,
	308, 384, 306, 307, 385, 0, 310, 0, 311, 312,
	313, 314, 315, 316, 317, 0, 386, 387, 388, 0,
	0, 318, 319, 389, 390, 0, 320, 321, 322, 323,
	0, 0, 324, 325, 326, 327, 0, 328, 0, 391,
	329, 330, 331, 392, 393, 176, 0, 332, 0, 0,
	0, 0, 333, 334, 335, 336, 337, 0, 0, 0,
	0, 179, 180, 886, 181, 0, 0, 0, 0, 338,
	0, 0, 0, 0, 182, 183, 184, 339, 340, 341,
	342, 185, 343, 344, 0, 186, 345, 346, 187, 188,
	189, 0, 0, 347, 348, 349, 0, 190, 350, 0,
	0, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 0, 0, 198, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 201, 202, 401, 203, 351, 204, 352,
	353, 0, 205, 0, 206, 0, 207, 0, 0, 208,
	209, 0, 210, 0, 0, 0, 354, 211, 212, 213,
	355, 356, 0, 0, 0, 214, 215, 357, 358, 359,
	0, 216, 0, 217, 0, 0, 0, 218, 0, 219,
	360, 0, 361, 0, 220, 221, 222, 223, 224, 362,
	363, 0, 0, 228, 0, 225, 0, 0, 226, 364,
	227, 365, 366, 367, 368, 369, 0, 370, 0, 0,
	229, 230, 231, 0, 232, 233, 234, 0, 236, 235,
	0, 371, 0, 237, 0, 0, 238, 0, 0, 239,
	0, 240, 241, 242, 244, 372, 243, 0, 245, 246,
	248, 247, 0, 0, 0, 373, 249, 374, 250, 251,
	0, 252, 0, 0, 253, 0, 0, 254, 375, 0,
	255, 0, 376, 256, 257, 258, 259, 260, 0, 261,
	377, 262, 378, 263, 0, 264, 265, 266, 267, 268,
	269, 379, 270, 271, 0, 272, 273, 274, 275, 276,
	278, 279, 277, 280, 281, 282, 283, 0, 284, 0,
	285, 286, 380, 287, 0, 291, 292, 293, 294, 0,
	296, 381, 295, 297, 298, 0, 299, 288, 289, 300,
	0, 301, 382, 383, 302, 0, 309, 303, 304, 290,
	305, 308, 384, 306, 307, 385, 0, 310, 0, 311,
	312, 313, 314, 315, 316, 317, 0, 386, 387, 388,
	0, 0, 318, 319, 389, 390, 0, 320, 321, 322,
	323, 0, 0, 324, 325, 326, 327, 0, 328, 0,
	391, 329, 330, 331, 392, 393, 0, 882, 332, 176,
	0, 0, 0, 333, 334, 335, 336, 337, 0, 0,
	0, 0, 0, 0, 0, 179, 180, 0, 181, 0,
	0, 0, 0, 338, 0, 0, 0, 0, 182, 183,
	184, 339, 340, 341, 342, 185, 343, 344, 0, 186,
	345, 346, 187, 188, 189, 0, 0, 347, 348, 349,
	0, 190, 350, 0, 0, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 0, 0, 198, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 201, 202, 401,
	203, 351, 204, 352, 353, 0, 205, 0, 206, 0,
	207, 0, 0, 208, 209, 0, 210, 0, 0, 0,
	354, 211, 212, 213, 355, 356, 0, 0, 0, 214,
	215, 357, 358, 359, 0, 216, 0, 217, 0, 0,
	0, 218, 0, 219, 360, 0, 361, 0, 220, 221,
	222, 223, 224, 881, 363, 0, 0, 228, 0, 225,
	0, 0, 226, 364, 227, 365, 366, 367, 368, 369,
	0, 370, 0, 0, 229, 230, 231, 0, 232, 233,
	234, 0, 236, 235, 0, 371, 0, 237, 0, 0,
	238, 0, 0, 239, 0, 240, 241, 242, 244, 372,
	243, 0, 245, 246, 248, 247, 0, 0, 0, 373,
	249, 374, 250, 251, 0, 252, 0, 0, 253, 0,
	0, 254, 375, 0, 255, 0, 376, 256, 257, 258,
	259, 260, 0, 261, 377, 262, 378, 263, 0, 264,
	265, 266, 267, 268, 269, 379, 270, 271, 0, 272,
	273, 274, 275, 276, 278, 279, 277, 280, 281, 282,
	283, 0, 284, 0, 285, 286, 380, 287, 0, 291,
	292, 293, 294, 0, 296, 381, 295, 297, 298, 0,
	299, 288, 289, 300, 0, 301, 382, 383, 302, 0,
	309, 303, 304, 290, 305, 308, 384, 306, 307, 385,
	0, 310, 0, 311, 312, 313, 314, 315, 316, 317,
	0, 386, 387, 388, 0, 0, 318, 319, 389, 390,
	0, 320, 321, 322, 323, 0, 0, 324, 325, 326,
	327, 0, 328, 0, 391, 329, 330, 331, 392, 393,
	0, 878, 332, 176, 0, 0, 0, 333, 334, 335,
	336, 337, 0, 0, 0, 0, 0, 0, 0, 179,
	180, 0, 181, 0, 0, 0, 0, 338, 0, 0,
	0, 0, 182, 183, 184, 339, 340, 341, 342, 185,
	343, 344, 0, 186, 345, 346, 187, 188, 189, 0,
	0, 347, 348, 349, 0, 190, 350, 0, 0, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 0,
	0, 198, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 201, 202, 401, 203, 351, 204, 352, 353, 0,
	205, 0, 206, 0, 207, 0, 0, 208, 209, 0,
	210, 0, 0, 0, 354, 211, 212, 213, 355, 356,
	0, 0, 0, 214, 215, 357, 358, 359, 0, 216,
	0, 217, 0, 0, 0, 218, 0, 219, 360, 0,
	361, 0, 220, 221, 222, 223, 224, 362, 363, 0,
	0, 228, 0, 225, 0, 0, 226, 364, 227, 365,
	366, 367, 368, 369, 0, 370, 0, 0, 229, 230,
	231, 0, 232, 233, 234, 0, 236, 235, 0, 371,
	0, 237, 0, 0, 238, 0, 0, 239, 0, 240,
	241, 242, 244, 372, 243, 0, 245, 246, 248, 247,
	0, 0, 0, 373, 249, 374, 250, 251, 0, 252,
	0, 0, 253, 0, 0, 254, 375, 0, 255, 0,
	376, 256, 257, 258, 259, 260, 0, 261, 377, 262,
	378, 263, 0, 264, 265, 266, 267, 268, 269, 379,
	270, 271, 0, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 0, 284, 0, 285, 286,
	380, 287, 0, 291, 292, 293, 294, 0, 296, 381,
	295, 297, 298, 0, 299, 288, 289, 300, 0, 301,
	382, 383, 302, 0, 309, 303, 304, 290, 305, 308,
	384, 306, 307, 385, 0, 310, 0, 311, 312, 313,
	314, 315, 316, 317, 0, 386, 387, 388, 0, 0,
	318, 319, 389, 390, 0, 320, 321, 322, 323, 0,
	0, 324, 325, 326, 327, 0, 328, 0, 391, 329,
	330, 331, 392, 393, 0, 876, 332, 176, 0, 0,
	0, 333, 334, 335, 336, 337, 0, 0, 0, 0,
	0, 0, 0, 179, 180, 0, 181, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 182, 183, 184, 339,
	340, 341, 342, 185, 343, 344, 0, 186, 345, 346,
	187, 188, 189, 0, 0, 347, 348, 349, 0, 190,
	350, 0, 0, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 0, 0, 198, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 201, 202, 401, 203, 351,
	204, 352, 353, 0, 205, 0, 206, 0, 207, 0,
	0, 208, 209, 0, 210, 0, 0, 0, 354, 211,
	212, 213, 355, 356, 0, 0, 0, 214, 215, 357,
	358, 359, 0, 216, 0, 217, 0, 0, 0, 218,
	0, 219, 360, 0, 361, 0, 220, 221, 222, 223,
	224, 362, 363, 0, 0, 228, 0, 225, 0, 0,
	226, 364, 227, 365, 366, 367, 368, 369, 0, 370,
	0, 0, 229, 230, 231, 0, 232, 233, 234, 0,
	236, 235, 0, 371, 0, 237, 0, 0, 238, 0,
	0, 239, 0, 240, 241, 242, 244, 372, 243, 0,
	245, 246, 248, 247, 0, 0, 0, 373, 249, 374,
	250, 251, 0, 252, 0, 0, 253, 0, 0, 254,
	375, 0, 255, 0, 376, 256, 257, 258, 259, 260,
	0, 261, 377, 262, 378, 263, 0, 264, 265, 266,
	267, 268, 269, 379, 270, 271, 0, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 0,
	284, 0, 285, 286, 380, 287, 0, 291, 292, 293,
	294, 0, 296, 381, 295, 297, 298, 0, 299, 288,
	289, 300, 0, 301, 382, 383, 302, 0, 309, 303,
	304, 290, 305, 308, 384, 306, 307, 385, 0, 310,
	0, 311, 312, 313, 314, 315, 316, 317, 0, 386,
	387, 388, 0, 0, 318, 319, 389, 390, 0, 320,
	321, 322, 323, 0, 0, 324, 325, 326, 327, 0,
	328, 0, 391, 329, 330, 331, 392, 393, 0, 872,
	332, 176, 0, 0, 0, 333, 334, 335, 336, 337,
	0, 0, 0, 0, 0, 0, 0, 179, 180, 0,
	181, 0, 0, 0, 0, 338, 0, 0, 0, 0,
	182, 183, 184, 339, 340, 341, 342, 185, 343, 344,
	0, 186, 345, 346, 187, 188, 189, 0, 0, 347,
	348, 349, 0, 190, 350, 0, 0, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 0, 0, 198,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 201,
	202, 401, 203, 351, 204, 352, 353, 0, 205, 0,
	206, 0, 207, 0, 0, 208, 209, 0, 210, 0,
	0, 0, 354, 211, 212, 213, 355, 356, 0, 0,
	0, 214, 215, 357, 358, 359, 0, 216, 0, 217,
	0, 0, 0, 218, 0, 219, 360, 0, 361, 0,
	220, 221, 222, 223, 224, 874, 363, 0, 0, 228,
	0, 225, 0, 0, 226, 364, 227, 365, 366, 367,
	368, 369, 0, 370, 0, 0, 229, 230, 231, 0,
	232, 233, 234, 0, 236, 235, 0, 371, 0, 237,
	0, 0, 238, 0, 0, 239, 0, 240, 241, 242,
	244, 372, 243, 0, 245, 246, 248, 247, 0, 0,
	0, 373, 249, 374, 250, 251, 0, 252, 0, 0,
	253, 0, 0, 254, 375, 0, 255, 0, 376, 256,
	257, 258, 259, 260, 0, 261, 377, 262, 378, 263,
	0, 264, 265, 266, 267, 268, 269, 379, 270, 271,
	0, 272, 273, 274, 275, 276, 278, 279, 277, 280,
	281, 282, 283, 0, 284, 0, 285, 286, 380, 287,
	0, 291, 292, 293, 294, 0, 296, 381, 295, 297,
	298, 0, 299, 288, 289, 300, 0, 301, 382, 383,
	302, 0, 309, 303, 304, 290, 305, 308, 384, 306,
	307, 385, 0, 310, 0, 311, 312, 313, 314, 315,
	316, 317, 0, 386, 387, 388, 0, 0, 318, 319,
	389, 390, 0, 320, 321, 322, 323, 0, 0, 324,
	325, 326, 327, 0, 328, 0, 391, 329, 330, 331,
	392, 393, 0, 751, 332, 176, 0, 0, 0, 333,
	334, 335, 336, 337, 0, 0, 0, 0, 0, 0,
	0, 179, 180, 0, 181, 0, 0, 0, 0, 338,
	0, 0, 0, 0, 182, 183, 184, 339, 340, 341,
	342, 185, 343, 344, 0, 186, 345, 346, 187, 188,
	189, 0, 0, 347, 348, 349, 0, 190, 350, 0,
	0, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 0, 0, 198, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 201, 202, 401, 203, 351, 204, 352,
	353, 0, 205, 0, 206, 0, 207, 0, 0, 208,
	209, 0, 210, 0, 0, 0, 354, 211, 212, 213,
	355, 356, 0, 0, 0, 214, 215, 357, 358, 359,
	0, 216, 0, 217, 0, 0, 0, 218, 0, 219,
	360, 0, 361, 0, 220, 221, 222, 223, 224, 753,
	363, 0, 0, 228, 0, 225, 0, 0, 226, 364,
	227, 365, 366, 367, 368, 369, 0, 370, 0, 0,
	229, 230, 231, 0, 232, 233, 234, 0, 236, 235,
	0, 371, 0, 237, 0, 0, 238, 0, 0, 239,
	0, 240, 241, 242, 244, 372, 243, 0, 245, 246,
	248, 247, 0, 0, 0, 373, 249, 374, 250, 251,
	0, 252, 0, 0, 253, 0, 0, 254, 375, 0,
	255, 0, 376, 256, 257, 258, 259, 260, 0, 261,
	377, 262, 378, 263, 0, 264, 265, 266, 267, 268,
	269, 379, 270, 271, 0, 272, 273, 274, 275, 276,
	278, 279, 277, 280, 281, 282, 283, 0, 284, 0,
	285, 286, 380, 287, 0, 291, 292, 293, 294, 0,
	296, 381, 295, 297, 298, 0, 299, 288, 289, 300,
	0, 301, 382, 383, 302, 0, 309, 303, 304, 290,
	305, 308, 384, 306, 307, 385, 0, 310, 0, 311,
	312, 313, 314, 315, 316, 317, 0, 386, 387, 388,
	0, 0, 318, 319, 389, 390, 0, 320, 321, 322,
	323, 0, 0, 324, 325, 326, 327, 0, 328, 0,
	391, 329, 330, 331, 392, 393, 0, 749, 332, 176,
	0, 0, 0, 333, 334, 335, 336, 337, 0, 0,
	0, 0, 0, 0, 0, 179, 180, 0, 181, 0,
	0, 0, 0, 338, 0, 0, 0, 0, 182, 183,
	184, 339, 340, 341, 342, 185, 343, 344, 0, 186,
	345, 346, 187, 188, 189, 0, 0, 347, 348, 349,
	0, 190, 350, 0, 0, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 0, 0, 198, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 201, 202, 401,
	203, 351, 204, 352, 353, 0, 205, 0, 206, 0,
	207, 0, 0, 208, 209, 0, 210, 0, 0, 0,
	354, 211, 212, 213, 355, 356, 0, 0, 0, 214,
	215, 357, 358, 359, 0, 216, 0, 217, 0, 0,
	0, 218, 0, 219, 360, 0, 361, 0, 220, 221,
	222, 223, 224, 362, 363, 0, 0, 228, 0, 225,
	0, 0, 226, 364, 227, 365, 366, 367, 368, 369,
	0, 370, 0, 0, 229, 230, 231, 0, 232, 233,
	234, 0, 236, 235, 0, 371, 0, 237, 0, 0,
	238, 0, 0, 239, 0, 240, 241, 242, 244, 372,
	243, 0, 245, 246, 248, 247, 0, 0, 0, 373,
	249, 374, 250, 251, 0, 252, 0, 0, 253, 0,
	0, 254, 375, 0, 255, 0, 376, 256, 257, 258,
	259, 260, 0, 261, 377, 262, 378, 263, 0, 264,
	265, 266, 267, 268, 269, 379, 270, 271, 0, 272,
	273, 274, 275, 276, 278, 279, 277, 280, 281, 282,
	283, 0, 284, 0, 285, 286, 380, 287, 0, 291,
	292, 293, 294, 0, 296, 381, 295, 297, 298, 0,
	299, 288, 289, 300, 0, 301, 382, 383, 302, 0,
	309, 303, 304, 290, 305, 308, 384, 306, 307, 385,
	0, 310, 0, 311, 312, 313, 314, 315, 316, 317,
	0, 386, 387, 388, 0, 0, 318, 319, 389, 390,
	0, 320, 321, 322, 323, 0, 0, 324, 325, 326,
	327, 0, 328, 0, 391, 329, 330, 331, 392, 393,
	0, 615, 332, 176, 0, 0, 0, 333, 334, 335,
	336, 337, 0, 0, 0, 0, 0, 0, 0, 179,
	180, 0, 181, 0, 0, 0, 0, 338, 0, 0,
	0, 0, 182, 183, 184, 339, 340, 341, 342, 185,
	343, 344, 0, 186, 345, 346, 187, 188, 189, 0,
	0, 347, 348, 349, 0, 606, 350, 0, 0, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 0,
	0, 198, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 201, 202, 401, 203, 351, 204, 352, 353, 0,
	205, 0, 206, 0, 207, 0, 0, 208, 209, 0,
	210, 0, 0, 0, 354, 211, 212, 213, 355, 356,
	0, 0, 0, 214, 215, 357, 358, 359, 0, 216,
	0, 217, 0, 0, 0, 218, 0, 219, 360, 0,
	361, 0, 220, 221, 222, 223, 224, 362, 363, 0,
	0, 228, 0, 225, 0, 0, 226, 364, 227, 365,
	366, 367, 368, 369, 0, 370, 0, 0, 229, 230,
	231, 0, 232, 233, 234, 0, 236, 235, 0, 371,
	0, 237, 0, 0, 605, 0, 0, 239, 0, 240,
	241, 242, 244, 372, 617, 0, 245, 246, 248, 247,
	0, 0, 0, 373, 249, 374, 250, 251, 0, 252,
	0, 0, 253, 0, 0, 254, 375, 0, 255, 0,
	376, 256, 257, 258, 259, 260, 0, 261, 377, 262,
	378, 263, 0, 264, 265, 266, 267, 268, 269, 379,
	270, 271, 0, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 0, 284, 0, 285, 286,
	607, 287, 0, 291, 292, 293, 294, 0, 296, 381,
	295, 608, 298, 0, 299, 288, 289, 300, 0, 301,
	382, 383, 302, 0, 309, 303, 304, 290, 305, 308,
	384, 306, 307, 385, 0, 310, 0, 311, 312, 313,
	314, 315, 316, 317, 0, 612, 387, 388, 0, 0,
	318, 610, 389, 390, 0, 320, 321, 322, 323, 0,
	0, 324, 325, 326, 327, 0, 328, 0, 391, 329,
	330, 331, 392, 393, 0, 590, 332, 176, 0, 0,
	0, 333, 334, 335, 336, 337, 0, 0, 0, 0,
	0, 0, 0, 179, 180, 0, 181, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 182, 183, 184, 339,
	340, 341, 342, 185, 343, 344, 0, 186, 345, 346,
	187, 188, 189, 0, 0, 347, 348, 349, 0, 190,
	350, 0, 0, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 0, 0, 198, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 201, 202, 401, 203, 351,
	204, 352, 353, 0, 205, 0, 206, 0, 207, 0,
	0, 208, 209, 0, 210, 0, 0, 0, 354, 211,
	212, 213, 355, 356, 0, 0, 0, 214, 215, 357,
	358, 359, 0, 216, 0, 217, 0, 0, 0, 218,
	0, 219, 360, 0, 361, 0, 220, 221, 222, 223,
	224, 362, 363, 0, 0, 228, 0, 225, 0, 0,
	226, 364, 227, 365, 366, 367, 368, 369, 0, 370,
	0, 0, 229, 230, 231, 0, 232, 233, 234, 0,
	236, 235, 0, 371, 0, 237, 0, 0, 238, 0,
	0, 239, 0, 240, 241, 242, 244, 372, 243, 0,
	245, 246, 248, 247, 0, 0, 0, 373, 249, 374,
	250, 251, 0, 252, 0, 0, 253, 0, 0, 254,
	375, 0, 255, 0, 376, 256, 257, 258, 259, 260,
	0, 261, 377, 262, 378, 263, 0, 264, 265, 266,
	267, 268, 269, 379, 270, 271, 0, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 0,
	284, 0, 285, 286, 380, 287, 0, 591, 292, 293,
	294, 0, 296, 381, 295, 297, 298, 0, 299, 288,
	289, 300, 0, 301, 382, 383, 302, 0, 309, 303,
	304, 290, 305, 308, 384, 306, 307, 385, 0, 310,
	0, 311, 312, 313, 314, 315, 316, 317, 0, 386,
	387, 388, 0, 0, 318, 319, 389, 390, 0, 320,
	321, 322, 323, 0, 0, 324, 325, 326, 327, 0,
	328, 0, 391, 329, 330, 331, 392, 393, 0, 588,
	332, 176, 0, 0, 0, 333, 334, 335, 336, 337,
	0, 0, 0, 0, 0, 0, 0, 179, 180, 0,
	181, 0, 0, 0, 0, 338, 0, 0, 0, 0,
	182, 183, 184, 339, 340, 341, 342, 185, 343, 344,
	0, 186, 345, 346, 187, 188, 189, 0, 0, 347,
	348, 349, 0, 190, 350, 0, 0, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 0, 0, 198,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 201,
	202, 401, 203, 351, 204, 352, 353, 0, 205, 0,
	206, 0, 207, 0, 0, 208, 209, 0, 210, 0,
	0, 0, 354, 211, 212, 213, 355, 356, 0, 0,
	0, 214, 215, 357, 358, 359, 0, 216, 0, 217,
	0, 0, 0, 218, 0, 219, 360, 0, 361, 0,
	220, 221, 222, 223, 224, 362, 363, 0, 0, 228,
	0, 225, 0, 0, 226, 364, 227, 365, 366, 367,
	368, 369, 0, 370, 0, 0, 229, 230, 231, 0,
	232, 233, 234, 0, 236, 235, 0, 371, 0, 237,
	0, 0, 238, 0, 0, 239, 0, 240, 241, 242,
	244, 372, 243, 0, 245, 246, 248, 247, 0, 0,
	0, 373, 249, 374, 250, 251, 0, 252, 0, 0,
	253, 0, 0, 254, 375, 0, 255, 0, 376, 256,
	257, 258, 259, 260, 0, 261, 377, 262, 378, 263,
	0, 264, 265, 266, 267, 268, 269, 379, 270, 271,
	0, 272, 273, 274, 275, 276, 278, 279, 277, 280,
	281, 282, 283, 0, 284, 0, 285, 286, 380, 287,
	0, 291, 292, 293, 294, 0, 296, 381, 295, 297,
	298, 0, 299, 288, 289, 300, 0, 301, 382, 383,
	302, 0, 309, 303, 304, 290, 305, 308, 384, 306,
	307, 385, 0, 310, 0, 311, 312, 313, 314, 315,
	316, 317, 0, 386, 387, 388, 0, 0, 318, 319,
	389, 390, 0, 320, 321, 322, 323, 0, 0, 324,
	325, 326, 327, 0, 328, 0, 391, 329, 330, 331,
	392, 393, 0, 580, 332, 176, 0, 0, 0, 333,
	334, 335, 336, 337, 0, 0, 0, 0, 0, 0,
	0, 179, 180, 0, 181, 0, 0, 0, 0, 338,
	0, 0, 0, 0, 182, 183, 184, 339, 340, 341,
	342, 185, 343, 344, 0, 186, 345, 346, 187, 188,
	189, 0, 0, 347, 348, 349, 0, 190, 350, 0,
	0, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 0, 0, 198, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 201, 202, 401, 203, 351, 204, 352,
	353, 0, 205, 0, 206, 0, 207, 0, 0, 208,
	209, 0, 210, 0, 0, 0, 354, 211, 212, 213,
	355, 356, 0, 0, 0, 214, 215, 357, 358, 359,
	0, 216, 0, 217, 0, 0, 0, 218, 0, 219,
	360, 0, 361, 0, 220, 221, 222, 223, 224, 362,
	363, 0, 0, 228, 0, 225, 0, 0, 226, 364,
	227, 365, 366, 367, 368, 369, 0, 370, 0, 0,
	229, 230, 231, 0, 232, 233, 234, 0, 236, 235,
	0, 371, 0, 237, 0, 0, 238, 0, 0, 239,
	0, 240, 241, 242, 244, 372, 243, 0, 245, 246,
	248, 247, 0, 0, 0, 373, 249, 374, 250, 251,
	0, 252, 0, 0, 253, 0, 0, 254, 375, 0,
	255, 0, 376, 256, 257, 258, 259, 260, 0, 261,
	377, 262, 378, 263, 0, 264, 265, 266, 267, 268,
	269, 379, 270, 271, 0, 272, 273, 274, 275, 276,
	278, 279, 277, 280, 281, 282, 283, 0, 284, 0,
	285, 286, 380, 287, 0, 291, 292, 293, 294, 0,
	296, 381, 295, 297, 298, 0, 299, 288, 289, 300,
	0, 301, 382, 383, 302, 0, 309, 303, 304, 290,
	305, 308, 384, 306, 307, 385, 0, 310, 0, 311,
	312, 313, 314, 315, 316, 317, 0, 386, 387, 388,
	0, 0, 318, 319, 389, 390, 0, 320, 321, 322,
	323, 0, 0, 324, 325, 326, 327, 0, 328, 0,
	391, 329, 330, 331, 392, 393, 0, 444, 332, 176,
	0, 0, 0, 333, 334, 335, 336, 337, 0, 0,
	0, 0, 0, 0, 0, 179, 180, 0, 181, 0,
	0, 0, 0, 338, 0, 0, 0, 0, 182, 183,
	184, 339, 340, 341, 342, 185, 343, 344, 0, 186,
	345, 346, 187, 188, 189, 0, 0, 347, 348, 349,
	0, 190, 350, 0, 0, 0, 191, 192, 193, 0,
	194, 0, 195, 196, 197, 0, 0, 198, 199, 200,
	0, 0, 0, 0, 0, 0, 0, 201, 202, 401,
	203, 351, 204, 352, 353, 0, 205, 0, 206, 0,
	207, 0, 0, 208, 209, 0, 210, 0, 0, 0,
	354, 211, 212, 213, 355, 356, 0, 0, 0, 214,
	215, 357, 358, 359, 0, 216, 0, 217, 0, 0,
	0, 218, 0, 219, 360, 0, 361, 0, 220, 221,
	222, 223, 224, 362, 363, 0, 0, 228, 0, 225,
	0, 0, 226, 364, 227, 365, 366, 367, 368, 369,
	0, 370, 0, 0, 229, 230, 231, 0, 232, 233,
	234, 0, 236, 235, 0, 371, 0, 237, 0, 0,
	238, 0, 0, 239, 0, 240, 241, 242, 244, 372,
	243, 0, 245, 246, 248, 247, 0, 0, 0, 373,
	249, 374, 250, 251, 0, 252, 0, 0, 253, 0,
	0, 254, 375, 0, 255, 0, 376, 256, 257, 258,
	259, 260, 0, 261, 377, 262, 378, 263, 0, 264,
	265, 266, 267, 268, 269, 379, 270, 271, 0, 272,
	273, 274, 275, 276, 278, 279, 277, 280, 281, 282,
	283, 0, 284, 0, 285, 286, 380, 287, 0, 291,
	292, 293, 294, 0, 296, 381, 295, 297, 298, 0,
	299, 288, 289, 300, 0, 301, 382, 383, 302, 0,
	309, 303, 304, 290, 305, 308, 384, 306, 307, 385,
	0, 310, 0, 311, 312, 313, 314, 315, 316, 317,
	0, 386, 387, 388, 0, 0, 318, 319, 389, 390,
	0, 320, 321, 322, 323, 0, 0, 324, 325, 326,
	327, 0, 328, 0, 391, 329, 330, 331, 392, 393,
	176, 0, 332, 0, 0, 0, 0, 333, 334, 335,
	336, 337, 0, 0, 0, 0, 179, 180, 0, 181,
	0, 0, 0, 0, 338, 0, 0, 0, 0, 182,
	183, 184, 339, 340, 341, 342, 185, 343, 344, 0,
	186, 345, 346, 187, 188, 189, 0, 0, 347, 348,
	349, 0, 190, 350, 0, 0, 0, 191, 192, 193,
	0, 194, 0, 195, 196, 197, 0, 0, 198, 199,
	200, 0, 0, 0, 0, 0, 0, 0, 201, 202,
	401, 203, 351, 204, 352, 353, 0, 205, 0, 206,
	0, 207, 0, 0, 208, 209, 0, 210, 0, 0,
	0, 354, 211, 212, 213, 355, 356, 0, 0, 0,
	214, 215, 357, 358, 359, 0, 216, 0, 217, 0,
	0, 0, 218, 0, 219, 360, 0, 361, 0, 220,
	221, 222, 223, 224, 362, 363, 0, 0, 228, 0,
	225, 0, 0, 226, 364, 227, 365, 366, 367, 368,
	369, 0, 370, 0, 0, 229, 230, 231, 0, 232,
	233, 234, 0, 236, 235, 0, 371, 0, 237, 0,
	0, 238, 0, 0, 239, 0, 240, 241, 242, 244,
	372, 243, 0, 245, 246, 248, 247, 0, 0, 0,
	373, 249, 374, 250, 251, 0, 252, 0, 0, 253,
	0, 0, 254, 375, 0, 255, 0, 376, 256, 257,
	258, 259, 260, 0, 261, 377, 262, 378, 263, 0,
	264, 265, 266, 267, 268, 269, 379, 270, 271, 0,
	272, 273, 274, 275, 276, 278, 279, 277, 280, 281,
	282, 283, 0, 284, 0, 285, 286, 380, 287, 0,
	291, 292, 293, 294, 0, 296, 381, 295, 297, 298,
	0, 299, 288, 289, 300, 0, 301, 382, 383, 302,
	0, 309, 303, 304, 290, 305, 308, 384, 306, 307,
	385, 0, 310, 0, 311, 312, 313, 314, 315, 316,
	317, 0, 386, 387, 388, 0, 0, 318, 319, 389,
	390, 0, 320, 321, 322, 323, 0, 0, 324, 325,
	326, 327, 0, 328, 0, 391, 329, 330, 331, 392,
	393, 176, 0, 332, 0, 0, 0, 0, 333, 334,
	335, 336, 337, 0, 0, 0, 0, 179, 180, 0,
	181, 0, 0, 0, 0, 338, 0, 0, 0, 0,
	182, 183, 184, 339, 340, 341, 342, 185, 343, 344,
	0, 186, 345, 346, 187, 188, 189, 0, 0, 347,
	348, 349, 0, 190, 350, 0, 0, 0, 191, 192,
	193, 0, 194, 0, 195, 196, 197, 0, 0, 198,
	199, 200, 0, 0, 0, 0, 0, 0, 0, 201,
	202, 401, 203, 351, 204, 352, 353, 0, 205, 0,
	206, 0, 207, 0, 0, 208, 209, 0, 210, 0,
	0, 0, 354, 211, 212, 213, 355, 356, 0, 0,
	0, 214, 215, 357, 358, 359, 0, 216, 0, 217,
	0, 0, 0, 218, 0, 219, 360, 0, 361, 0,
	220, 221, 222, 223, 224, 1762, 363, 0, 0, 228,
	0, 225, 0, 0, 226, 364, 227, 365, 366, 367,
	368, 369, 0, 370, 0, 0, 229, 230, 231, 0,
	232, 233, 234, 0, 236, 235, 0, 371, 0, 237,
	0, 0, 238, 0, 0, 239, 0, 240, 241, 242,
	244, 372, 243, 0, 245, 246, 248, 247, 0, 0,
	0, 373, 249, 374, 250, 251, 0, 252, 0, 0,
	253, 0, 0, 254, 375, 0, 255, 0, 376, 256,
	257, 258, 259, 260, 0, 261, 377, 262, 378, 263,
	0, 264, 265, 266, 267, 268, 269, 379, 270, 271,
	0, 272, 273, 274, 275, 276, 278, 279, 277, 280,
	281, 282, 283, 0, 284, 0, 285, 286, 380, 287,
	0, 291, 292, 293, 294, 0, 296, 381, 295, 297,
	298, 0, 299, 288, 289, 300, 0, 301, 382, 383,
	302, 0, 309, 303, 304, 290, 305, 308, 384, 306,
	307, 385, 0, 310, 0, 311, 312, 313, 314, 315,
	316, 317, 0, 386, 387, 388, 0, 0, 318, 319,
	389, 390, 0, 320, 321, 322, 323, 0, 0, 324,
	325, 326, 327, 0, 328, 0, 391, 329, 330, 331,
	392, 393, 176, 0, 332, 0, 0, 0, 0, 333,
	334, 335, 336, 337, 0, 0, 0, 0, 179, 180,
	0, 181, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 182, 183, 184, 339, 340, 341, 342, 185, 343,
	344, 0, 186, 345, 346, 187, 188, 189, 0, 0,
	347, 348, 349, 0, 190, 350, 0, 0, 0, 191,
	192, 193, 0, 194, 0, 195, 196, 197, 0, 0,
	198, 199, 200, 0, 0, 0, 0, 0, 0, 0,
	201, 202, 401, 203, 351, 204, 352, 353, 0, 205,
	0, 206, 0, 207, 0, 0, 208, 209, 0, 210,
	0, 0, 0, 354, 211, 212, 213, 355, 356, 0,
	0, 0, 214, 215, 357, 358, 359, 0, 216, 0,
	217, 0, 0, 0, 218, 0, 219, 360, 0, 361,
	0, 220, 221, 222, 223, 224, 1760, 363, 0, 0,
	228, 0, 225, 0, 0, 226, 364, 227, 365, 366,
	367, 368, 369, 0, 370, 0, 0, 229, 230, 231,
	0, 232, 233, 234, 0, 236, 235, 0, 371, 0,
	237, 0, 0, 238, 0, 0, 239, 0, 240, 241,
	242, 244, 372, 243, 0, 245, 246, 248, 247, 0,
	0, 0, 373, 249, 374, 250, 251, 0, 252, 0,
	0, 253, 0, 0, 254, 375, 0, 255, 0, 376,
	256, 257, 258, 259, 260, 0, 261, 377, 262, 378,
	263, 0, 264, 265, 266, 267, 268, 269, 379, 270,
	271, 0, 272, 273, 274, 275, 276, 278, 279, 277,
	280, 281, 282, 283, 0, 284, 0, 285, 286, 380,
	287, 0, 291, 292, 293, 294, 0, 296, 381, 295,
	297, 298, 0, 299, 288, 289, 300, 0, 301, 382,
	383, 302, 0, 309, 303, 304, 290, 305, 308, 384,
	306, 307, 385, 0, 310, 0, 311, 312, 313, 314,
	315, 316, 317, 0, 386, 387, 388, 0, 0, 318,
	319, 389, 390, 0, 320, 321, 322, 323, 0, 0,
	324, 325, 326, 327, 0, 328, 0, 391, 329, 330,
	331, 392, 393, 176, 0, 332, 0, 0, 0, 0,
	333, 334, 335, 336, 337, 0, 0, 0, 0, 179,
	180, 0, 181, 0, 0, 0, 0, 338, 0, 0,
	0, 0, 182, 183, 184, 339, 340, 341, 342, 185,
	343, 344, 0, 186, 345, 346, 187, 188, 189, 0,
	0, 347, 348, 349, 0, 190, 350, 0, 0, 0,
	191, 192, 193, 0, 194, 0, 195, 196, 197, 0,
	0, 198, 199, 200, 0, 0, 0, 0, 0, 0,
	0, 201, 202, 401, 203, 351, 204, 352, 353, 0,
	205, 0, 206, 0, 207, 0, 0, 208, 209, 0,
	210, 0, 0, 0, 354, 211, 212, 213, 355, 356,
	0, 0, 0, 214, 215, 357, 358, 359, 0, 216,
	0, 217, 0, 0, 0, 218, 0, 219, 360, 0,
	361, 0, 220, 221, 222, 223, 224, 1749, 363, 0,
	0, 228, 0, 225, 0, 0, 226, 364, 227, 365,
	366, 367, 368, 369, 0, 370, 0, 0, 229, 230,
	231, 0, 232, 233, 234, 0, 236, 235, 0, 371,
	0, 237, 0, 0, 238, 0, 0, 239, 0, 240,
	241, 242, 244, 372, 243, 0, 245, 246, 248, 247,
	0, 0, 0, 373, 249, 374, 250, 251, 0, 252,
	0, 0, 253, 0, 0, 254, 375, 0, 255, 0,
	376, 256, 257, 258, 259, 260, 0, 261, 377, 262,
	378, 263, 0, 264, 265, 266, 267, 268, 269, 379,
	270, 271, 0, 272, 273, 274, 275, 276, 278, 279,
	277, 280, 281, 282, 283, 0, 284, 0, 285, 286,
	380, 287, 0, 291, 292, 293, 294, 0, 296, 381,
	295, 297, 298, 0, 299, 288, 289, 300, 0, 301,
	382, 383, 302, 0, 309, 303, 304, 290, 305, 308,
	384, 306, 307, 385, 0, 310, 0, 311, 312, 313,
	314, 315, 316, 317, 0, 386, 387, 388, 0, 0,
	318, 319, 389, 390, 0, 320, 321, 322, 323, 0,
	0, 324, 325, 326, 327, 0, 328, 0, 391, 329,
	330, 331, 392, 393, 176, 0, 332, 0, 0, 0,
	0, 333, 334, 335, 336, 337, 0, 0, 0, 0,
	179, 180, 0, 181, 0, 0, 0, 0, 338, 0,
	0, 0, 0, 182, 183, 184, 339, 340, 341, 342,
	185, 343, 344, 0, 186, 345, 346, 187, 188, 189,
	0, 0, 347, 348, 349, 0, 190, 350, 0, 0,
	0, 191, 192, 193, 0, 194, 0, 195, 196, 197,
	0, 0, 198, 199, 200, 0, 0, 0, 0, 0,
	0, 0, 201, 202, 401, 203, 351, 204, 352, 353,
	0, 205, 0, 206, 0, 207, 0, 0, 208, 209,
	0, 210, 0, 0, 0, 354, 211, 212, 213, 355,
	356, 0, 0, 0, 214, 215, 357, 358, 359, 0,
	216, 0, 217, 0, 0, 0, 218, 0, 219, 360,
	0, 361, 0, 220, 221, 222, 223, 224, 362, 363,
	0, 0, 228, 0, 225, 0, 0, 226, 364, 227,
	365, 366, 367, 368, 369, 0, 370, 0, 0, 229,
	230, 231, 0, 232, 233, 234, 0, 236, 235, 0,
	371, 0, 237, 0, 0, 238, 0, 0, 239, 0,
	240, 241, 242, 244, 372, 243, 0, 245, 246, 248,
	247, 0, 0, 0, 373, 249, 374, 250, 251, 0,
	252, 0, 0, 253, 0, 0, 254, 375, 0, 255,
	0, 376, 256, 257, 258, 259, 260, 0, 261, 377,
	262, 378, 263, 0, 264, 265, 266, 267, 268, 269,
	379, 270, 271, 0, 272, 273, 274, 275, 276, 278,
	279, 277, 280, 281, 282, 283, 0, 284, 0, 285,
	286, 380, 287, 0, 591, 292, 293, 294, 0, 296,
	381, 295, 297, 298, 0, 299, 288, 289, 300, 0,
	301, 382, 383, 302, 0, 309, 303, 304, 290, 305,
	308, 384, 306, 307, 385, 0, 310, 0, 311, 312,
	313, 314, 315, 316, 317, 0, 386, 387, 388, 0,
	0, 318, 319, 389, 390, 0, 320, 321, 322, 323,
	0, 0, 324, 325, 326, 327, 0, 328, 0, 391,
	329, 330, 331, 392, 393, 176, 0, 332, 0, 0,
	0, 0, 333, 334, 335, 336, 337, 0, 0, 0,
	0, 179, 180, 0, 181, 0, 0, 0, 0, 338,
	0, 1227, 0, 0, 182, 183, 184, 339, 340, 341,
	342, 185, 343, 344, 0, 186, 345, 346, 187, 188,
	189, 0, 0, 347, 348, 349, 0, 190, 350, 0,
	0, 0, 191, 192, 193, 0, 194, 0, 195, 196,
	197, 0, 0, 198, 199, 200, 0, 0, 0, 0,
	0, 0, 0, 201, 202, 401, 203, 351, 204, 352,
	353, 0, 205, 0, 206, 0, 207, 0, 0, 208,
	209, 0, 210, 0, 0, 0, 354, 211, 212, 213,
	355, 356, 0, 0, 0, 214, 215, 357, 358, 359,
	0, 216, 0, 217, 0, 0, 0, 218, 0, 219,
	360, 0, 361, 0, 220, 221, 222, 223, 224, 362,
	363, 0, 0, 228, 0, 225, 0, 0, 226, 364,
	227, 365, 366, 367, 368, 369, 0, 370, 0, 0,
	229, 230, 231, 0, 232, 233, 234, 0, 236, 235,
	0, 371, 0, 237, 0, 0, 238, 0, 0, 239,
	0, 240, 241, 242, 244, 372, 243, 0, 245, 246,
	248, 247, 0, 0, 0, 373, 249, 374, 250, 251,
	0, 252, 0, 0, 253, 0, 0, 254, 375, 0,
	255, 0, 376, 256, 257, 258, 259, 260, 0, 261,
	377, 262, 378, 263, 0, 264, 265, 266, 267, 268,
	269, 379, 270, 271, 0, 272, 273, 274, 275, 276,
	278, 279, 277, 280, 281, 282, 283, 0, 284, 0,
	285, 286, 380, 287, 0, 291, 292, 293, 294, 0,
	296, 381, 295, 297, 298, 0, 0, 288, 289, 300,
	0, 301, 382, 383, 302, 0, 309, 303, 304, 290,
	305, 308, 384, 306, 307, 385, 0, 310, 0, 311,
	312, 313, 314, 315, 316, 317, 0, 386, 387, 388,
	0, 0, 318, 319, 389, 390, 0, 320, 321, 322,
	323, 0, 0, 324, 325, 326, 327, 0, 328, 0,
	391, 329, 330, 331, 392, 393, 176, 0, 332, 0,
	0, 0, 0, 333, 334, 335, 336, 337, 0, 0,
	0, 0, 179, 180, 0, 181, 0, 0, 0, 0,
	338, 0, 0, 0, 0, 182, 183, 184, 339, 340,
	341, 342, 185, 343, 344, 0, 186, 345, 346, 187,
	188, 189, 0, 0, 347, 348, 349, 0, 190, 350,
	0, 0, 0, 191, 192, 193, 0, 194, 0, 195,
	196, 197, 0, 0, 198, 199, 200, 0, 0, 0,
	0, 0, 0, 0, 201, 202, 401, 203, 351, 204,
	352, 353, 0, 205, 0, 206, 0, 207, 0, 0,
	208, 209, 0, 210, 0, 0, 0, 354, 211, 212,
	213, 355, 356, 0, 0, 0, 214, 215, 357, 358,
	359, 0, 216, 0, 217, 0, 0, 0, 218, 0,
	219, 360, 0, 361, 0, 220, 221, 222, 223, 224,
	362, 363, 0, 0, 228, 0, 225, 0, 0, 226,
	364, 227, 365, 366, 367, 368, 369, 0, 370, 0,
	0, 229, 230, 231, 0, 232, 233, 234, 0, 236,
	235, 0, 371, 0, 237, 0, 0, 238, 0, 0,
	239, 0, 240, 241, 242, 244, 372, 243, 0, 245,
	246, 248, 247, 0, 0, 0, 373, 249, 374, 250,
	251, 0, 252, 0, 0, 253, 0, 0, 254, 375,
	0, 255, 0, 376, 256, 257, 258, 259, 260, 0,
	261, 377, 262, 378, 263, 0, 264, 265, 266, 267,
	268, 269, 379, 715, 271, 0, 272, 273, 274, 275,
	276, 278, 279, 277, 280, 281, 282, 283, 0, 284,
	0, 285, 286, 380, 287, 0, 291, 292, 293, 294,
	0, 296, 381, 295, 297, 298, 0, 299, 288, 289,
	300, 0, 301, 382, 383, 302, 0, 309, 303, 304,
	290, 305, 308, 384, 306, 307, 385, 0, 310, 0,
	311, 312, 313, 314, 315, 316, 317, 0, 386, 387,
	388, 0, 0, 318, 319, 389, 390, 0, 320, 321,
	322, 323, 0, 0, 324, 325, 326, 327, 0, 328,
	0, 391, 329, 330, 331, 392, 393, 176, 0, 332,
	0, 0, 0, 0, 333, 334, 335, 336, 337, 0,
	0, 0, 0, 179, 180, 0, 181, 0, 0, 0,
	0, 338, 0, 0, 0, 0, 182, 183, 184, 339,
	340, 341, 342, 185, 343, 344, 0, 186, 345, 346,
	187, 188, 189, 0, 0, 347, 348, 349, 0, 190,
	350, 0, 0, 0, 191, 192, 193, 0, 194, 0,
	195, 196, 197, 0, 0, 198, 199, 200, 0, 0,
	0, 0, 0, 0, 0, 201, 202, 401, 203, 351,
	204, 352, 353, 0, 205, 0, 206, 0, 207, 0,
	0, 208, 209, 0, 210, 0, 0, 0, 354, 211,
	212, 213, 355, 356, 0, 0, 0, 214, 215, 357,
	358, 359, 0, 216, 0, 217, 0, 0, 0, 218,
	0, 219, 360, 0, 361, 0, 220, 221, 222, 223,
	224, 362, 363, 0, 0, 228, 0, 225, 0, 0,
	226, 364, 227, 365, 366, 367, 368, 369, 0, 370,
	0, 0, 229, 230, 231, 0, 232, 233, 234, 0,
	236, 235, 0, 371, 0, 237, 0, 0, 238, 0,
	0, 239, 0, 240, 241, 242, 244, 372, 243, 0,
	245, 246, 248, 247, 0, 0, 0, 373, 249, 374,
	250, 251, 0, 252, 0, 0, 253, 0, 0, 254,
	375, 0, 255, 0, 376, 256, 257, 0, 259, 260,
	0, 261, 377, 262, 378, 263, 0, 264, 265, 266,
	267, 0, 269, 379, 270, 271, 0, 272, 273, 274,
	275, 276, 278, 279, 277, 280, 281, 282, 283, 0,
	284, 0, 285, 286, 380, 0, 0, 291, 292, 293,
	294, 0, 296, 381, 295, 297, 298, 0, 299, 288,
	289, 300, 0, 301, 382, 383, 302, 0, 309, 303,
	304, 290, 305, 308, 384, 306, 307, 385, 0, 310,
	0, 311, 312, 313, 314, 315, 316, 317, 0, 386,
	387, 388, 0, 0, 318, 319, 389, 390, 0, 320,
	321, 322, 323, 0, 0, 324, 325, 326, 327, 0,
	328, 0, 391, 329, 330, 331, 392, 393, 0, 0,
	332, 0, 0, 0, 0, 333, 334, 335, 336, 337,
	1097, 1098, 0, 1117, 1118, 1119, 1127, 1128, 1129, 0,
	0, 0, 0, 0, 0, 0, 1120, 0, 0, 0,
	0, 0, 0, 1100, 1097, 1098, 1131, 1117, 1118, 1119,
	1127, 1128, 1129, 0, 0, 0, 0, 0, 0, 0,
	1120, 0, 0, 0, 0, 0, 0, 1100, 1099, 0,
	1131, 0, 0, 0, 1114, 0, 0, 0, 1097, 1098,
	0, 1117, 1118, 1119, 1127, 1128, 1129, 0, 0, 0,
	0, 0, 1099, 0, 1120, 0, 0, 0, 1114, 0,
	0, 1100, 0, 0, 1131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 1105,
	0, 0, 1114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1124, 1132, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1130, 0,
	0, 0, 0, 0, 1124, 1132, 0, 0, 0, 0,
	0, 0, 0, 1122, 0, 0, 0, 1105, 0, 1115,
	0, 0, 1130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1122, 1124, 1132,
	0, 0, 0, 1115, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1121, 0,
	0, 1122, 0, 0, 0, 0, 0, 1115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1116, 0, 0, 0, 0, 0, 0,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 1125,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	0, 0, 1097, 1098, 0, 1117, 1118, 1119, 1127, 1128,
	1129, 0, 0, 1125, 0, 0, 0, 0, 1120, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1131, 1097,
	1098, 1116, 1117, 1118, 1119, 1127, 1128, 1129, 0, 0,
	0, 0, 0, 0, 0, 1120, 0, 1125, 0, 0,
	1099, 0, 1100, 0, 0, 1131, 1114, 1123, 0, 0,
	1111, 1112, 1113, 1126, 0, 1110, 1108, 1109, 1101, 1102,
	1103, 1104, 1106, 1107, 0, 0, 0, 1099, 2381, 0,
	0, 1123, 0, 1114, 1111, 1112, 1113, 1126, 0, 1110,
	1108, 1109, 1101, 1102, 1103, 1104, 1106, 1107, 0, 0,
	0, 0, 2326, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 1123, 0, 0, 1111, 1112,
	1113, 1126, 0, 1110, 1108, 1109, 1101, 1102, 1103, 1104,
	1106, 1107, 1124, 1132, 0, 0, 2321, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1130, 0, 0, 0, 0, 0, 0, 0, 0, 1124,
	1132, 0, 0, 0, 0, 1122, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 0, 1130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1122, 0, 0, 0, 1121, 0, 1115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1121, 0, 0, 0, 1097, 1098, 0,
	1117, 1118, 1119, 1127, 1128, 1129, 0, 0, 0, 0,
	0, 0, 0, 1120, 0, 1116, 0, 0, 0, 0,
	1100, 0, 0, 1131, 0, 0, 0, 0, 0, 0,
	0, 1125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1116, 0, 0, 1099, 0, 0, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 0, 1125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 1111, 1112, 1113, 1126, 1105, 1110, 1108, 1109,
	1101, 1102, 1103, 1104, 1106, 1107, 0, 0, 0, 0,
	2317, 0, 0, 0, 0, 0, 1123, 1124, 1132, 1111,
	1112, 1113, 1126, 0, 1110, 1108, 1109, 1101, 1102, 1103,
	1104, 1106, 1107, 0, 0, 1130, 0, 2297, 1097, 1098,
	0, 1117, 1118, 1119, 1127, 1128, 1129, 0, 0, 0,
	1122, 0, 0, 0, 1120, 0, 1115, 0, 0, 0,
	0, 1100, 0, 0, 1131, 0, 0, 0, 1097, 1098,
	0, 1117, 1118, 1119, 1127, 1128, 1129, 0, 0, 0,
	0, 1121, 0, 0, 1120, 0, 1099, 0, 0, 0,
	0, 1100, 1114, 0, 1131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 1114, 0, 0, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1125, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1124, 1132,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 1130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1124, 1132,
	0, 1122, 0, 0, 0, 0, 0, 1115, 0, 0,
	0, 0, 0, 0, 1123, 0, 1130, 1111, 1112, 1113,
	1126, 0, 1110, 1108, 1109, 1101, 1102, 1103, 1104, 1106,
	1107, 1122, 1121, 0, 0, 2239, 0, 1115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1116, 1097, 1098, 0, 1117, 1118, 1119, 1127, 1128,
	1129, 0, 0, 0, 0, 0, 0, 1125, 1120, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1131, 1097,
	1098, 1116, 1117, 1118, 1119, 1127, 1128, 1129, 0, 0,
	0, 0, 0, 0, 0, 1120, 0, 1125, 0, 0,
	1099, 0, 1100, 0, 0, 1131, 1114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 1114, 0, 1123, 0, 0, 1111, 1112,
	1113, 1126, 0, 1110, 1108, 1109, 1101, 1102, 1103, 1104,
	1106, 1107, 0, 0, 0, 0, 2238, 0, 0, 0,
	0, 1105, 0, 0, 0, 1123, 0, 0, 1111, 1112,
	1113, 1126, 0, 1110, 1108, 1109, 1101, 1102, 1103, 1104,
	1106, 1107, 1124, 1132, 0, 0, 2178, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1130, 0, 0, 0, 0, 0, 0, 0, 0, 1124,
	1132, 0, 0, 0, 0, 1122, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 0, 1130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1122, 0, 0, 0, 1121, 0, 1115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1121, 0, 0, 0, 1097, 1098, 0,
	1117, 1118, 1119, 1127, 1128, 1129, 0, 0, 0, 0,
	0, 0, 0, 1120, 0, 1116, 0, 0, 0, 0,
	1100, 0, 0, 1131, 0, 0, 0, 0, 0, 0,
	0, 1125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1116, 0, 0, 1099, 0, 0, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 0, 1125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 1111, 1112, 1113, 1126, 1105, 1110, 1108, 1109,
	1101, 1102, 1103, 1104, 1106, 1107, 0, 0, 0, 0,
	2143, 0, 0, 0, 0, 0, 1123, 1124, 1132, 1111,
	1112, 1113, 1126, 0, 1110, 1108, 1109, 1101, 1102, 1103,
	1104, 1106, 1107, 0, 0, 1130, 0, 2055, 1097, 1098,
	0, 1117, 1118, 1119, 1127, 1128, 1129, 0, 0, 0,
	1122, 0, 0, 0, 1120, 0, 1115, 0, 0, 0,
	0, 1100, 0, 0, 1131, 0, 0, 0, 1097, 1098,
	0, 1117, 1118, 1119, 1127, 1128, 1129, 0, 0, 0,
	0, 1121, 0, 0, 1120, 0, 1099, 0, 0, 0,
	0, 1100, 1114, 0, 1131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 1114, 0, 0, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1125, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1124, 1132,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 1130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1124, 1132,
	0, 1122, 0, 0, 0, 0, 0, 1115, 0, 0,
	0, 0, 0, 0, 1123, 0, 1130, 1111, 1112, 1113,
	1126, 0, 1110, 1108, 1109, 1101, 1102, 1103, 1104, 1106,
	1107, 1122, 1121, 0, 0, 2031, 0, 1115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1116, 1097, 1098, 0, 1117, 1118, 1119, 1127, 1128,
	1129, 0, 0, 0, 0, 0, 0, 1125, 1120, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1131, 1097,
	1098, 1116, 1117, 1118, 1119, 1127, 1128, 1129, 0, 0,
	0, 0, 0, 0, 0, 1120, 0, 1125, 0, 0,
	1099, 0, 1100, 0, 0, 1131, 1114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 1114, 0, 1123, 0, 0, 1111, 1112,
	1113, 1126, 0, 1110, 1108, 1109, 1101, 1102, 1103, 1104,
	1106, 1107, 0, 0, 0, 0, 1523, 0, 0, 0,
	0, 1105, 2474, 0, 0, 1123, 0, 0, 1111, 1112,
	1113, 1126, 0, 1110, 1108, 1109, 1101, 1102, 1103, 1104,
	1106, 1107, 1124, 1132, 1802, 0, 0, 0, 1105, 0,
	1872, 0, 0, 1871, 0, 0, 0, 0, 0, 0,
	1130, 0, 0, 0, 0, 0, 0, 0, 0, 1124,
	1132, 0, 0, 0, 0, 1122, 0, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 0, 1130, 0, 0,
	0, 0, 0, 1097, 1098, 0, 1117, 1118, 1119, 1127,
	1128, 1129, 1122, 0, 0, 0, 1121, 0, 1115, 1120,
	0, 0, 0, 0, 1706, 0, 1100, 0, 0, 1131,
	0, 0, 2473, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1121, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 1114, 0, 0,
	0, 0, 0, 0, 0, 1116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1125, 0, 0, 0, 0, 0, 1707, 1387, 0,
	0, 0, 1116, 0, 1097, 1098, 0, 1117, 1118, 1119,
	1127, 1128, 1129, 0, 0, 0, 0, 0, 1125, 0,
	1120, 0, 1105, 0, 1386, 0, 0, 1100, 0, 0,
	1131, 1097, 1098, 0, 1117, 1118, 1119, 1127, 1128, 1129,
	0, 0, 0, 1124, 1132, 0, 0, 1120, 0, 0,
	0, 0, 1099, 0, 1100, 0, 0, 1131, 1114, 1123,
	0, 1130, 1111, 1112, 1113, 1126, 0, 1110, 1108, 1109,
	1101, 1102, 1103, 1104, 1106, 1107, 1122, 0, 0, 1099,
	0, 0, 1115, 0, 0, 1114, 1123, 0, 0, 1111,
	1112, 1113, 1126, 0, 1110, 1108, 1109, 1101, 1102, 1103,
	1104, 1106, 1107, 0, 0, 0, 0, 1121, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1124, 1132, 0, 0, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1130, 0, 0, 0, 1116, 0, 0, 0,
	0, 1124, 1132, 0, 0, 0, 0, 1122, 0, 0,
	0, 0, 1125, 1115, 0, 0, 0, 0, 0, 1130,
	0, 0, 0, 0, 0, 1097, 1098, 0, 1117, 1118,
	1119, 1127, 1128, 1129, 1122, 0, 0, 0, 1121, 0,
	1115, 1120, 0, 0, 0, 0, 0, 0, 1100, 0,
	0, 1131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1121, 676, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 1114,
	1123, 0, 0, 1111, 1112, 1113, 1126, 1116, 1110, 1108,
	1109, 1101, 1102, 1103, 1104, 1106, 1107, 0, 0, 0,
	0, 0, 0, 1125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1125, 0, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 1097, 1098, 0, 1117, 1118, 1119, 1127, 1128,
	1129, 0, 0, 0, 0, 1124, 1132, 0, 1120, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 1131, 0,
	0, 1123, 0, 1130, 1111, 1112, 1113, 1126, 0, 1110,
	1108, 1109, 1101, 1102, 1103, 1104, 1106, 1107, 1122, 0,
	1099, 0, 0, 0, 1115, 0, 1114, 0, 1123, 0,
	0, 1111, 1112, 1113, 1126, 0, 1110, 1108, 1109, 1101,
	1102, 1103, 1104, 1106, 1107, 0, 0, 0, 0, 1121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 1878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 0,
	0, 0, 1124, 1132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1125, 0, 0, 0, 0, 0,
	1130, 0, 0, 1097, 1098, 0, 1117, 1118, 1119, 1127,
	1128, 1129, 0, 0, 0, 1122, 0, 0, 0, 1120,
	2035, 1115, 0, 1873, 0, 0, 1100, 0, 0, 1131,
	0, 0, 0, 1097, 1098, 0, 1117, 1118, 1119, 1127,
	1128, 1129, 0, 0, 0, 0, 1121, 0, 0, 1120,
	0, 1099, 0, 0, 0, 0, 1100, 1114, 0, 1131,
	0, 0, 1123, 0, 0, 1111, 1112, 1113, 1126, 0,
	1110, 1108, 1109, 1101, 1102, 1103, 1104, 1106, 1107, 0,
	0, 1099, 0, 0, 0, 0, 0, 1114, 0, 0,
	0, 0, 0, 0, 0, 1116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1125, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1124, 1132, 0, 0, 0, 0, 0,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 1130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1124, 1132, 0, 1122, 0, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 0, 0, 1123,
	0, 1130, 1111, 1112, 1113, 1126, 0, 1110, 1108, 1109,
	1101, 1102, 1103, 1104, 1106, 1107, 1122, 1121, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1097, 1098,
	0, 1117, 1118, 1119, 1127, 1128, 1129, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1838, 1100, 0, 0, 1131, 0, 1116, 1097, 1098, 0,
	1117, 1118, 1119, 1127, 1128, 1129, 0, 0, 0, 0,
	0, 0, 1125, 1120, 0, 0, 1099, 1831, 0, 0,
	1100, 0, 1114, 1131, 1097, 1098, 1116, 1117, 1118, 1119,
	1127, 1128, 1129, 0, 0, 0, 0, 0, 0, 0,
	1120, 0, 1125, 0, 0, 1099, 0, 1100, 0, 0,
	1131, 1114, 0, 1097, 1098, 0, 1117, 1118, 1119, 1127,
	1128, 1129, 0, 0, 0, 0, 0, 0, 0, 1120,
	0, 0, 1099, 0, 0, 0, 1100, 1105, 1114, 1131,
	1123, 0, 0, 1111, 1112, 1113, 1126, 0, 1110, 1108,
	1109, 1101, 1102, 1103, 1104, 1106, 1107, 0, 1124, 1132,
	0, 1099, 0, 0, 0, 0, 1105, 1114, 0, 0,
	1123, 0, 0, 1111, 1112, 1113, 1126, 0, 1110, 1108,
	1109, 1101, 1102, 1103, 1104, 1106, 1107, 1124, 1132, 0,
	0, 1122, 0, 1105, 0, 0, 0, 1115, 0, 0,
	0, 0, 0, 0, 0, 1130, 0, 0, 0, 0,
	0, 0, 0, 0, 1124, 1132, 0, 0, 0, 0,
	1122, 0, 1105, 0, 0, 0, 1115, 0, 0, 0,
	0, 0, 1130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1124, 1132, 0, 0, 1122, 0, 0,
	0, 1121, 0, 1115, 0, 0, 0, 0, 0, 0,
	0, 1130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1116, 0, 0, 0, 0, 1122, 0, 1121, 0,
	0, 0, 1115, 0, 0, 0, 0, 1125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 1097, 1098,
	0, 1117, 1118, 1119, 1127, 1128, 1129, 0, 0, 0,
	0, 0, 0, 1125, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 1131, 1123, 1116, 0, 1111, 1112,
	1113, 1126, 0, 1110, 1108, 1109, 1101, 1102, 1103, 1104,
	1106, 1107, 1125, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 1114, 0, 1123, 0, 0, 1111, 1112, 1113,
	1126, 0, 1110, 1108, 1109, 1101, 1102, 1103, 1104, 1106,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 1111, 1112, 1113, 1126, 0, 1110,
	1108, 1109, 1101, 1102, 1103, 1104, 1106, 1107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	1123, 0, 0, 1111, 1112, 1113, 1126, 0, 1110, 1108,
	1109, 1101, 1102, 1103, 1104, 1106, 1107, 0, 1124, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1130, 0, 0, 1275,
	1265, 1294, 1257, 1285, 1284, 0, 0, 1259, 1258, 0,
	0, 1122, 0, 0, 1296, 1295, 0, 1115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1290, 0,
	1282, 1281, 0, 0, 0, 0, 0, 0, 0, 0,
	1280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1279, 1277,
	1278, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1125, 0, 0,
	1268, 1267, 1269, 1270, 1271, 1272, 1273, 0, 1293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1283, 0,
	0, 0, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1123, 0, 0, 1111, 1112,
	1113, 1126, 0, 1110, 1108, 1109, 1101, 1102, 1103, 1104,
	1106, 1107, 1276, 0, 0, 0, 1458, 1456, 1457, 1460,
	1459, 0, 0, 1275, 1265, 1294, 1257, 1285, 1284, 0,
	0, 1259, 1258, 0, 0, 0, 0, 0, 1296, 1295,
	0, 0, 1262, 0, 0, 0, 636, 0, 596, 0,
	0, 0, 0, 1274, 1263, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 0, 0, 641, 0, 0, 0,
	0, 0, 1290, 0, 1282, 1281, 1260, 0, 639, 1291,
	1292, 0, 0, 0, 1280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	640, 1264, 1279, 1277, 1278, 642, 1297, 0, 0, 0,
	648, 649, 0, 0, 658, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 643,
	0, 0, 0, 0, 1268, 1267, 1269, 1270, 1271, 1272,
	1273, 0, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 661, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1261, 0, 644, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1283, 0, 0, 0, 1266, 645, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 652, 0, 0, 647, 654,
	0, 0, 0, 0, 0, 0, 1276, 0, 0, 651,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 599,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1274, 1263, 0,
	0, 0, 0, 0, 0, 0, 0, 1298, 0, 0,
	650, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1260, 0, 0, 1291, 1292, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1264, 638, 655, 600, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 656, 0, 0, 0, 660, 0, 0, 0,
	601, 0, 0, 0, 0, 653, 657, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 659,
}
var sqlPact = [...]int{

	4856, -1000, 43, -1000, -1000, 202, -1000, -1000, -1000, -1000,
	199, 198, 197, -1000, 195, 194, 189, -1000, 188, 187,
	186, 176, 175, 171, 168, 166, -1000, 165, 164, -1000,
	-1000, -1000, 163, 159, 157, 149, 145, 144, 142, 1013,
	23966, 140, 139, 1321, 36236, 138, 137, 136, 129, 1577,
	127, 122, -1000, -1000, 36236, 27509, 894, 1308, 118, 115,
	114, 113, 112, 998, 35915, 3472, 1971, 6282, 1096, 1525,
	35591, 23642, 1521, 1695, 35267, -1000, -1000, 34943, 1741, 111,
	108, 107, -1000, -1000, 34619, 105, 103, 100, 96, 91,
	90, 89, 86, 84, 83, 81, 78, 77, 70, -1000,
	66, 65, 64, 41944, 62, 61, 59, 1073, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 170,
	-1000, 938, 452, 19064, 1014, 1003, 1001, 982, 996, 38162,
	36236, 56, -28, 55, -1000, 1742, 678, 21024, 4856, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 27185, 26861, 34295, 33971, 766, -1000,
	35, 25250, 36236, -1000, 110, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 15019, 14665, 574,
	110, -1000, -1000, -1000, -1000, -1000, 33647, -1000, 33323, 32999,
	1465, 32675, -1000, 36236, -1000, -1000, -1000, 528, -1000, 32351,
	-1000, -1000, 1689, 1611, 1604, 26537, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 32030, 31706,
	31382, 31058, 30734, 526, -1000, -1000, -1000, 17728, -1000, -1000,
	-1000, -1000, 54, -1000, -1000, -1000, -1000, 53, 49, 48,
	45, 1215, -1000, -1000, 41, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 36236, -1000, 16057, -1000, 522,
	-1000, 1558, -1000, 16057, -1000, 1214, -1000, -1000, -1000, -1000,
	-1000, 36236, -1000, -1000, 1376, -1000, -1000, -1000, -1000, -1000,
	-1000, 928, -1000, -1000, -1000, 1977, 1151, 521, 30410, -1000,
	1387, -1000, 600, 797, -1000, -1000, -1000, 18729, 211, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2049, 23318,
	1276, 1773, 1685, 1974, 1389, 1669, 1668, 1666, 1658, 1655,
	1972, 1002, 1970, 1699, 988, 1968, 1633, 1160, 665, 1967,
	1552, 1551, -1000, -1000, -1000, 28793, -1000, -1000, 938, -1000,
	-1000, -1000, 1335, 1727, 1727, 1727, 1822, 328, 310, -1000,
	170, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1939, -1000, -1000, -1000, -1000, 1947, -1000, -1000, -1000,
	-1000, 1244, -1000, -1000, 1244, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 765, 37520, 33, 36236, -1000, 517, 33, -1000,
	-1000, 516, -1000, 11133, 11133, -1000, -1000, -1000, -1000, -1000,
	9403, 1809, -1000, 2470, -199, 351, 578, -1000, 20046, 22650,
	-1000, -1000, 1047, 1631, 669, -1000, 1043, 1629, 549, -1000,
	1034, -1000, 1019, 1628, -192, 24287, 25250, 35, 26, -1000,
	-1000, -1000, 5949, 41314, -1000, -1000, 16057, 16057, 16057, 16057,
	16057, 1119, 540, -1000, 515, 513, 7664, -1000, -1000, 1945,
	-1000, -1000, -1000, 342, -1000, -1000, 16057, 110, -1000, -1000,
	-1000, -1000, 507, 1963, -1000, 677, -1000, -1000, -1000, 569,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1583,
	506, 505, 501, -1000, -1000, -1000, -1000, 484, 477, 476,
	474, 473, 472, 471, 470, 469, 468, 465, 464, 463,
	453, 448, 1086, -1000, 624, -1000, -1000, 624, 624, -1000,
	435, 435, 436, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 435, -1000, -1000, -1000, 595, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 447, 41314, -1000, 854, 21674, 110, -1000,
	-1000, -1000, -1000, 446, 1279, 608, -1000, 346, -1000, 30086,
	608, 1273, -1000, 441, 36236, -1000, -1000, 28793, -1000, 36236,
	-1000, 36236, -1000, 889, -1000, 37841, 128, 1626, -1000, -1000,
	128, 1622, -1000, 121, 1621, -1000, -1000, -1000, 1619, -1000,
	26, 1618, -1000, -1000, 16057, 25, -1000, -1000, -1000, 678,
	-1000, -1000, -1000, -1000, -1000, 24608, 1351, 529, 41314, 1865,
	41886, 24287, 41314, 24608, -1000, -1000, -1000, -1000, -1000, 36236,
	-1000, 16057, -1000, 1864, 1286, 13, -1000, -1000, -1000, -1000,
	-1000, 1342, 1411, 698, 989, 18396, 18063, 1667, -1000, -1000,
	-1000, 125, 6282, -1000, -1000, -1000, -1000, -1000, -1000, 29762,
	-1000, -1000, -1000, 1146, 36236, -1000, -1000, 1575, -1000, 24608,
	36236, -1000, 36236, -1000, 36236, -1000, 36236, -1000, 36236, -1000,
	-1000, -1000, -1000, -1000, 1397, -1000, 1569, -1000, -1000, 36236,
	-1000, 1325, -1000, -1000, -1000, 29441, 29117, -1000, 930, 798,
	133, -1000, -1000, 1335, -1000, 1233, 1406, 14311, 1364, 16057,
	170, -1000, -1000, 170, 170, 8703, -1000, -1000, -1000, -1000,
	-1000, -1000, 13, -1000, 37520, -1000, 36236, 33, 1860, 36236,
	-1000, 124, -1000, 40594, -1000, 124, 24, -1000, 41314, -1000,
	1438, 1436, 21349, 1432, 1126, 1126, 1126, -1000, 440, 536,
	578, 5269, 13965, -1000, 27830, 1143, 237, 311, 19721, 1809,
	-1000, 36236, 11, 973, -1000, 26213, 1818, 1771, 1701, 28793,
	1834, 104, 1545, 762, 28793, 761, 1829, 104, 1538, 760,
	36236, 6282, 564, -1000, 36236, -1000, -1000, 41682, 41886, 6282,
	775, 16057, 16057, 16057, 16057, 16057, 16057, 16057, 16057, 16057,
	16057, 16057, 16057, 16057, 16057, 16057, 16057, 16057, 16057, 16057,
	16057, 16057, 16057, 1360, 16057, 752, 16057, 16057, 16057, 16057,
	1217, 1069, 422, 1166, -1000, 1929, 1929, 1929, 41558, 41558,
	419, 540, -1000, 16057, -1000, 104, 13603, 310, 40078, 32,
	7318, -1000, -1000, -1000, 9049, 622, 41314, 110, 6617, -1000,
	1944, 895, 1584, 1500, 439, 565, 562, 561, 16057, 16057,
	13257, 12903, 12549, 16403, 12195, 16057, 8010, 16057, 16057, 16057,
	16057, 11841, 11487, -1000, 438, -1000, -1000, -1000, -1000, 1943,
	-1000, -1000, 1942, -1000, 773, 770, 1941, -1000, 1534, 23,
	-1000, -1000, 25892, 1857, 1617, -1000, 1100, -1000, 1847, 36236,
	1211, 1272, -1000, -1000, 782, 1616, 36236, 309, 31, -1000,
	36236, 619, 109, 1844, 109, 22000, -1000, 36236, -1000, 36236,
	-1000, -1000, 36236, -1000, 36236, -1000, 36236, 36236, 36236, 36236,
	22, 41314, 603, 25571, 751, -1000, 660, 25892, 79, 16,
	-1000, 729, -1000, -1000, -1000, -1000, 371, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 436,
	1086, 435, 435, 435, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 595, -1000, -1000, 624, 624, 624, -1000, -1000, -70,
	-1000, 1532, -1000, 605, 6, 683, 13, -1000, 1244, -1000,
	1121, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1956, 30, -1000, -1000, 30, -1000,
	-1000, 6282, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36236,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1193, -1000,
	-1000, -1000, -1000, -1000, -1000, 36236, 36236, 36236, -1000, 28793,
	-1000, -1000, -1000, -1000, 41314, -1000, 416, -1000, -1000, 41314,
	1070, 1450, -1000, 1450, 28, -1000, 40503, 1425, 36236, -1000,
	-1000, 432, 1, 619, 11133, 20698, 6282, -1000, 619, 9403,
	-1000, 21349, 21349, 2327, 1433, 21349, -1000, -1000, -1000, -1000,
	27830, 559, 578, 27830, -1000, 1925, 1373, -7, -1000, -1000,
	-1000, 36236, 431, -1000, 578, 308, 932, 36236, 36236, 36236,
	-1000, -1000, 1271, 37199, 1267, 41886, 36236, -1000, 429, 428,
	1424, 1377, 36236, 36236, 36878, 36557, 36236, 981, 104, -1000,
	427, 36236, 1029, 36236, 104, -1000, 424, 36236, 1016, -1000,
	1485, 1195, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 599, 401, 401, 849, 849, 849, 849,
	1927, 3326, 3647, 3336, 3683, 3683, 3683, 623, 3576, 3576,
	3683, 3683, 3683, 41558, 41343, 2547, 16057, 16057, 749, 1063,
	422, 2547, 16057, 2547, 2547, 2547, 2547, -1000, 1361, -1000,
	-1000, -1000, -1000, 1530, 421, 16403, 16403, -1000, -1000, -1000,
	7664, 16736, -1000, -1000, -1000, -1000, 417, 16057, -1000, 40108,
	-202, -19, -1000, -1000, 16057, -20, -67, -1000, -1000, 866,
	-1000, 16057, -1000, -1, 16057, 16057, 16057, 293, -1000, 292,
	-1000, 746, -1000, 741, 739, 738, -1000, 409, 1124, 405,
	404, 16057, -1000, -1000, -1000, -1000, -1000, -1000, 41287, 4691,
	290, -1000, 1528, -100, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 289, -1000, 288, -1000, 41073, -100, 286, 192, -1000,
	16403, 16403, 16403, 7664, 402, 285, -1000, 40349, -100, 41043,
	10787, 10787, 10787, 283, 40892, 16057, -100, 4341, 4304, 312,
	-27, -41, -1000, -43, -1000, 1920, -46, 281, 593, 591,
	280, 820, 1526, 36236, 278, -48, 27, 41886, -1000, -1000,
	-1000, -1000, -1000, 36236, 494, 36236, 104, 36236, 1954, 104,
	36236, 1614, 1615, 560, 36236, 277, -1000, 36236, -1000, 994,
	16057, 1025, -1000, 20372, 631, 36236, 994, 67, -1000, -1000,
	-1000, 583, 36236, -1000, -1000, 128, 128, -1000, 121, -1000,
	26, -1000, 16057, -1000, -1000, 36236, 24287, -49, -1000, -1000,
	41886, -1000, 539, 693, -1000, 1918, 607, 24287, 36236, -1000,
	1443, -1000, -1000, 923, -1000, 1067, -1000, 19397, -1000, -16,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1070, -1000, 16057,
	1913, -1000, -1000, -1000, 8703, -1000, -1000, -1000, 36236, -194,
	79, -1000, 1497, -1000, -115, -1000, 1809, -1000, 1497, -1000,
	-1000, 2327, -1000, 392, 16057, 21349, -1000, 535, -1000, -55,
	-1000, 27830, -1000, 533, -195, -1000, 580, -1000, 578, 391,
	36236, 27830, -1000, -1000, -1000, 737, 730, 1613, -1000, 1262,
	-1000, 639, -1000, 1095, 16057, 17402, 390, 389, 1041, -1000,
	1610, 1205, 1609, 1205, -1000, 11, 957, -1000, 16057, -1000,
	728, -1000, -1000, 16057, -1000, 726, 607, 1519, 706, 16057,
	2547, 2547, 16057, 16403, 16403, -1000, 2547, -1000, -1000, -1000,
	-1000, -1000, 1514, 388, 16057, 41886, 3940, 2979, -56, -1000,
	10441, -10, -1000, 16057, -1000, 39927, -1000, -1000, 538, 1635,
	-1000, 16057, 40775, 274, 10095, -1000, 40621, -22, -22, -1000,
	1953, 1289, 1094, 1088, 911, 1911, -1000, 22325, 620, 1135,
	39729, 41682, 41886, -1000, 16057, -1000, -1000, 1513, 16057, -1000,
	41682, 41886, 16403, 16403, 16403, 16403, 16403, 16403, 16403, 16403,
	16403, 16403, 16403, 16403, 16403, 16403, 16403, 16403, 16403, 16403,
	16403, 1358, 16403, 1912, 1912, 1912, -13, 9749, -1000, 1565,
	1513, 16057, 16057, 41886, 273, 272, 271, -1000, 16057, -100,
	16057, 16057, 16057, -1000, -1000, -1000, 269, -1000, 1906, -1000,
	-1000, -1000, -1000, -1000, 807, -1000, 1476, -1000, 25892, 386,
	36236, 384, -1000, 383, -1000, -1000, 381, 36236, 1349, 560,
	24929, -1000, 608, -151, -1000, -1000, 8356, 41314, -1000, 994,
	1754, -61, -1000, -1000, -1000, 619, 22000, 21349, 9403, -64,
	-1000, -1000, -1000, 41314, -16, 1676, 1676, -1000, 1899, -1000,
	532, 267, -1000, 28472, -1000, -16, -1000, -1000, -1000, -1000,
	-1000, 36236, 1154, 39702, -1000, 1739, 6282, 263, 1494, 1792,
	-1000, 21349, 1494, -1000, 36236, 41314, -1000, -199, -1000, 1895,
	-1000, -1000, 1373, -1000, 5613, 27830, 36236, -71, -1000, 36236,
	36236, 36236, 1606, -1000, 2629, -1000, 39488, -77, -1000, 348,
	1774, 16057, -1000, -1000, 380, 17402, 36236, -1000, 1394, 1430,
	681, 36236, -1000, 36236, -1000, 36236, 36236, 36236, -78, 36236,
	-79, 36236, -1000, 24287, 732, 1898, 2547, 466, 343, 16057,
	41886, 41258, -94, 16057, 16057, -1000, -95, -1000, 16057, 531,
	41314, -1000, -1000, -1000, 41314, 16057, 1931, 16057, 262, 261,
	259, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 257,
	-1000, -1000, 38483, 16057, 256, -1000, 246, 240, 41314, 1565,
	41314, -1000, -1000, 558, 558, 886, 886, 886, 886, 1912,
	2877, 705, 1078, 241, 241, 241, 661, 504, 504, 241,
	241, 241, 1512, 1356, 377, 1223, 16057, -97, -1000, -1000,
	-1000, 41314, 41314, 225, -1000, -1000, -1000, -100, 260, 39458,
	39307, -1000, 224, -1000, -1000, 1479, -1000, 17402, 376, 36236,
	25892, 1840, 17402, 1198, 1354, 560, 24929, -1000, 782, 4856,
	-18, -1000, -1000, 378, 104, 994, -1000, -21, -1000, 576,
	1663, -1000, 1659, 467, -1000, -1000, -58, 375, -1000, 570,
	563, -1000, -1000, -1000, -1000, 1739, -1000, 615, 16057, 16057,
	1809, 615, -103, 578, -1000, -1000, -1000, 1892, -1000, -104,
	-1000, -1000, -1000, -1000, 36236, -1000, 36236, -1000, 6282, 36236,
	1511, 1250, -1000, -1000, 1365, 373, 16403, 36236, -1000, 1021,
	17402, 1739, 110, 6282, 1739, 39109, 6617, -105, -112, 1248,
	-1000, 1240, 16057, -1000, 41886, 1205, 1205, -1000, 725, 702,
	700, -1000, 696, -1000, -80, 22983, 16057, 16057, 41258, -113,
	-1000, 2547, 2547, -1000, 39082, -1000, 41314, -1000, 40621, -1000,
	-1000, -1000, -1000, 1106, -1000, 38868, -1000, -1000, -1000, -1000,
	16403, 1508, 372, 41886, 38834, -1000, -1000, 16057, -1000, -1000,
	-1000, 1097, -118, 17402, -119, 219, 104, -124, 36236, -1000,
	560, 24929, -1000, 1615, -196, 1641, 36236, 1686, -1000, -1000,
	370, 369, 366, -1000, 28151, 28151, 24287, 24287, -1000, -1000,
	36236, 41314, -100, -1000, -1000, 27830, 349, -1000, -1000, 1172,
	-1000, -1000, 36236, 1256, -1000, -1000, 16057, 1223, 365, 1476,
	364, -1000, -1000, -1000, -1000, -1000, -1000, 1774, -1, -1000,
	1009, -1000, -1000, 41314, 1763, -1000, -1000, 36236, 36236, 363,
	361, -1000, 357, 110, 2547, 2547, -1000, -1000, 218, 1135,
	1790, -1000, 497, 16403, 41886, -126, -1000, 38810, 36236, 1021,
	-131, -1000, 1476, -1000, 1021, 356, 24929, -1000, 1349, -1000,
	829, -132, 36236, -1000, -1000, 6964, 24287, 24287, -1000, -137,
	-1000, -1000, -90, -1000, 1839, -1000, -1000, -1000, -1000, 1605,
	4715, 1295, 36236, -1000, 36236, 1739, 216, 36236, 643, 6282,
	-1000, -1000, 16057, 16057, 16057, -1000, 1065, 16057, 497, -143,
	-1000, -1000, 355, 1476, 1021, -1000, 1476, 17402, -1000, 1354,
	884, -1000, 619, -1000, -145, -148, -1000, 36236, 347, 1597,
	-1000, 1152, 1134, 215, -164, -1000, -1000, 346, -1000, 16057,
	-1000, -166, -169, -22, 214, 15711, 15711, -100, -1000, 36236,
	-1000, 1476, -1000, -172, -1000, 22000, -1000, 607, 607, -1000,
	-1000, 36236, -1000, 1168, 1158, 890, -1000, -1000, -1000, -1000,
	-1000, 1295, 41314, -1000, -1000, 130, -1000, -1000, -1000, 17069,
	1191, 971, 40322, -1000, -183, -1000, 1021, -153, -1000, -1000,
	-1000, -1000, 1647, -1000, 666, 1174, 1174, 1152, 1931, 1870,
	-1000, -1000, -1000, -1000, -1000, 1202, 1476, -1000, -1000, 1877,
	-1000, -1000, 1366, -1000, -1000, 15365, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2357, 98, 1633, 96, 2356, 2355, 2354, 2353, 2352,
	2351, 2344, 2343, 2342, 2340, 2339, 2338, 2334, 2333, 2332,
	2331, 2330, 2328, 2327, 2326, 2325, 2322, 94, 2321, 2320,
	2319, 2318, 2317, 2316, 2315, 2314, 2312, 89, 2307, 83,
	2305, 2304, 2301, 2295, 2289, 81, 79, 2286, 106, 143,
	77, 2283, 2280, 69, 2279, 2275, 2272, 2271, 2264, 2262,
	2260, 102, 2257, 2256, 2255, 2253, 2251, 2250, 2249, 147,
	163, 2248, 62, 2247, 2241, 2239, 2237, 2236, 2235, 2230,
	2226, 2224, 2217, 2215, 2204, 2202, 2191, 2183, 2178, 2167,
	2166, 162, 2163, 2159, 56, 45, 2158, 2157, 135, 2156,
	109, 34, 32, 26, 53, 55, 200, 2987, 188, 2155,
	2154, 2153, 2151, 2146, 2143, 28, 121, 118, 2142, 36,
	2138, 2137, 60, 39, 23, 22, 2135, 105, 2126, 2124,
	1205, 27, 2121, 2120, 154, 2120, 2119, 15, 25, 2497,
	156, 152, 120, 129, 2116, 2115, 2114, 2112, 41, 127,
	2, 2111, 2110, 20, 75, 9, 2109, 21, 12, 2107,
	2106, 145, 2104, 54, 107, 1586, 111, 131, 989, 2103,
	74, 8, 61, 2100, 2099, 155, 37, 2096, 33, 92,
	153, 2094, 47, 160, 142, 86, 138, 136, 2092, 2091,
	2089, 115, 2088, 122, 91, 2086, 2084, 108, 2083, 146,
	144, 2082, 2081, 93, 2080, 133, 2078, 2077, 161, 149,
	128, 6, 58, 67, 4, 1508, 1499, 137, 85, 51,
	50, 2076, 1965, 1165, 1419, 40, 116, 72, 42, 113,
	64, 76, 181, 44, 2075, 2074, 140, 2072, 2069, 2068,
	2067, 2066, 112, 2063, 2062, 52, 180, 88, 30, 71,
	100, 38, 73, 141, 134, 158, 119, 2060, 101, 130,
	2059, 59, 2058, 2056, 1876, 125, 2055, 2050, 2049, 1865,
	1624, 1577, 679, 2048, 2047, 1560, 865, 2046, 2045, 66,
	2044, 126, 123, 2043, 174, 260, 104, 2042, 132, 24,
	99, 2039, 35, 18, 0, 2243, 1818, 2034, 139, 87,
	2033, 2031, 2030, 2028, 29, 3, 13, 7, 11, 5,
	19, 17, 2026, 2022, 150, 48, 65, 2021, 159, 2018,
	2012, 2010, 43, 2007, 16, 2004, 14, 2002, 2000, 10,
	1, 1999, 1998, 157, 1997, 110, 1994, 1750, 1987, 151,
	1986, 1983, 1679, 31, 117,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 6, 6, 6, 6, 6,
	9, 9, 10, 16, 13, 18, 12, 12, 15, 15,
	117, 117, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 114, 114, 119,
	119, 119, 121, 121, 118, 118, 113, 113, 20, 20,
	59, 59, 104, 54, 54, 54, 292, 292, 293, 293,
	97, 97, 101, 101, 101, 101, 102, 102, 103, 103,
	103, 26, 26, 26, 22, 22, 22, 22, 22, 23,
	23, 24, 24, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 37,
	37, 38, 38, 38, 38, 38, 38, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 44, 44,
	44, 42, 42, 42, 41, 41, 41, 40, 40, 40,
	43, 43, 43, 167, 167, 166, 166, 169, 169, 45,
	45, 45, 45, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 49, 49, 49, 49, 49, 49, 49,
	49, 260, 260, 259, 47, 47, 234, 234, 50, 50,
	192, 192, 51, 51, 51, 51, 51, 52, 52, 60,
	60, 333, 333, 333, 337, 337, 338, 338, 339, 339,
	339, 339, 339, 339, 339, 335, 335, 57, 57, 57,
	96, 96, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 66, 66, 68, 65, 65, 65, 67, 67, 67,
	67, 69, 69, 69, 69, 70, 70, 70, 70, 70,
	71, 71, 147, 147, 285, 284, 284, 290, 290, 290,
	145, 145, 145, 145, 145, 146, 146, 146, 283, 283,
	283, 283, 291, 291, 291, 291, 291, 291, 289, 289,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 84, 84, 84, 91,
	91, 91, 91, 91, 91, 91, 73, 73, 78, 78,
	78, 78, 78, 74, 74, 79, 79, 80, 80, 81,
	81, 81, 81, 81, 81, 75, 75, 75, 75, 83,
	83, 83, 83, 82, 82, 88, 88, 88, 88, 88,
	88, 85, 85, 85, 85, 86, 86, 86, 89, 89,
	89, 89, 76, 76, 77, 77, 90, 90, 87, 87,
	87, 46, 334, 334, 336, 336, 55, 55, 30, 30,
	31, 31, 148, 148, 149, 149, 213, 213, 213, 213,
	150, 150, 120, 120, 120, 212, 302, 302, 303, 303,
	303, 303, 303, 303, 304, 304, 304, 304, 304, 304,
	304, 300, 300, 301, 298, 298, 299, 299, 299, 299,
	340, 340, 211, 211, 153, 153, 307, 307, 307, 307,
	305, 305, 305, 305, 305, 308, 306, 309, 309, 309,
	309, 309, 246, 246, 246, 93, 93, 32, 32, 126,
	126, 33, 33, 29, 29, 29, 196, 196, 157, 157,
	251, 251, 251, 138, 138, 115, 115, 115, 14, 11,
	11, 11, 11, 11, 11, 19, 19, 17, 17, 197,
	197, 198, 198, 56, 56, 58, 58, 63, 63, 92,
	92, 92, 92, 92, 92, 21, 21, 21, 21, 25,
	25, 25, 25, 62, 62, 342, 342, 133, 133, 133,
	133, 134, 134, 208, 208, 209, 209, 209, 210, 210,
	210, 128, 127, 129, 129, 28, 28, 28, 34, 36,
	35, 98, 98, 99, 99, 100, 135, 122, 122, 123,
	123, 124, 124, 125, 125, 343, 343, 53, 53, 53,
	95, 95, 141, 141, 205, 205, 205, 207, 207, 206,
	206, 206, 182, 182, 182, 94, 94, 162, 162, 171,
	171, 172, 172, 257, 173, 173, 61, 61, 107, 107,
	105, 105, 105, 105, 105, 105, 106, 106, 106, 108,
	108, 108, 108, 108, 108, 108, 111, 111, 111, 112,
	112, 112, 110, 110, 315, 315, 315, 318, 318, 314,
	316, 316, 317, 317, 341, 341, 183, 183, 183, 152,
	151, 151, 155, 155, 154, 156, 156, 250, 250, 250,
	180, 180, 180, 180, 199, 199, 200, 200, 201, 201,
	202, 202, 202, 203, 203, 204, 204, 179, 179, 230,
	230, 109, 109, 109, 161, 161, 161, 163, 163, 220,
	220, 220, 221, 221, 219, 219, 219, 219, 252, 252,
	252, 252, 252, 252, 252, 252, 331, 331, 331, 332,
	332, 249, 249, 253, 253, 253, 253, 253, 253, 247,
	247, 247, 247, 248, 248, 258, 258, 186, 186, 186,
	186, 184, 184, 185, 185, 254, 254, 254, 254, 181,
	181, 255, 255, 255, 214, 214, 261, 261, 261, 279,
	279, 160, 160, 160, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 263, 263, 263, 263, 265, 265, 265, 264, 264,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 264, 264, 264, 278, 278, 278, 278,
	278, 266, 266, 273, 273, 274, 274, 275, 276, 267,
	267, 268, 268, 269, 270, 277, 277, 277, 277, 281,
	281, 271, 271, 271, 271, 271, 272, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 194, 194, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 224, 224, 224, 224, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	310, 310, 310, 310, 310, 310, 310, 310, 312, 312,
	313, 313, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	319, 319, 320, 320, 322, 322, 323, 323, 324, 325,
	325, 325, 326, 327, 327, 321, 321, 328, 328, 328,
	329, 329, 330, 330, 330, 330, 330, 236, 236, 236,
	237, 237, 238, 244, 244, 244, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 136, 136, 136, 136, 136, 168, 168, 233,
	233, 231, 231, 231, 235, 235, 187, 187, 280, 280,
	280, 280, 280, 280, 280, 188, 188, 188, 195, 189,
	189, 190, 190, 190, 190, 190, 190, 227, 228, 191,
	191, 191, 229, 229, 239, 243, 243, 242, 241, 241,
	240, 240, 217, 217, 218, 218, 216, 215, 176, 176,
	175, 175, 174, 174, 344, 344, 245, 245, 177, 177,
	178, 170, 170, 256, 256, 256, 256, 164, 164, 143,
	143, 165, 165, 139, 139, 142, 142, 140, 140, 140,
	140, 158, 158, 159, 159, 137, 137, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 282, 282,
	282, 232, 130, 130, 130, 131, 131, 132, 132, 287,
	287, 287, 288, 288, 288, 288, 286, 286, 286, 286,
	286, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 0, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 1, 1, 1, 3,
	4, 6, 6, 6, 5, 5, 4, 12, 4, 12,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 7, 2,
	6, 2, 1, 12, 12, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 4, 6, 7, 1, 2, 1, 2, 2, 3,
	3, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 2, 1, 2, 1, 1, 2, 6,
	3, 2, 2, 2, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 1, 2, 2, 3, 2,
	2, 5, 3, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 3, 1, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 2, 6,
	2, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 4, 3, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 3, 3, 3, 1, 3, 3, 1, 1,
	2, 2, 1, 0, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 4, 3, 5, 3, 4,
	5, 2, 3, 3, 3, 4, 2, 3, 4, 3,
	3, 3, 4, 4, 4, 4, 2, 3, 5, 5,
	5, 2, 2, 0, 2, 0, 3, 2, 7, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 2, 4, 3, 3,
	0, 6, 3, 11, 14, 4, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 0, 1, 3, 2, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 2, 5,
	9, 1, 0, 3, 1, 2, 1, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 3, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 2, 3, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	6, 3, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 6, 6, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -36,
	-51, -37, -38, -39, -50, -45, -52, -46, -53, -54,
	-55, -47, -59, -58, -60, -63, -61, -56, -57, -64,
	-72, -92, -93, -94, -95, -5, -6, -7, -8, 23,
	34, -23, -24, 48, 68, -28, -29, -30, -31, 70,
	-32, -33, -34, -35, 47, 91, -317, 95, -40, -41,
	-42, -44, -43, 99, 106, 108, 127, 133, 136, 216,
	222, 243, 245, 247, 254, -105, -107, 241, 242, -65,
	-66, -67, -68, -96, 265, -73, -74, -75, -76, -77,
	-78, -79, -80, -81, -82, -83, -84, -85, -86, -87,
	-88, -89, -90, 268, -21, -25, -62, 306, -9, -10,
	-13, -12, -11, -16, -18, -15, -17, -19, -14, -315,
	-108, -106, 357, 315, 35, 277, 62, 102, 249, 331,
	338, -111, -109, -110, -112, 258, 323, 287, 361, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 2, 287, 326, 84, 143, -333, 2,
	-165, 287, 84, -140, -130, 350, 4, -294, -296, 20,
	21, 23, 33, 34, 35, 40, 44, 47, 48, 49,
	56, 61, 62, 63, 65, 67, 68, 69, 72, 73,
	74, 82, 83, 85, 87, 91, 93, 95, 98, 99,
	101, 106, 107, 108, 114, 115, 120, 122, 126, 128,
	133, 134, 135, 136, 137, 144, 147, 149, 142, 159,
	160, 161, 163, 164, 165, 168, 167, 172, 175, 178,
	180, 181, 182, 185, 183, 187, 188, 190, 189, 195,
	197, 198, 200, 203, 206, 209, 212, 213, 214, 215,
	216, 218, 220, 222, 224, 225, 226, 227, 228, 229,
	231, 232, 234, 235, 236, 237, 238, 241, 239, 240,
	242, 243, 244, 245, 247, 249, 250, 252, 266, 267,
	278, 254, 255, 256, 257, 261, 259, 262, 263, 265,
	268, 270, 273, 276, 277, 279, 282, 283, 280, 275,
	286, 288, 289, 290, 291, 292, 293, 294, 301, 302,
	306, 307, 308, 309, 312, 313, 314, 315, 317, 320,
	321, 322, 327, 332, 333, 334, 335, 336, 28, 36,
	37, 38, 39, 41, 42, 45, 46, 52, 53, 54,
	57, 86, 88, 89, 105, 109, 110, 116, 117, 118,
	129, 131, 138, 139, 148, 150, 151, 152, 153, 154,
	156, 170, 184, 194, 196, 207, 211, 219, 221, 230,
	251, 260, 271, 272, 281, 284, 296, 297, 298, 303,
	304, 319, 323, 324, 360, 360, 2, 160, 227, -139,
	-130, 84, 360, 360, 360, 360, 287, 2, 316, 326,
	-196, 84, 126, 225, 311, 360, 360, -130, -130, 222,
	22, 2, 93, 147, 314, 313, 22, 218, 259, 289,
	291, 2, 360, 360, 360, 360, 360, 2, 326, 287,
	143, 84, 316, -130, 2, -49, 2, 357, -48, -4,
	-27, -39, -50, -45, -46, -61, -72, -37, -53, -94,
	-95, -337, 2, 22, -338, -339, 70, 99, 127, 258,
	147, 93, 313, -286, 4, -294, -296, -295, -297, 59,
	71, 125, 146, 140, 158, 162, 171, 173, 186, 208,
	210, 248, 269, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 50, 51, 55, 58, 60, 66, 70,
	75, 76, 78, 77, 79, 80, 81, 90, 92, 94,
	96, 97, 100, 102, 104, 111, 112, 113, 121, 123,
	124, 127, 130, 132, 141, 143, 145, 155, 157, 166,
	169, 174, 176, 177, 191, 192, 193, 199, 201, 202,
	204, 205, 217, 223, 233, 246, 258, 264, 274, 285,
	287, 295, 299, 300, 305, 310, 311, 316, 318, 325,
	326, 328, 329, 330, 331, 287, 2, 160, 2, -130,
	2, -333, 2, 160, 2, -337, 2, -130, 2, -134,
	2, 254, -130, -91, 262, 2, 4, 22, 84, 185,
	264, 296, 360, 360, 360, 175, 56, 251, 262, -70,
	302, -69, 296, -285, -71, 2, -166, 185, -130, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 2, -91, 262, 34,
	56, 22, 61, 85, 128, 143, 144, 164, 66, 67,
	226, 175, 161, 301, 165, 263, 288, 302, 70, 317,
	292, 107, 360, 360, 360, -341, 2, 287, -106, -108,
	-107, -154, -155, 310, 155, 104, 205, -105, -107, 2,
	-315, -290, 2, -283, -246, 9, 305, 111, 201, -289,
	8, 349, -282, -288, 5, 7, 348, 4, -294, -296,
	-295, -342, 2, 302, 302, 2, -342, 2, -342, 2,
	-133, 2, 302, 299, -318, 231, -314, -130, -318, 360,
	360, 362, 360, -151, -152, 2, 22, 96, -178, 2,
	357, -252, 2, 355, -254, -139, -107, -253, 357, 202,
	-3, 2, -254, 138, -139, 2, -254, 138, -139, 2,
	-130, 2, -142, 138, -139, 299, 362, -165, -158, -130,
	-216, -215, 359, -222, 2, -224, 348, 349, 343, 191,
	337, -236, -226, -239, 105, 251, 357, -139, -225, 365,
	9, -312, -107, 29, -237, -238, 50, -130, 7, 8,
	5, 6, -137, -263, -232, -272, 305, 111, 193, -310,
	-311, 4, -294, -287, -264, -274, -268, -271, 156, 59,
	76, 77, 80, 78, 81, 264, 316, 51, 28, 109,
	110, 211, 219, 284, 303, 304, 138, 194, 139, 57,
	129, 170, 98, 37, 39, 41, 42, 52, 53, 86,
	88, 89, 116, 117, 118, 148, 150, 151, 152, 153,
	154, 196, 230, 271, 281, 297, 298, 324, -295, -275,
	-276, -269, -270, -277, -222, 2, 124, 357, -175, -176,
	-215, -216, 2, -166, 138, -130, 2, -166, 2, 143,
	-130, 138, 2, -130, 357, -130, 22, 124, 2, 157,
	2, 157, 2, -255, 2, -254, -167, 138, 2, -166,
	-167, 138, 2, -143, 138, 2, -142, -130, 138, 2,
	-158, 138, 2, -192, 357, -260, 2, -259, -288, 323,
	360, 360, 360, 360, 360, 201, 362, -166, -222, -234,
	357, 124, -222, 201, -130, -91, 336, 2, 2, 266,
	2, 357, -70, 54, 302, -209, 2, -210, -127, -128,
	-129, 159, 224, 229, 336, 299, 342, 124, -290, -147,
	90, -169, 359, -91, 2, -292, 2, -289, 9, 266,
	2, 226, 263, 56, 124, 2, 2, -334, 2, 201,
	124, 2, 124, 2, 124, 2, 124, 2, 124, 2,
	2, 226, 263, 2, 121, 2, 301, 2, 2, 124,
	2, 159, 224, 278, 2, 287, 326, 2, 124, 124,
	-181, -254, -154, -155, -180, -199, -200, 174, 113, 199,
	-183, 22, 96, -183, -183, 44, 358, 358, 8, 7,
	7, -208, -209, -208, 299, -134, 362, -318, -159, 357,
	-178, -170, -256, -222, 350, -170, -177, -245, -222, 90,
	71, -186, 162, 186, 125, 171, 248, 146, 7, -49,
	-219, 365, 357, 350, -249, 338, -107, -253, 357, -252,
	-139, 357, -117, 239, -116, 21, 23, 99, 321, 105,
	275, 293, 255, 239, 105, 239, 275, 293, 255, 239,
	105, 365, -292, -140, 362, -286, 350, 10, 11, 58,
	33, 348, 349, 350, 351, 119, 352, 353, 346, 347,
	345, 340, 341, 342, 64, 179, 253, 13, 14, 15,
	26, 204, 173, 337, 140, 269, 343, 16, 17, 18,
	158, 36, 141, -136, -144, -222, -222, -222, -222, -222,
	210, -174, -217, 355, -107, 357, 357, -107, -222, -168,
	357, 7, -107, -231, 355, -240, -222, -175, 357, 5,
	357, 5, -319, 332, 121, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 221, -281, 327, -281, -281, -265, 357,
	-265, -266, 357, -265, 333, 338, 357, 279, 358, -164,
	-139, -176, 357, -153, 191, -126, -316, 331, -153, 357,
	-131, 138, 2, -130, -316, 191, 357, -98, -99, -100,
	-130, -255, -141, -139, -141, 265, -130, 30, -119, 362,
	49, 244, 105, -119, 105, -119, 362, 105, 105, 105,
	-168, -222, 358, 362, -333, -339, 70, 357, 30, -233,
	-261, -262, -264, -273, -267, -271, -272, 40, 46, 45,
	294, 184, 260, 272, 319, 38, 200, 149, 148, 150,
	151, 152, 153, 154, 271, 37, 230, 117, 118, 116,
	98, 89, 88, 196, 42, 41, -275, -276, -269, -270,
	86, 297, 298, 156, 39, 53, 52, 324, 281, -293,
	-292, -333, -69, -285, -168, 30, -209, 2, 362, -210,
	172, -146, 178, 190, 134, 202, 334, -291, 5, 4,
	-232, -246, 90, 175, -272, -284, 90, -290, -284, 90,
	74, 359, -286, -166, 22, 267, 2, -285, -336, 121,
	-333, -285, -285, -285, -285, -285, 262, -49, 121, -130,
	172, -285, 2, -285, 2, 287, 143, 287, -119, 362,
	-180, -200, -199, -201, -222, 22, -204, 115, 187, -222,
	-224, -106, -106, -106, -156, -250, -222, 223, 143, -134,
	-314, 30, -158, -161, 362, 124, 30, 4, -161, 362,
	358, 162, 162, -252, -186, 162, -184, 208, -184, -184,
	-331, 357, 356, -249, -286, 355, 363, -168, 2, -248,
	-247, 30, -130, 206, 358, -139, 362, 299, -197, 66,
	60, -212, 138, 60, -298, -130, 66, -299, 55, 311,
	223, 123, -197, 66, -197, 66, 66, -254, 33, -61,
	124, 299, -254, 299, 33, -61, 124, 299, -142, -286,
	-258, 339, -130, -279, -261, -278, 235, 236, 234, 238,
	237, -261, -286, 296, -222, -222, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, -222, 173, 140, 269, 36,
	141, -222, 299, -222, -222, -222, -222, 183, 191, 193,
	305, 111, 312, 96, 197, -344, 285, 32, -229, -107,
	357, -244, 27, 274, 22, -236, 251, 357, -217, -222,
	-218, -168, 358, 358, 362, -168, -235, 356, -231, -243,
	-242, 328, 358, -168, 325, 22, 96, 350, 2, 7,
	-193, 335, 182, 87, 135, 181, -194, 257, -320, 114,
	130, 357, 358, 2, 358, 2, 358, 2, -222, -222,
	-187, 2, -280, -168, 4, 335, 182, 87, 135, 181,
	257, -187, 2, -188, 2, -222, -168, -189, -223, -224,
	348, 349, 343, 357, 251, -190, 2, -222, -168, -222,
	43, 169, 300, -191, -222, 124, -168, -222, -222, -222,
	-168, -168, 2, -168, 2, 357, 7, 7, 296, 296,
	7, 124, 358, 362, -148, -158, -149, -130, -213, -212,
	-300, -301, -298, 143, 311, 112, 30, 105, 215, 30,
	201, 191, -122, 290, 105, -98, 358, 362, -130, -214,
	329, -205, -61, 357, 90, 30, -205, -171, -172, -257,
	-173, -139, 357, -130, -166, -167, -167, -142, -143, -130,
	-158, 358, 362, -49, -259, 299, 318, -149, -48, 358,
	362, -160, 29, 355, -193, 357, -258, 362, 124, 358,
	302, -210, -145, 229, 273, 240, 261, 362, -286, -335,
	-130, 262, -49, -139, -142, -139, -254, -202, -282, 357,
	349, -203, 251, 252, 362, -115, 31, 94, 163, -139,
	357, 358, -214, -256, -163, 2, -252, -286, -214, -245,
	-252, -252, -185, 318, 201, 162, -252, -247, 358, -332,
	7, -249, -248, 7, -221, -220, 122, 189, 358, -130,
	357, -249, 358, -116, -139, -130, -130, 191, -212, 138,
	-121, 191, -261, -130, 357, 357, 163, 163, -130, -130,
	138, -130, 138, -130, -130, -117, 239, -61, 357, -139,
	239, -130, -61, 357, -130, 239, -97, 137, 197, 336,
	-222, -222, 299, -344, 285, -229, -222, 183, 193, 305,
	111, 312, 96, 197, 124, 357, -223, -223, -168, -226,
	357, -168, 356, 366, 358, -222, 356, 356, 362, -241,
	-242, 100, -222, -155, 362, -154, -222, -168, -168, 358,
	358, 299, 299, 299, 299, 357, -325, 209, 357, 357,
	-222, 30, 362, 358, 124, 358, 358, -195, 217, 358,
	10, 11, 348, 349, 350, 351, 119, 352, 353, 346,
	347, 345, 340, 341, 342, 64, 179, 253, 13, 14,
	15, 158, 141, -223, -223, -223, -168, 357, 358, -227,
	-228, 124, 121, 30, -191, -191, -191, 358, 124, -168,
	362, 362, 362, 358, 358, 358, 7, 358, 362, 358,
	336, 336, 358, 279, 124, -139, 358, 358, 362, -131,
	143, -131, -61, -166, 5, -61, -139, 105, -123, 101,
	-343, 342, -130, 358, -100, -182, 246, -222, -182, -207,
	201, -164, 323, -130, -182, -162, 362, 124, 342, -164,
	-119, -119, -119, -222, -335, -292, 358, -261, 355, 356,
	7, 7, -103, 331, -292, -335, -127, 309, 63, 229,
	-290, 362, -203, -222, -250, -139, 365, -48, -179, 130,
	-258, 362, -179, -185, 357, -222, -252, 356, 358, 362,
	-248, 356, 362, 364, 342, -249, 357, -158, -247, 299,
	299, 105, 191, 320, -302, -299, -222, -157, -251, -130,
	-313, 357, -310, -311, -137, 357, 357, -114, 99, 265,
	-198, 105, -119, 105, -119, 299, -197, 66, -168, 299,
	-168, 299, -103, 124, 286, -222, -222, -223, -223, 124,
	357, -222, -233, 26, 26, 358, -168, 358, 362, -218,
	-222, 358, -231, 102, -222, 295, 358, 325, -155, -155,
	-155, 5, 182, 135, 181, -194, 181, -194, -194, 7,
	-326, -130, 357, 329, -154, 358, -279, -261, -222, -227,
	-222, -279, -261, -223, -223, -223, -223, -223, -223, -223,
	-223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
	-223, -223, 96, 191, 197, -223, 362, -168, 358, -228,
	-227, -222, -222, -261, 358, 358, 358, -168, -222, -222,
	-222, 358, 7, 279, -150, 142, -213, 357, -131, 357,
	357, -153, 357, -130, -124, 168, -343, -289, -316, 363,
	-170, 192, -182, 65, 358, -214, -172, -163, -245, 358,
	-104, 72, -104, 7, 356, 358, -102, 203, -101, -130,
	5, -130, 202, 358, -115, -286, 358, -230, 132, 44,
	-252, -230, -158, -219, 7, -220, -286, 355, -248, -158,
	358, -130, -130, -212, 105, -303, 66, -304, 58, 112,
	70, 191, 193, 311, 223, 55, 90, 233, 358, 358,
	362, -138, -175, 58, -138, -222, 357, -157, -158, 191,
	90, 191, 90, 83, 307, -130, -130, -139, -130, -130,
	358, -139, 358, -130, -293, 296, 26, 26, -222, -233,
	358, -222, -222, 358, -222, 356, -222, 5, -222, 358,
	358, 358, 358, -327, -130, -222, 358, 358, 358, -228,
	124, 96, 197, 357, -222, 358, 358, 362, 358, 358,
	358, 141, -157, 357, -158, -148, 30, -157, 201, -125,
	167, -343, -289, -122, -2, -206, 357, 201, -61, -182,
	342, 83, 83, 356, 362, 357, 342, 342, -115, -322,
	330, -222, -168, -322, 358, -249, 7, 358, -212, -130,
	-286, -130, 112, 138, 193, 163, 357, -223, -139, -211,
	-340, 69, 283, -251, -115, -286, -115, 358, -168, 358,
	358, 193, 193, -222, -261, -119, -119, 299, 299, 299,
	299, -225, -137, -130, -222, -222, 358, 358, -155, -321,
	214, 358, -223, 124, 357, -233, 358, -222, 212, 358,
	-157, 358, 358, -61, 358, -139, -343, -289, -123, 364,
	97, -158, 66, -178, -107, 357, 357, 357, -101, -102,
	-292, -292, -323, -324, -130, -248, 356, -304, -131, 191,
	-222, -132, 357, -150, 357, -138, -155, 233, -118, 58,
	-130, -130, 357, 357, 357, 358, -155, 44, -223, -233,
	358, 358, -139, -211, 358, -150, -211, 357, -289, -124,
	313, 192, 358, -130, -293, -293, 358, 362, 30, 105,
	358, -307, 180, -130, -158, -115, 358, -139, -113, 318,
	-286, -168, -168, -168, -328, 228, 252, -168, 358, 357,
	-150, -211, -150, -157, -125, 265, -214, 358, 358, -324,
	-326, 112, -305, -308, -306, 201, 125, 213, 270, 358,
	358, -153, -222, 358, 358, -155, 358, -329, -330, 36,
	308, 74, -222, -329, -158, -150, 358, -171, -103, -103,
	-130, -306, 201, -308, 201, 313, 93, -307, 358, -330,
	220, 120, 251, 220, 120, 358, -211, -214, -309, 188,
	244, 49, 265, -309, -305, 26, -120, 49, 244, -150,
	20, 193, 90, -330,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 46,
	47, 48, 49, 51, 53, 56, 58, 60, 62, 0,
	0, 144, 146, 0, 0, 153, 155, 157, 159, -2,
	162, 164, 166, 167, 0, 0, 0, 0, 177, 179,
	181, 183, 185, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 636, -2, 0, 0, 272,
	274, 276, 278, 279, 0, 330, 332, 334, 336, 338,
	340, 342, 344, 346, 348, 350, 352, 354, 356, 358,
	359, 361, 363, 0, 549, 551, 553, -2, 65, 66,
	67, 68, 69, 75, 76, 77, 78, 71, 73, 672,
	-2, 683, 0, 0, -2, 0, -2, -2, -2, 0,
	0, 649, 651, 653, 655, -2, 0, 0, -2, 6,
	12, 14, 16, 19, 21, 23, 26, 28, 30, 32,
	34, 36, 38, 40, 43, 45, 50, 52, 54, 57,
	59, 61, 63, 64, 0, 0, 0, 0, 0, 119,
	251, 0, 1235, 1161, 1167, 1168, 1192, 1193, 1194, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
	1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
	1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
	1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
	1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
	1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
	1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
	1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
	1423, 1424, 1425, 1426, 145, 147, 148, 0, 0, 0,
	1163, 1235, 154, 156, 158, 160, 0, 168, 0, 0,
	0, 0, 588, 0, 516, 163, 165, 0, 242, 1296,
	244, 246, 0, 0, 0, 0, 171, 172, 173, 174,
	175, 176, 178, 180, 182, 184, 186, 187, 0, 0,
	0, 0, 0, 241, 239, 209, 210, 0, 223, 224,
	225, 226, 227, 229, 230, 213, 214, 215, 217, 219,
	221, 0, 248, 254, 255, 256, 258, 259, 260, 261,
	262, 263, 264, 431, 1206, 1207, 1208, 1209, 1210, 1427,
	1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 0, 125, 0, 437, 237,
	235, 0, 121, 0, 546, 0, 250, 547, 548, 543,
	544, 1324, 572, 267, 0, 269, 369, 370, 371, 372,
	373, 0, 273, 275, 277, -2, -2, 1413, -2, 285,
	-2, 295, 1419, 0, 298, 299, 304, -2, 205, 331,
	333, 335, 337, 339, 341, 343, 345, 347, 349, 351,
	353, 355, 357, 360, 362, 364, 365, 366, 0, 0,
	0, 370, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 550, 552, 554, 0, 506, 674, -2, 647,
	648, -2, 0, 678, 678, 678, 0, 0, 648, 646,
	0, 270, 271, 307, 308, 309, 318, 319, 320, 321,
	502, 0, 504, 328, 329, 1188, 0, 1202, 1203, 1204,
	1205, 574, 556, 565, 574, 558, 559, 560, 561, 562,
	563, 564, 567, 0, 664, 1303, 667, 1174, 665, 650,
	652, 0, 654, 0, 0, 658, 680, 679, 711, 712,
	0, 662, 663, 673, 727, 765, 742, 733, 0, 0,
	2, 70, 0, 1395, 765, 72, 0, 1395, 765, 74,
	0, 79, 0, 1395, 1166, 0, 0, 252, 253, 1171,
	1169, 1170, 0, 149, 150, 873, 0, 0, 0, 0,
	0, 0, 965, 967, 1387, 1413, 0, 969, 970, 0,
	972, 974, 975, 0, 978, 979, 1131, 1163, 1177, 1178,
	1179, 1180, 0, 0, 1183, 0, 1185, 1186, 1187, 1031,
	989, -2, -2, 1175, 801, 802, 803, 804, -2, 1427,
	993, 996, 999, 1002, 1003, 1004, 1005, 0, 1371, 1388,
	1389, 1409, 1410, 1418, 1422, 1423, 1395, 1406, 1396, 1383,
	1393, 1404, 1241, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1201, 835,
	836, 841, 842, 844, 151, 152, 0, 0, 1164, 1140,
	1138, 1139, 161, 485, 1395, -2, 508, 485, 512, -2,
	671, 1395, 587, 0, 592, 243, 245, 0, 170, 0,
	609, 0, 611, 0, 626, 771, 111, 1395, 190, 203,
	111, 1395, 193, 111, 1395, 196, 1159, 197, 1395, 199,
	200, 1395, 202, 238, 0, 0, -2, 231, 233, -2,
	228, 216, 218, 220, 222, 0, 0, 0, 436, 0,
	0, 0, 545, 0, 571, 268, 374, 375, 280, 0,
	282, 0, 284, 1382, -2, 287, 288, 575, 578, 579,
	580, 0, 0, 0, 0, 0, 0, 0, 300, 301,
	302, 206, 0, 367, 368, 376, 377, 126, 127, 0,
	380, 401, 413, 0, 0, 384, 386, 435, 388, 0,
	0, 390, 0, 392, 0, 394, 0, 396, 0, 398,
	400, 402, 414, 404, 673, 406, 0, 408, 412, 0,
	417, 0, 419, 420, 421, 0, 0, 427, 0, 0,
	111, 769, -2, 0, 642, 692, 693, 0, 0, 0,
	0, 676, 677, 0, 0, 0, 638, 639, 503, 1190,
	1189, 555, 573, 557, 0, 569, 0, 666, 0, 0,
	713, 716, 1151, 1155, 1156, 716, 0, 1148, 1146, 1147,
	0, 0, 0, 0, 762, 762, 762, 760, 736, 0,
	742, 0, 0, 766, 754, 0, -2, 733, 0, 0,
	767, 0, 80, 540, 90, 0, 540, 540, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 756, 1162, 0, 1136, 1137, 0, 0, 0,
	0, 1066, 1067, 1068, 1069, 1070, 1071, 1074, 1075, 1072,
	1073, 1076, 1077, 1078, 0, 0, 0, 1079, 1080, 1081,
	0, 0, 1083, 0, 1085, 0, 0, 0, 0, 0,
	0, 1145, 0, 0, 1082, 878, 879, 880, 902, 903,
	0, 966, 1142, 1135, 968, 0, 0, -2, 1087, 0,
	0, 971, 976, 977, 0, 0, 1130, -2, 0, 1182,
	0, 870, 1033, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1110, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 820, 838, 849, 846, 845, 822, 0,
	821, 819, 0, 823, 0, 0, 0, 141, 0, 0,
	1157, 1141, 443, 0, 0, 507, 0, 670, 0, 0,
	0, 1395, 515, 1195, 598, 0, 592, 0, 591, 594,
	0, 775, 0, 612, 0, 0, 772, 0, 188, 0,
	109, 110, 0, 191, 0, 194, 0, 0, 0, 0,
	0, 1087, 673, 0, 0, 257, 0, 0, 673, 0,
	1089, 783, 784, 785, 786, 787, 870, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 832,
	0, 807, 807, 807, 824, 825, 833, 834, 839, 840,
	851, 852, 854, 856, 850, 850, 850, 847, 848, 756,
	128, 0, 281, 0, 0, 0, 289, 290, 0, 577,
	0, 581, 315, 316, 317, 583, 584, 296, 322, 323,
	324, 325, 326, 327, 0, 291, 293, 305, 292, 294,
	297, 0, 207, 378, 379, 381, 382, 383, 387, 0,
	432, 389, 391, 393, 395, 397, 405, 409, 673, 415,
	418, 422, 423, 424, 425, 0, 0, 0, 505, 0,
	645, 690, 691, 694, 698, 699, 702, 705, 706, 696,
	873, 659, 660, 661, 684, 685, 527, 0, 0, 568,
	668, 0, 0, 775, 0, 0, 0, 1154, 775, 0,
	1150, 0, 0, 0, 0, 0, 757, 761, 758, 759,
	0, 0, 742, 754, 724, 0, 0, 0, 731, 732,
	753, 0, 752, 741, -2, 0, 0, 0, 0, 0,
	539, 92, 1395, 0, 113, 0, 0, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 1165,
	131, 0, 1172, 874, 779, 780, 826, 827, 828, 829,
	830, 875, 876, 0, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, -2, -2, -2, 894, 895, 896,
	-2, -2, -2, 900, 901, -2, 1084, 1086, 0, 1145,
	0, -2, 0, -2, -2, -2, -2, 914, 0, 916,
	919, 921, 923, 0, 0, 0, 0, 1144, 933, 1122,
	0, 0, 1063, 1064, 1065, 918, 0, 0, 1143, 1134,
	0, 0, -2, 973, 0, 0, 0, 1093, 1094, 1129,
	1125, 0, 980, 683, 0, 0, 0, 0, 987, 0,
	1191, 857, 858, 859, 860, 861, 862, 871, 1041, 0,
	0, 0, 994, 995, 997, 998, 1000, 1001, 0, 0,
	0, 1009, 0, 1097, -2, -2, -2, -2, -2, -2,
	-2, 0, 1011, 0, 1013, 1087, 1107, 0, 0, 936,
	0, 0, 0, 0, 1413, 0, 1016, 1087, 1115, 0,
	0, 0, 0, 0, 1087, 0, 1121, 0, 0, 0,
	0, 0, 1027, 0, 1029, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 442, 1171, 444, 446,
	447, 448, 449, 1196, 0, 1196, 0, 0, 0, 0,
	0, 0, 600, 606, 0, 0, 589, 0, 595, 624,
	0, 624, 614, 0, 0, 0, 624, 628, 629, 631,
	632, 0, 0, 773, 204, 111, 111, 1160, 111, 198,
	201, 240, 0, 211, 232, 0, 0, 0, 234, 236,
	0, 776, 778, 0, 788, 0, 140, 0, 0, 283,
	0, 576, 582, 0, 312, 0, 314, 0, 208, 434,
	265, 407, 410, 428, 429, 430, 770, 0, 700, 0,
	0, 697, 703, 704, 0, 687, 525, 526, 0, 0,
	673, 1173, 708, 1152, 756, 715, 717, 1153, 708, 1149,
	744, 0, 746, 0, 0, 0, 748, 0, 737, 0,
	739, 754, 729, 0, 0, 722, 0, 721, 742, 750,
	0, 0, 768, 91, 529, 0, 0, 0, 94, 1395,
	102, 0, 457, 0, 0, 0, 0, 0, 542, 103,
	1395, 111, 1395, 111, 104, 81, 540, 82, 0, 535,
	0, 528, 83, 0, 537, 0, 140, 0, 0, 0,
	-2, -2, 0, 0, 0, 934, -2, 915, 917, 920,
	922, 924, 0, 0, 0, 0, 0, 0, 0, 935,
	0, 0, 1132, 1135, -2, 1088, 1091, 1092, 0, 0,
	1126, 0, 0, 0, 0, 682, 683, 683, 683, 986,
	0, 0, 0, 0, 0, 0, 988, 0, 0, 0,
	0, 0, 0, 1008, 0, 1010, 1012, 0, 0, 1014,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 939, 940, 941, 0, 0, 1015, 1113,
	1114, 0, 0, 0, 0, 0, 0, 1021, 0, 1120,
	0, 0, 0, 1025, 1026, 1028, 0, 805, 0, 831,
	853, 855, 843, 142, 0, 1158, 451, 484, 0, 0,
	1196, 0, 440, 485, 509, 511, 0, 0, 602, 606,
	0, 605, 671, 0, 593, 169, 0, 774, 607, 624,
	0, 0, 616, 613, 610, 775, 0, 0, 0, 0,
	189, 192, 195, 1088, 247, 0, 0, 1090, 0, 781,
	0, 0, 120, 0, 129, 249, 286, 310, 311, 313,
	306, 0, 0, 0, 686, 527, 0, 0, 710, 0,
	714, 0, 710, 745, 0, 764, 747, 727, 738, 0,
	735, 725, 0, 726, 0, 754, 0, 0, 734, 0,
	0, 0, 0, 112, 455, 474, 0, 0, 518, 524,
	524, 0, 990, 991, 0, 0, 0, 96, 0, 0,
	0, 0, 100, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 877, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1123, 0, 1058, 0, 0,
	1134, -2, 1095, 1124, 1128, 0, 981, 0, 0, 0,
	0, 1184, 863, 864, 865, 866, 867, 868, 869, 0,
	1039, 1040, 1044, 0, 0, 992, 0, 0, 1096, 1106,
	1108, 937, 938, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, -2, -2, -2, 955, 956, 957, -2,
	-2, -2, 0, 0, 0, 1109, 0, 0, 1061, 1111,
	1112, 1117, 1118, 0, 1018, 1019, 1020, 1119, 0, 0,
	0, 837, 0, 143, 438, 0, 445, 0, 0, 0,
	443, 0, 0, 0, 604, 606, 0, 597, 598, -2,
	622, 623, 608, 621, 0, 624, 630, 627, 633, 0,
	0, 122, 0, 0, 782, 789, 138, 1286, 136, 133,
	135, 266, 695, 701, 688, 527, 669, 1035, 0, 0,
	718, 1035, 0, 742, 740, 723, 719, 0, 730, 0,
	751, 531, 533, 93, 0, 456, 0, 459, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 476, 483,
	0, 527, 1176, 0, 527, 0, 0, 0, 0, 0,
	108, 0, 0, 541, 0, 111, 111, 530, 0, 0,
	0, 536, 0, 538, 130, 0, 0, 0, -2, 0,
	927, -2, -2, 1057, 1088, 1133, 1127, 1181, 683, 982,
	984, 985, 872, 1046, 1043, 0, 1030, 1006, 1007, 1105,
	0, 0, 0, 0, 1088, 1060, 1017, 0, 1023, 1024,
	806, 0, 0, 0, 0, 0, 0, 0, 0, 585,
	606, 0, 599, 600, 0, 0, 0, 0, 615, 625,
	0, 0, 0, 777, 0, 0, 0, 0, 689, 656,
	0, 709, 707, 657, 763, 754, 0, 749, 95, 0,
	460, 461, 1196, 0, 464, 467, 0, 469, 1198, 451,
	0, 480, 481, 519, 520, 523, 521, 524, 683, 478,
	0, 97, 98, 107, 115, 99, 105, 0, 0, 0,
	0, 755, 0, 0, -2, -2, 928, 1059, 0, 683,
	0, 1032, -2, 0, 0, 0, 1062, 0, 0, 483,
	0, 473, 451, 441, 483, 0, 0, 601, 602, 590,
	0, 0, 0, 634, 635, 0, 0, 0, 137, 0,
	132, 134, 1034, 1036, 0, 728, 720, 458, 462, 0,
	0, 489, 0, 477, 0, 527, 0, 0, 117, 0,
	532, 534, 0, 0, 0, 983, 1049, 0, -2, 0,
	963, 1022, 0, 451, 483, 439, 451, 0, 603, 604,
	0, 618, 775, 620, 0, 0, 139, 0, 0, 0,
	468, 494, 0, 0, 0, 522, 981, 485, 101, 0,
	114, 0, 0, 683, 0, 0, 0, 1045, 964, 0,
	471, 451, 513, 0, 586, 0, 619, 140, 140, 1037,
	1038, 0, 470, 490, 491, 0, 486, 487, 488, 1197,
	482, 489, 116, 87, 89, 0, 1042, 1047, 1050, -2,
	1355, 1232, 0, 1048, 0, 472, 483, 775, 123, 124,
	463, 492, 0, 493, 0, 0, 0, 494, 0, 0,
	1052, 1053, 1054, 1055, 1056, 454, 451, 617, 495, 0,
	498, 499, 0, 496, 479, 0, 450, 452, 453, 514,
	497, 500, 501, 1051,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 346, 3, 352, 347, 3,
	357, 358, 350, 348, 362, 349, 359, 351, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 366, 361,
	340, 342, 341, 3, 365, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 355, 3, 356, 353, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 363, 345, 364, 343,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 344, 57683, 354, 57684, 360,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:875
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:881
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:887
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:916
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "RESET")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "ALTER")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:978
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1000
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1020
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1046
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1052
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1118
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1141
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1151
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = nil
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = DropCascade
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = DropRestrict
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = DropDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1213
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1214
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1217
		{
			return unimplemented(sqllex, "alter using")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1218
		{
		}
	case 118:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1245
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.str = "CSV"
		}
	case 123:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1378
		{
		}
	case 141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1398
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1399
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1400
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1411
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1430
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1432
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			return helpWith(sqllex, "CREATE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			return helpWith(sqllex, "DELETE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1471
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1472
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1474
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			return helpWith(sqllex, "DROP")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1529
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1559
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1619
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			return helpWith(sqllex, "DELETE")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
			return helpWith(sqllex, "INSERT")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1629
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1638
		{ /* SKIP DOC */
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1691
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			return helpWith(sqllex, "GRANT")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1788
		{
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			return helpWith(sqllex, "RESET")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1870
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{ /* SKIP DOC */
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{ /* SKIP DOC */
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1873
		{
			return unimplemented(sqllex, "set local")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1886
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1936
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1941
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1969
		{
			return unimplemented(sqllex, "set from current")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1981
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1987
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1989
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = Low
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = Normal
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = High
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2124
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2125
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "SHOW")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2135
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.str = "client_encoding"
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2161
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2178
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2183
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2194
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2216
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2248
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2253
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2283
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2296
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2301
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2350
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2361
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2372
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2383
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2398
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2402
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2406
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2418
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2446
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2545
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2549
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = DropDefault
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2559
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2764
		{
			return unimplemented(sqllex, "match full")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2765
		{
			return unimplemented(sqllex, "match partial")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			return unimplemented(sqllex, "match simple")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2767
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2773
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2774
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2776
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2777
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2783
		{
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2786
		{
			return unimplemented(sqllex, "no action")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2789
		{
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2790
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2791
		{
			return unimplemented(sqllex, "action set null")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			return unimplemented(sqllex, "action set default")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2817
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2828
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2832
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2853
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2893
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = true
		}
	case 517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = false
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2923
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2924
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2927
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2928
		{
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = Ascending
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = Descending
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2968
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2970
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = true
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = false
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3003
		{
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3004
		{
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3015
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3026
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3042
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3043
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3066
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3084
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3092
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3099
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3103
		{
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.str = ""
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.str = ""
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3150
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3159
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[2].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = ReadOnly
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = ReadWrite
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &CreateFunction{}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &CallProcedure{
				Name: sqlDollar[2].str,
			}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &CreateProcedure{
				Name:       sqlDollar[3].str,
				Parameters: sqlDollar[5].union.parameters(),
				Body:       sqlDollar[8].union.stmts(),
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = ParameterList(nil)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = append(sqlDollar[1].union.parameters(), sqlDollar[3].union.parameter())
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = ParameterList{sqlDollar[1].union.parameter()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = Parameter{
				Name: sqlDollar[2].str,
				Type: sqlDollar[1].str,
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.str = ""
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.str = ""
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.str = ""
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.str = ""
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3331
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3332
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			return helpWith(sqllex, "INSERT")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3415
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3419
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3427
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 625:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3454
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3455
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3584
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3619
		{
			return helpWith(sqllex, "SELECT")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3620
		{
			return helpWith(sqllex, "VALUES")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3621
		{
			return helpWith(sqllex, "TABLE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			return helpWith(sqllex, "SELECT")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			return helpWith(sqllex, "TABLE")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3722
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3723
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3727
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3728
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3731
		{
			return unimplemented(sqllex, "cte")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3735
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3739
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3743
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = true
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = false
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = false
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = true
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3766
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3767
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3814
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3834
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3886
		{
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3887
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3890
		{
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3891
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3949
		{
			return helpWith(sqllex, "VALUES")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3966
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &From{}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3988
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4033
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4070
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = nil
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4136
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4142
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = true
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = false
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.str = astFullJoin
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.str = astLeftJoin
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.str = astRightJoin
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.str = astInnerJoin
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4253
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4254
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4340
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4354
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4362
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4386
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4397
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4460
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4469
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = nil
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4534
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4630
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4662
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4702
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 855:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = year
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = month
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = day
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = hour
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = minute
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = month
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = hour
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = minute
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = minute
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = nil
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = second
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4797
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4832
		{
			return unimplemented(sqllex, "at tz")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5066
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5239
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5292
		{
			return unimplemented(sqllex, "variadic")
		}
	case 983:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5293
		{
			return unimplemented(sqllex, "variadic")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5306
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5317
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5333
		{
			return unimplemented(sqllex, "func_application")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5334
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5338
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5347
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5356
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5365
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5366
		{
			return unimplemented(sqllex, "current role")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5367
		{
			return unimplemented(sqllex, "current user")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5368
		{
			return unimplemented(sqllex, "session user")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5369
		{
			return unimplemented(sqllex, "user")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5382
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5387
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5392
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5401
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5402
		{
			return unimplemented(sqllex, "treat")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5439
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5441
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5444
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5448
		{
			return unimplemented(sqllex, "within group")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5449
		{
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5484
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.str = ""
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5546
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5547
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5548
		{
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5551
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5552
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5558
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5559
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5560
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5561
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5562
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5597
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = Any
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = Some
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = All
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = Plus
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5617
		{
			sqlVAL.union.val = Minus
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = Mult
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = Div
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = Mod
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = Bitand
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = Bitor
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = Pow
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = Bitxor
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = LT
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = GT
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = EQ
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = LE
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = GE
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = NE
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = Like
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5636
		{
			sqlVAL.union.val = NotLike
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = ILike
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = NotILike
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5653
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5677
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5781
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5793
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5803
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5807
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5817
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5851
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5855
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5891
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5926
		{
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5927
		{
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5984
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6045
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6080
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6089
		{
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6099
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6103
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6125
		{
			return unimplemented(sqllex, "func const")
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6134
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6136
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6140
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6144
		{
			sqlVAL.union.val = DNull
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6151
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6155
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6161
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.str = ""
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
